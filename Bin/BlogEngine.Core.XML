<?xml version="1.0"?>
<doc>
    <assembly>
        <name>BlogEngine.Core</name>
    </assembly>
    <members>
        <member name="T:BlogEngine.Core.API.BlogML.BaseReader">
            <summary>
            The base reader.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.API.BlogML.BaseReader.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:BlogEngine.Core.API.BlogML.BaseReader"/> class.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.API.BlogML.BaseReader.Import">
            <summary>
            Imports this instance.
            </summary>
            <returns>
            Always returns false.
            </returns>
        </member>
        <member name="M:BlogEngine.Core.API.BlogML.BaseReader.Validate">
            <summary>
            Validates this instance.
            </summary>
            <returns>
            Always returns false.
            </returns>
        </member>
        <member name="P:BlogEngine.Core.API.BlogML.BaseReader.ApprovedCommentsOnly">
            <summary>
                Gets or sets a value indicating whether ApprovedCommentsOnly.
            </summary>
        </member>
        <member name="P:BlogEngine.Core.API.BlogML.BaseReader.Author">
            <summary>
                Gets or sets Author.
            </summary>
        </member>
        <member name="P:BlogEngine.Core.API.BlogML.BaseReader.Message">
            <summary>
                Gets or sets Message.
            </summary>
        </member>
        <member name="P:BlogEngine.Core.API.BlogML.BaseReader.RemoveDuplicates">
            <summary>
                Gets or sets a value indicating whether RemoveDuplicates.
            </summary>
        </member>
        <member name="T:BlogEngine.Core.API.BlogML.BlogImporter">
            <summary>
            Blog Importer
            </summary>
        </member>
        <member name="M:BlogEngine.Core.API.BlogML.BlogImporter.AddPost(BlogEngine.Core.API.BlogML.BlogMlExtendedPost)">
            <summary>
            Add new blog post to system
            </summary>
            <returns>
            string containing unique post identifier
            </returns>
        </member>
        <member name="M:BlogEngine.Core.API.BlogML.BlogImporter.ForceReload">
            <summary>
            Force Reload of all posts
            </summary>
        </member>
        <member name="M:BlogEngine.Core.API.BlogML.BlogImporter.PostUrl(System.String,System.DateTime)">
            <summary>
            post url
            </summary>
            <param name="slug">post slug</param>
            <param name="dateCreated">date created</param>
            <returns></returns>
        </member>
        <member name="T:BlogEngine.Core.API.BlogML.BlogMlExtendedPost">
            <summary>
            Extended BlogML post
            </summary>
        </member>
        <member name="P:BlogEngine.Core.API.BlogML.BlogMlExtendedPost.BlogPost">
            <summary>
            Gets or sets blog post
            </summary>
        </member>
        <member name="P:BlogEngine.Core.API.BlogML.BlogMlExtendedPost.PostUrl">
            <summary>
            Gets or sets post URL
            </summary>
        </member>
        <member name="P:BlogEngine.Core.API.BlogML.BlogMlExtendedPost.Tags">
            <summary>
            Gets or sets post tags
            </summary>
        </member>
        <member name="P:BlogEngine.Core.API.BlogML.BlogMlExtendedPost.Categories">
            <summary>
            Gets or sets post categories
            </summary>
        </member>
        <member name="P:BlogEngine.Core.API.BlogML.BlogMlExtendedPost.Comments">
            <summary>
            Post comments
            </summary>
        </member>
        <member name="T:BlogEngine.Core.API.BlogML.BlogReader">
            <summary>
            Class to validate BlogML data and import it into Blog
            </summary>
        </member>
        <member name="F:BlogEngine.Core.API.BlogML.BlogReader.xmlData">
            <summary>
                The xml data.
            </summary>
        </member>
        <member name="F:BlogEngine.Core.API.BlogML.BlogReader.categoryLookup">
            <summary>
                The category lookup.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.API.BlogML.BlogReader.Import">
            <summary>
            Imports BlogML file into blog
            </summary>
            <returns>
            True if successful
            </returns>
        </member>
        <member name="M:BlogEngine.Core.API.BlogML.BlogReader.LoadFromXmlDocument">
            <summary>
            BlogML does not support tags - load directly fro XML
            </summary>
        </member>
        <member name="M:BlogEngine.Core.API.BlogML.BlogReader.LoadBlogComments(BlogEngine.Core.API.BlogML.BlogMlExtendedPost,System.Xml.XmlNode)">
            <summary>
            Lost post comments from xml file
            </summary>
            <param name="blogX">extended blog</param>
            <param name="child">comments xml node</param>
        </member>
        <member name="M:BlogEngine.Core.API.BlogML.BlogReader.LoadBlogTrackbacks(BlogEngine.Core.API.BlogML.BlogMlExtendedPost,System.Xml.XmlNode)">
            <summary>
            Lost post trackbacks and pingbacks from xml file
            </summary>
            <param name="blogX">extended blog</param>
            <param name="child">comments xml node</param>
        </member>
        <member name="M:BlogEngine.Core.API.BlogML.BlogReader.LoadBlogCategories(BlogML.Xml.BlogMLBlog)">
            <summary>
            Load blog categories
            </summary>
            <param name="blog">BlogML blog</param>
        </member>
        <member name="M:BlogEngine.Core.API.BlogML.BlogReader.LoadBlogExtendedPosts(BlogML.Xml.BlogMLBlog)">
            <summary>
            extended post has all BlogML plus fields not supported
            by BlogML like tags. here we assign BlogML post
            to extended matching on post URL 
            </summary>
            <param name="blog">BlogML blog</param>
        </member>
        <member name="M:BlogEngine.Core.API.BlogML.BlogReader.LoadBlogPosts">
            <summary>
            Loads the blog posts.
            </summary>
        </member>
        <member name="P:BlogEngine.Core.API.BlogML.BlogReader.PostCount">
            <summary>
            imported posts counter
            </summary>
        </member>
        <member name="P:BlogEngine.Core.API.BlogML.BlogReader.XmlData">
            <summary>
                Sets BlogML data uploaded and saved as string
            </summary>
        </member>
        <member name="P:BlogEngine.Core.API.BlogML.BlogReader.XmlReader">
            <summary>
                Gets an XmlReader that converts BlogML data saved as string into XML stream
            </summary>
        </member>
        <member name="T:BlogEngine.Core.API.MetaWeblog.MetaWeblogException">
            <summary>
            Exception specifically for MetaWeblog API.  Error (or fault) responses 
                request a code value.  This is our chance to add one to the exceptions
                which can be used to produce a proper fault.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.API.MetaWeblog.MetaWeblogException.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:BlogEngine.Core.API.MetaWeblog.MetaWeblogException"/> class. 
            Constructor to load properties
            </summary>
            <param name="code">
            Fault code to be returned in Fault Response
            </param>
            <param name="message">
            Message to be returned in Fault Response
            </param>
        </member>
        <member name="P:BlogEngine.Core.API.MetaWeblog.MetaWeblogException.Code">
            <summary>
                Gets code is actually for Fault Code.  It will be passed back in the 
                response along with the error message.
            </summary>
        </member>
        <member name="T:BlogEngine.Core.API.MetaWeblog.MetaWeblogHandler">
            <summary>
            HTTP Handler for MetaWeblog API
            </summary>
        </member>
        <member name="M:BlogEngine.Core.API.MetaWeblog.MetaWeblogHandler.ProcessRequest(System.Web.HttpContext)">
            <summary>
            Process the HTTP Request.  Create XMLRPC request, find method call, process it and create response object and sent it back.
            This is the heart of the MetaWeblog API
            </summary>
            <param name="context">An <see cref="T:System.Web.HttpContext"/> object that provides references to the intrinsic server objects (for example, Request, Response, Session, and Server) used to service HTTP requests.</param>
        </member>
        <member name="M:BlogEngine.Core.API.MetaWeblog.MetaWeblogHandler.DeletePage(System.String,System.String,System.String,System.String)">
            <summary>
            Deletes the page.
            </summary>
            <param name="blogId">
            The blog id.
            </param>
            <param name="pageId">
            The page id.
            </param>
            <param name="userName">
            The user name.
            </param>
            <param name="password">
            The password.
            </param>
            <returns>
            The delete page.
            </returns>
            <exception cref="T:BlogEngine.Core.API.MetaWeblog.MetaWeblogException">
            </exception>
        </member>
        <member name="M:BlogEngine.Core.API.MetaWeblog.MetaWeblogHandler.DeletePost(System.String,System.String,System.String,System.String,System.Boolean)">
            <summary>
            blogger.deletePost method
            </summary>
            <param name="appKey">
            Key from application.  Outdated methodology that has no use here.
            </param>
            <param name="postId">
            post guid in string format
            </param>
            <param name="userName">
            login username
            </param>
            <param name="password">
            login password
            </param>
            <param name="publish">
            mark as published?
            </param>
            <returns>
            Whether deletion was successful or not.
            </returns>
        </member>
        <member name="M:BlogEngine.Core.API.MetaWeblog.MetaWeblogHandler.EditPage(System.String,System.String,System.String,System.String,BlogEngine.Core.API.MetaWeblog.MWAPage,System.Boolean)">
            <summary>
            Edits the page.
            </summary>
            <param name="blogId">
            The blog id.
            </param>
            <param name="pageId">
            The page id.
            </param>
            <param name="userName">
            The user name.
            </param>
            <param name="password">
            The password.
            </param>
            <param name="mwaPage">
            The m page.
            </param>
            <param name="publish">
            The publish.
            </param>
            <returns>
            The edit page.
            </returns>
        </member>
        <member name="M:BlogEngine.Core.API.MetaWeblog.MetaWeblogHandler.EditPost(System.String,System.String,System.String,BlogEngine.Core.API.MetaWeblog.MWAPost,System.Boolean)">
            <summary>
            metaWeblog.editPost method
            </summary>
            <param name="postId">
            post guid in string format
            </param>
            <param name="userName">
            login username
            </param>
            <param name="password">
            login password
            </param>
            <param name="sentPost">
            struct with post details
            </param>
            <param name="publish">
            mark as published?
            </param>
            <returns>
            1 if successful
            </returns>
        </member>
        <member name="M:BlogEngine.Core.API.MetaWeblog.MetaWeblogHandler.GetAuthors(System.String,System.String,System.String)">
            <summary>
            Gets authors.
            </summary>
            <param name="blogId">
            The blog id.
            </param>
            <param name="userName">
            The user name.
            </param>
            <param name="password">
            The password.
            </param>
            <returns>
            A list of authors.
            </returns>
        </member>
        <member name="M:BlogEngine.Core.API.MetaWeblog.MetaWeblogHandler.GetCategories(System.String,System.String,System.String,System.String)">
            <summary>
            metaWeblog.getCategories method
            </summary>
            <param name="blogId">
            always 1000 in BlogEngine since it is a singlar blog instance
            </param>
            <param name="userName">
            login username
            </param>
            <param name="password">
            login password
            </param>
            <param name="rootUrl">
            The root URL.
            </param>
            <returns>
            array of category structs
            </returns>
        </member>
        <member name="M:BlogEngine.Core.API.MetaWeblog.MetaWeblogHandler.GetKeywords(System.String,System.String,System.String)">
            <summary>
            wp.getTags method
            </summary>
            <param name="blogId">The blog id.</param>
            <param name="userName">Name of the user.</param>
            <param name="password">The password.</param>
            <returns>list of tags</returns>
        </member>
        <member name="M:BlogEngine.Core.API.MetaWeblog.MetaWeblogHandler.GetPage(System.String,System.String,System.String,System.String)">
            <summary>
            wp.getPage method
            </summary>
            <param name="blogId">
            blogID in string format
            </param>
            <param name="pageId">
            page guid in string format
            </param>
            <param name="userName">
            login username
            </param>
            <param name="password">
            login password
            </param>
            <returns>
            struct with post details
            </returns>
        </member>
        <member name="M:BlogEngine.Core.API.MetaWeblog.MetaWeblogHandler.GetPages(System.String,System.String,System.String)">
            <summary>
            wp.getPages method
            </summary>
            <param name="blogId">
            blogID in string format
            </param>
            <param name="userName">
            login username
            </param>
            <param name="password">
            login password
            </param>
            <returns>
            a list of pages
            </returns>
        </member>
        <member name="M:BlogEngine.Core.API.MetaWeblog.MetaWeblogHandler.GetPost(System.String,System.String,System.String)">
            <summary>
            metaWeblog.getPost method
            </summary>
            <param name="postId">
            post guid in string format
            </param>
            <param name="userName">
            login username
            </param>
            <param name="password">
            login password
            </param>
            <returns>
            struct with post details
            </returns>
        </member>
        <member name="M:BlogEngine.Core.API.MetaWeblog.MetaWeblogHandler.GetRecentPosts(System.String,System.String,System.String,System.Int32)">
            <summary>
            metaWeblog.getRecentPosts method
            </summary>
            <param name="blogId">
            always 1000 in BlogEngine since it is a singlar blog instance
            </param>
            <param name="userName">
            login username
            </param>
            <param name="password">
            login password
            </param>
            <param name="numberOfPosts">
            number of posts to return
            </param>
            <returns>
            array of post structs
            </returns>
        </member>
        <member name="M:BlogEngine.Core.API.MetaWeblog.MetaWeblogHandler.GetUserBlogs(System.String,System.String,System.String,System.String)">
            <summary>
            blogger.getUsersBlogs method
            </summary>
            <param name="appKey">
            Key from application.  Outdated methodology that has no use here.
            </param>
            <param name="userName">
            login username
            </param>
            <param name="password">
            login password
            </param>
            <param name="rootUrl">
            The root URL.
            </param>
            <returns>
            array of blog structs
            </returns>
        </member>
        <member name="M:BlogEngine.Core.API.MetaWeblog.MetaWeblogHandler.NewMediaObject(System.String,System.String,System.String,BlogEngine.Core.API.MetaWeblog.MWAMediaObject,System.Web.HttpContext)">
            <summary>
            metaWeblog.newMediaObject method
            </summary>
            <param name="blogId">
            always 1000 in BlogEngine since it is a singlar blog instance
            </param>
            <param name="userName">
            login username
            </param>
            <param name="password">
            login password
            </param>
            <param name="mediaObject">
            struct with media details
            </param>
            <param name="request">
            The HTTP request.
            </param>
            <returns>
            struct with url to media
            </returns>
        </member>
        <member name="M:BlogEngine.Core.API.MetaWeblog.MetaWeblogHandler.NewPage(System.String,System.String,System.String,BlogEngine.Core.API.MetaWeblog.MWAPage,System.Boolean)">
            <summary>
            wp.newPage method
            </summary>
            <param name="blogId">blogID in string format</param>
            <param name="userName">login username</param>
            <param name="password">login password</param>
            <param name="mwaPage">The mwa page.</param>
            <param name="publish">if set to <c>true</c> [publish].</param>
            <returns>The new page.</returns>
        </member>
        <member name="M:BlogEngine.Core.API.MetaWeblog.MetaWeblogHandler.NewPost(System.String,System.String,System.String,BlogEngine.Core.API.MetaWeblog.MWAPost,System.Boolean)">
            <summary>
            metaWeblog.newPost method
            </summary>
            <param name="blogId">
            always 1000 in BlogEngine since it is a singlar blog instance
            </param>
            <param name="userName">
            login username
            </param>
            <param name="password">
            login password
            </param>
            <param name="sentPost">
            struct with post details
            </param>
            <param name="publish">
            mark as published?
            </param>
            <returns>
            postID as string
            </returns>
        </member>
        <member name="M:BlogEngine.Core.API.MetaWeblog.MetaWeblogHandler.LookupCategoryGuidByName(System.String,BlogEngine.Core.Category@)">
            <summary>
            Returns Category Guid from Category name.
            </summary>
            <remarks>
            Reverse dictionary lookups are ugly.
            </remarks>
            <param name="name">
            The category name.
            </param>
            <param name="cat">
            The category.
            </param>
            <returns>
            Whether the category was found or not.
            </returns>
        </member>
        <member name="P:BlogEngine.Core.API.MetaWeblog.MetaWeblogHandler.IsReusable">
            <summary>
                Gets a value indicating whether another request can use the <see cref = "T:System.Web.IHttpHandler"></see> instance.
            </summary>
            <value></value>
            <returns>true if the <see cref = "T:System.Web.IHttpHandler"></see> instance is reusable; otherwise, false.</returns>
        </member>
        <member name="T:BlogEngine.Core.API.MetaWeblog.MWAAuthor">
            <summary>
            wp Author struct
            </summary>
        </member>
        <member name="F:BlogEngine.Core.API.MetaWeblog.MWAAuthor.display_name">
            <summary>
                display name
            </summary>
        </member>
        <member name="F:BlogEngine.Core.API.MetaWeblog.MWAAuthor.meta_value">
            <summary>
                nothing to see here.
            </summary>
        </member>
        <member name="F:BlogEngine.Core.API.MetaWeblog.MWAAuthor.user_email">
            <summary>
                user email
            </summary>
        </member>
        <member name="F:BlogEngine.Core.API.MetaWeblog.MWAAuthor.user_id">
            <summary>
                userID - Specs call for a int, but our ID is a string.
            </summary>
        </member>
        <member name="F:BlogEngine.Core.API.MetaWeblog.MWAAuthor.user_login">
            <summary>
                user login name
            </summary>
        </member>
        <member name="T:BlogEngine.Core.API.MetaWeblog.MWABlogInfo">
            <summary>
            MetaWeblog BlogInfo struct
                returned as an array from getUserBlogs
            </summary>
        </member>
        <member name="F:BlogEngine.Core.API.MetaWeblog.MWABlogInfo.blogID">
            <summary>
                Blog ID (Since BlogEngine.NET is single instance this number is always 10.
            </summary>
        </member>
        <member name="F:BlogEngine.Core.API.MetaWeblog.MWABlogInfo.blogName">
            <summary>
                Blog Title
            </summary>
        </member>
        <member name="F:BlogEngine.Core.API.MetaWeblog.MWABlogInfo.url">
            <summary>
                Blog Url
            </summary>
        </member>
        <member name="T:BlogEngine.Core.API.MetaWeblog.MWACategory">
            <summary>
            MetaWeblog Category struct
                returned as an array from GetCategories
            </summary>
        </member>
        <member name="F:BlogEngine.Core.API.MetaWeblog.MWACategory.description">
            <summary>
                Category title
            </summary>
        </member>
        <member name="F:BlogEngine.Core.API.MetaWeblog.MWACategory.htmlUrl">
            <summary>
                Url to thml display of category
            </summary>
        </member>
        <member name="F:BlogEngine.Core.API.MetaWeblog.MWACategory.id">
            <summary>
                The guid of the category
            </summary>
        </member>
        <member name="F:BlogEngine.Core.API.MetaWeblog.MWACategory.rssUrl">
            <summary>
                Url to RSS for category
            </summary>
        </member>
        <member name="F:BlogEngine.Core.API.MetaWeblog.MWACategory.title">
            <summary>
                The title/name of the category
            </summary>
        </member>
        <member name="T:BlogEngine.Core.API.MetaWeblog.MWAFault">
            <summary>
            MetaWeblog Fault struct
                returned when error occurs
            </summary>
        </member>
        <member name="F:BlogEngine.Core.API.MetaWeblog.MWAFault.faultCode">
            <summary>
                Error code of Fault Response
            </summary>
        </member>
        <member name="F:BlogEngine.Core.API.MetaWeblog.MWAFault.faultString">
            <summary>
                Message of Fault Response
            </summary>
        </member>
        <member name="T:BlogEngine.Core.API.MetaWeblog.MWAMediaInfo">
            <summary>
            MetaWeblog MediaInfo struct
                returned from NewMediaObject call
            </summary>
        </member>
        <member name="F:BlogEngine.Core.API.MetaWeblog.MWAMediaInfo.url">
            <summary>
                Url that points to Saved MediaObejct
            </summary>
        </member>
        <member name="T:BlogEngine.Core.API.MetaWeblog.MWAMediaObject">
            <summary>
            MetaWeblog MediaObject struct
                passed in the newMediaObject call
            </summary>
        </member>
        <member name="F:BlogEngine.Core.API.MetaWeblog.MWAMediaObject.bits">
            <summary>
                Media
            </summary>
        </member>
        <member name="F:BlogEngine.Core.API.MetaWeblog.MWAMediaObject.name">
            <summary>
                Name of media object (filename)
            </summary>
        </member>
        <member name="F:BlogEngine.Core.API.MetaWeblog.MWAMediaObject.type">
            <summary>
                Type of file
            </summary>
        </member>
        <member name="T:BlogEngine.Core.API.MetaWeblog.MWAPage">
            <summary>
            wp Page Struct
            </summary>
        </member>
        <member name="F:BlogEngine.Core.API.MetaWeblog.MWAPage.description">
            <summary>
                Content of Blog Post
            </summary>
        </member>
        <member name="F:BlogEngine.Core.API.MetaWeblog.MWAPage.link">
            <summary>
                Link to Blog Post
            </summary>
        </member>
        <member name="F:BlogEngine.Core.API.MetaWeblog.MWAPage.mt_convert_breaks">
            <summary>
                Convert Breaks
            </summary>
        </member>
        <member name="F:BlogEngine.Core.API.MetaWeblog.MWAPage.mt_keywords">
            <summary>
                Page keywords
            </summary>
        </member>
        <member name="F:BlogEngine.Core.API.MetaWeblog.MWAPage.pageDate">
            <summary>
                Display date of Blog Post (DateCreated)
            </summary>
        </member>
        <member name="F:BlogEngine.Core.API.MetaWeblog.MWAPage.pageID">
            <summary>
                PostID Guid in string format
            </summary>
        </member>
        <member name="F:BlogEngine.Core.API.MetaWeblog.MWAPage.pageParentID">
            <summary>
                Page Parent ID
            </summary>
        </member>
        <member name="F:BlogEngine.Core.API.MetaWeblog.MWAPage.title">
            <summary>
                Title of Blog Post
            </summary>
        </member>
        <member name="T:BlogEngine.Core.API.MetaWeblog.MWAPost">
            <summary>
            MetaWeblog Post struct
                used in newPost, editPost, getPost, recentPosts
                not all properties are used everytime.
            </summary>
        </member>
        <member name="F:BlogEngine.Core.API.MetaWeblog.MWAPost.author">
            <summary>
                wp_author_id
            </summary>
        </member>
        <member name="F:BlogEngine.Core.API.MetaWeblog.MWAPost.categories">
            <summary>
                List of Categories assigned for Blog Post
            </summary>
        </member>
        <member name="F:BlogEngine.Core.API.MetaWeblog.MWAPost.commentPolicy">
            <summary>
                CommentPolicy (Allow/Deny)
            </summary>
        </member>
        <member name="F:BlogEngine.Core.API.MetaWeblog.MWAPost.description">
            <summary>
                Content of Blog Post
            </summary>
        </member>
        <member name="F:BlogEngine.Core.API.MetaWeblog.MWAPost.excerpt">
            <summary>
                Excerpt
            </summary>
        </member>
        <member name="F:BlogEngine.Core.API.MetaWeblog.MWAPost.link">
            <summary>
                Link to Blog Post
            </summary>
        </member>
        <member name="F:BlogEngine.Core.API.MetaWeblog.MWAPost.postDate">
            <summary>
                Display date of Blog Post (DateCreated)
            </summary>
        </member>
        <member name="F:BlogEngine.Core.API.MetaWeblog.MWAPost.postID">
            <summary>
                PostID Guid in string format
            </summary>
        </member>
        <member name="F:BlogEngine.Core.API.MetaWeblog.MWAPost.publish">
            <summary>
                Whether the Post is published or not.
            </summary>
        </member>
        <member name="F:BlogEngine.Core.API.MetaWeblog.MWAPost.slug">
            <summary>
                Slug of post
            </summary>
        </member>
        <member name="F:BlogEngine.Core.API.MetaWeblog.MWAPost.tags">
            <summary>
                List of Tags assinged for Blog Post
            </summary>
        </member>
        <member name="F:BlogEngine.Core.API.MetaWeblog.MWAPost.title">
            <summary>
                Title of Blog Post
            </summary>
        </member>
        <member name="T:BlogEngine.Core.API.MetaWeblog.MWAUserInfo">
            <summary>
            MetaWeblog UserInfo struct
            returned from GetUserInfo call
            </summary>
            <remarks>
            Not used currently, but here for completeness.
            </remarks>
        </member>
        <member name="F:BlogEngine.Core.API.MetaWeblog.MWAUserInfo.nickname">
            <summary>
            User Name Proper
            </summary>
        </member>
        <member name="F:BlogEngine.Core.API.MetaWeblog.MWAUserInfo.userID">
            <summary>
            Login ID
            </summary>
        </member>
        <member name="F:BlogEngine.Core.API.MetaWeblog.MWAUserInfo.url">
            <summary>
            Url to User Blog?
            </summary>
        </member>
        <member name="F:BlogEngine.Core.API.MetaWeblog.MWAUserInfo.email">
            <summary>
            Email address of User
            </summary>
        </member>
        <member name="F:BlogEngine.Core.API.MetaWeblog.MWAUserInfo.lastName">
            <summary>
            User LastName
            </summary>
        </member>
        <member name="F:BlogEngine.Core.API.MetaWeblog.MWAUserInfo.firstName">
            <summary>
            User First Name
            </summary>
        </member>
        <member name="T:BlogEngine.Core.API.MetaWeblog.XMLRPCRequest">
            <summary>
            Obejct is the incoming XML-RPC Request.  Handles parsing the XML-RPC and 
                fills its properties with the values sent in the request.
            </summary>
        </member>
        <member name="F:BlogEngine.Core.API.MetaWeblog.XMLRPCRequest.inputParams">
            <summary>
            The input params.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.API.MetaWeblog.XMLRPCRequest.#ctor(System.Web.HttpContext)">
            <summary>
            Initializes a new instance of the <see cref="T:BlogEngine.Core.API.MetaWeblog.XMLRPCRequest"/> class. 
            Loads XMLRPCRequest object from HttpContext
            </summary>
            <param name="input">
            incoming HttpContext
            </param>
        </member>
        <member name="M:BlogEngine.Core.API.MetaWeblog.XMLRPCRequest.GetMediaObject(System.Xml.XmlNode)">
            <summary>
            Creates a Metaweblog Media object from the XML struct
            </summary>
            <param name="node">
            XML contains a Metaweblog MediaObject Struct
            </param>
            <returns>
            Metaweblog MediaObject Struct Obejct
            </returns>
        </member>
        <member name="M:BlogEngine.Core.API.MetaWeblog.XMLRPCRequest.GetPage(System.Xml.XmlNode)">
            <summary>
            Creates a Metaweblog Page object from the XML struct
            </summary>
            <param name="node">
            XML contains a Metaweblog Page Struct
            </param>
            <returns>
            Metaweblog Page Struct Obejct
            </returns>
        </member>
        <member name="M:BlogEngine.Core.API.MetaWeblog.XMLRPCRequest.GetPost(System.Xml.XmlNode)">
            <summary>
            Creates a Metaweblog Post object from the XML struct
            </summary>
            <param name="node">
            XML contains a Metaweblog Post Struct
            </param>
            <returns>
            Metaweblog Post Struct Obejct
            </returns>
        </member>
        <member name="M:BlogEngine.Core.API.MetaWeblog.XMLRPCRequest.LoadXmlRequest(System.String)">
            <summary>
            Loads object properties with contents of passed xml
            </summary>
            <param name="xml">
            xml doc with methodname and parameters
            </param>
        </member>
        <member name="M:BlogEngine.Core.API.MetaWeblog.XMLRPCRequest.ParseRequest(System.Web.HttpContext)">
            <summary>
            Retrieves the content of the input stream
                and return it as plain text.
            </summary>
            <param name="context">
            The context.
            </param>
            <returns>
            The parse request.
            </returns>
        </member>
        <member name="P:BlogEngine.Core.API.MetaWeblog.XMLRPCRequest.AppKey">
            <summary>
                Gets AppKey is a key generated by the calling application.  It is sent with blogger API calls.
            </summary>
            <remarks>
                BlogEngine.NET doesn't require specific AppKeys for API calls.  It is no longer standard practive.
            </remarks>
        </member>
        <member name="P:BlogEngine.Core.API.MetaWeblog.XMLRPCRequest.BlogID">
            <summary>
                Gets ID of the Blog to call the function on.  Since BlogEngine supports only a single blog instance,
                this incoming parameter is not used.
            </summary>
        </member>
        <member name="P:BlogEngine.Core.API.MetaWeblog.XMLRPCRequest.MediaObject">
            <summary>
                Gets MediaObject is a struct sent by the metaWeblog.newMediaObject function.
                It contains information about the media and the object in a bit array.
            </summary>
        </member>
        <member name="P:BlogEngine.Core.API.MetaWeblog.XMLRPCRequest.MethodName">
            <summary>
                Gets Name of Called Metaweblog Function
            </summary>
        </member>
        <member name="P:BlogEngine.Core.API.MetaWeblog.XMLRPCRequest.NumberOfPosts">
            <summary>
                Gets Number of post request by the metaWeblog.getRecentPosts function
            </summary>
        </member>
        <member name="P:BlogEngine.Core.API.MetaWeblog.XMLRPCRequest.Page">
            <summary>
                Gets Metaweblog Page Struct
            </summary>
        </member>
        <member name="P:BlogEngine.Core.API.MetaWeblog.XMLRPCRequest.PageID">
            <summary>
                Gets PageID Guid in string format
            </summary>
        </member>
        <member name="P:BlogEngine.Core.API.MetaWeblog.XMLRPCRequest.Password">
            <summary>
                Gets Password for user validation
            </summary>
        </member>
        <member name="P:BlogEngine.Core.API.MetaWeblog.XMLRPCRequest.Post">
            <summary>
               Gets Metaweblog Post struct containing information post including title, content, and categories.
            </summary>
        </member>
        <member name="P:BlogEngine.Core.API.MetaWeblog.XMLRPCRequest.PostID">
            <summary>
                Gets The PostID Guid in string format
            </summary>
        </member>
        <member name="P:BlogEngine.Core.API.MetaWeblog.XMLRPCRequest.Publish">
            <summary>
                Gets a value indicating whether or not a post will be marked as published by BlogEngine.
            </summary>
        </member>
        <member name="P:BlogEngine.Core.API.MetaWeblog.XMLRPCRequest.UserName">
            <summary>
                Gets Login for user validation
            </summary>
        </member>
        <member name="T:BlogEngine.Core.API.MetaWeblog.XMLRPCResponse">
            <summary>
            Object is the outgoing XML-RPC response.  This objects properties are set
                and the Response method is called sending the response via the HttpContext Response.
            </summary>
        </member>
        <member name="F:BlogEngine.Core.API.MetaWeblog.XMLRPCResponse.methodName">
            <summary>
            The method name.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.API.MetaWeblog.XMLRPCResponse.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:BlogEngine.Core.API.MetaWeblog.XMLRPCResponse"/> class. 
            Constructor sets default value
            </summary>
            <param name="methodName">
            MethodName of called XML-RPC method
            </param>
        </member>
        <member name="M:BlogEngine.Core.API.MetaWeblog.XMLRPCResponse.Response(System.Web.HttpContext)">
            <summary>
            Response generates the XML-RPC response and returns it to the caller.
            </summary>
            <param name="context">
            httpContext.Response.OutputStream is used from the context
            </param>
        </member>
        <member name="M:BlogEngine.Core.API.MetaWeblog.XMLRPCResponse.ConvertDatetoISO8601(System.DateTime)">
            <summary>
            Convert Date to format expected by MetaWeblog Response.
            </summary>
            <param name="date">
            DateTime to convert
            </param>
            <returns>
            ISO8601 date string
            </returns>
        </member>
        <member name="M:BlogEngine.Core.API.MetaWeblog.XMLRPCResponse.WriteAuthors(System.Xml.XmlWriter)">
            <summary>
            Writes the Array of Category structs parameters of Response
            </summary>
            <param name="data">
            xml response
            </param>
        </member>
        <member name="M:BlogEngine.Core.API.MetaWeblog.XMLRPCResponse.WriteBool(System.Xml.XmlWriter)">
            <summary>
            Writes Boolean parameter of Response
            </summary>
            <param name="data">
            xml response
            </param>
        </member>
        <member name="M:BlogEngine.Core.API.MetaWeblog.XMLRPCResponse.WriteFault(System.Xml.XmlWriter)">
            <summary>
            Writes Fault Parameters of Response.
            </summary>
            <param name="data">
            xml response
            </param>
        </member>
        <member name="M:BlogEngine.Core.API.MetaWeblog.XMLRPCResponse.WriteGetCategories(System.Xml.XmlWriter)">
            <summary>
            Writes the Array of Category structs parameters of Response
            </summary>
            <param name="data">
            xml response
            </param>
        </member>
        <member name="M:BlogEngine.Core.API.MetaWeblog.XMLRPCResponse.WriteGetUsersBlogs(System.Xml.XmlWriter)">
            <summary>
            Writes array of BlogInfo structs of Response
            </summary>
            <param name="data">
            xml response
            </param>
        </member>
        <member name="M:BlogEngine.Core.API.MetaWeblog.XMLRPCResponse.WriteKeywords(System.Xml.XmlWriter)">
            <summary>
            Writes the Array of Keyword structs parameters of Response
            </summary>
            <param name="data">
            xml response
            </param>
        </member>
        <member name="M:BlogEngine.Core.API.MetaWeblog.XMLRPCResponse.WriteMediaInfo(System.Xml.XmlWriter)">
            <summary>
            Writes the MediaInfo Struct of Response
            </summary>
            <param name="data">
            xml response
            </param>
        </member>
        <member name="M:BlogEngine.Core.API.MetaWeblog.XMLRPCResponse.WriteNewPage(System.Xml.XmlWriter)">
            <summary>
            Writes the PageID string of Response.
            </summary>
            <param name="data">
            xml response
            </param>
        </member>
        <member name="M:BlogEngine.Core.API.MetaWeblog.XMLRPCResponse.WriteNewPost(System.Xml.XmlWriter)">
            <summary>
            Writes the PostID string of Response.
            </summary>
            <param name="data">
            xml response
            </param>
        </member>
        <member name="M:BlogEngine.Core.API.MetaWeblog.XMLRPCResponse.WritePage(System.Xml.XmlWriter)">
            <summary>
            Writes the Metaweblog Post Struct of Response.
            </summary>
            <param name="data">
            xml response
            </param>
        </member>
        <member name="M:BlogEngine.Core.API.MetaWeblog.XMLRPCResponse.WritePages(System.Xml.XmlWriter)">
            <summary>
            The write pages.
            </summary>
            <param name="data">
            xml response
            </param>
        </member>
        <member name="M:BlogEngine.Core.API.MetaWeblog.XMLRPCResponse.WritePost(System.Xml.XmlWriter)">
            <summary>
            Writes the Metaweblog Post Struct of Response.
            </summary>
            <param name="data">
            xml response
            </param>
        </member>
        <member name="M:BlogEngine.Core.API.MetaWeblog.XMLRPCResponse.WritePosts(System.Xml.XmlWriter)">
            <summary>
            Writes the array of Metaweblog Post Structs of Response.
            </summary>
            <param name="data">
            xml response
            </param>
        </member>
        <member name="M:BlogEngine.Core.API.MetaWeblog.XMLRPCResponse.WriteShortPages(System.Xml.XmlWriter)">
            <summary>
            The write short pages.
            </summary>
            <param name="data">
            xml response
            </param>
        </member>
        <member name="P:BlogEngine.Core.API.MetaWeblog.XMLRPCResponse.Authors">
            <summary>
                Gets or sets List if author structs.  Used by wp.getAuthors.
            </summary>
        </member>
        <member name="P:BlogEngine.Core.API.MetaWeblog.XMLRPCResponse.Blogs">
            <summary>
                Gets or sets List of blog structs.  Used by blogger.getUsersBlogs.
            </summary>
        </member>
        <member name="P:BlogEngine.Core.API.MetaWeblog.XMLRPCResponse.Categories">
            <summary>
                Gets or sets List of category structs. Used by metaWeblog.getCategories.
            </summary>
        </member>
        <member name="P:BlogEngine.Core.API.MetaWeblog.XMLRPCResponse.Completed">
            <summary>
                Gets or sets a value indicating whether function call was completed and successful.  
                Used by metaWeblog.editPost and blogger.deletePost.
            </summary>
        </member>
        <member name="P:BlogEngine.Core.API.MetaWeblog.XMLRPCResponse.Fault">
            <summary>
                Gets or sets Fault Struct. Used by API to return error information
            </summary>
        </member>
        <member name="P:BlogEngine.Core.API.MetaWeblog.XMLRPCResponse.Keywords">
            <summary>
                Gets or sets List of Tags.  Used by wp.getTags.
            </summary>
        </member>
        <member name="P:BlogEngine.Core.API.MetaWeblog.XMLRPCResponse.MediaInfo">
            <summary>
                Gets or sets MediaInfo Struct
            </summary>
        </member>
        <member name="P:BlogEngine.Core.API.MetaWeblog.XMLRPCResponse.Page">
            <summary>
                Gets or sets MWAPage struct
            </summary>
        </member>
        <member name="P:BlogEngine.Core.API.MetaWeblog.XMLRPCResponse.PageID">
            <summary>
                Gets or sets Id of page that was just added.
            </summary>
        </member>
        <member name="P:BlogEngine.Core.API.MetaWeblog.XMLRPCResponse.Pages">
            <summary>
                Gets or sets List of Page Structs
            </summary>
        </member>
        <member name="P:BlogEngine.Core.API.MetaWeblog.XMLRPCResponse.Post">
            <summary>
                Gets or sets Metaweblog Post Struct. Used by metaWeblog.getPost
            </summary>
        </member>
        <member name="P:BlogEngine.Core.API.MetaWeblog.XMLRPCResponse.PostID">
            <summary>
                Gets or sets Id of post that was just added.  Used by metaWeblog.newPost
            </summary>
        </member>
        <member name="P:BlogEngine.Core.API.MetaWeblog.XMLRPCResponse.Posts">
            <summary>
                Gets or sets List of Metaweblog Post Structs.  Used by metaWeblog.getRecentPosts
            </summary>
        </member>
        <member name="T:BlogEngine.Core.Avatar">
            <summary>
            Avatar support.
            </summary>
        </member>
        <member name="F:BlogEngine.Core.Avatar.AvatarImage">
            <summary>
                The avatar image.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Avatar.GetAvatar(System.Int32,System.String,System.Uri,System.String,System.String)">
            <summary>
            Returns the avatar/gravatar that matches the specified email, website or avatar Url.
            </summary>
            <param name="size">
            The image size.
            </param>
            <param name="email">
            Email address.
            </param>
            <param name="website">
            The website URL.
            </param>
            <param name="avatarUrl">
            An optional avatar URL to use instead of the default.
            </param>
            <param name="description">
            Description used for the Alt/Title attributes.
            </param>
            <returns>
            The avatar/gravatar image.
            </returns>
        </member>
        <member name="M:BlogEngine.Core.Avatar.GetAvatar(System.String,System.Uri,System.String,System.String,System.Int32,System.Int32)">
            <summary>
            Returns the avatar/gravatar that matches the specified email, website or avatar Url.
            </summary>
            <param name="email">
            Email address.
            </param>
            <param name="website">
            The website URL.
            </param>
            <param name="avatarUrl">
            An optional avatar URL to use instead of the default.
            </param>
            <param name="description">
            Description used for the Alt/Title attributes.
            </param>
            <param name="width">
            The image width.
            </param>
            <param name="height">
            The image height.
            </param>
            <returns>
            The avatar/gravatar image.
            </returns>
        </member>
        <member name="M:BlogEngine.Core.Avatar.GetAvatarImageTag(System.Int32,System.String,System.Uri,System.String,System.String)">
            <summary>
            Returns the avatar/gravatar image tag that matches the specified email, website or avatar Url.
            </summary>
            <param name="size">
            The image size.
            </param>
            <param name="email">
            Email address.
            </param>
            <param name="website">
            The website URL.
            </param>
            <param name="avatarUrl">
            An optional avatar URL to use instead of the default.
            </param>
            <param name="description">
            Description used for the Alt/Title attributes.
            </param>
            <returns>
            The avatar/gravatar image.
            </returns>
        </member>
        <member name="M:BlogEngine.Core.Avatar.GetAvatarImageTag(System.String,System.Uri,System.String,System.String,System.Int32,System.Int32)">
            <summary>
            Returns the avatar/gravatar image tag that matches the specified email, website or avatar Url.
            </summary>
            <param name="email">Email address</param>
            <param name="website">Website URL</param>
            <param name="avatarUrl">An optional avatar URL to use instead of the default.</param>
            <param name="description">Description used for the Alt/Title attributes.</param>
            <param name="width">Image width</param>
            <param name="height">Image height</param>
            <returns>The avatar/gravatar image.</returns>
        </member>
        <member name="P:BlogEngine.Core.Avatar.Url">
            <summary>
                Gets or sets the URL to the Avatar image.
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Avatar.ImageTag">
            <summary>
                Gets or sets the image tag for the Avatar image.
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Avatar.HasNoImage">
            <summary>
               Gets or sets a value indicating whether there is not a specific image available.
            </summary>
        </member>
        <member name="T:BlogEngine.Core.Blog">
            <summary>
            Represents a blog instance.
            </summary>
        </member>
        <member name="T:BlogEngine.Core.BusinessBase`2">
            <summary>
            This is the base class from which most business objects will be derived. 
                To create a business object, inherit from this class.
            </summary>
            <typeparam name="T">
            The type of the derived class.
            </typeparam>
            <typeparam name="TKey">
            The type of the Id property.
            </typeparam>
        </member>
        <member name="F:BlogEngine.Core.BusinessBase`2.brokenRules">
            <summary>
            The broken rules.
            </summary>
            <remarks>
            This has been updated from using the old StringDictionary class from .Net 1.1. The StringDictionary class
            used case-insensitive keys, so this one needs to have StringComparer.OrdinalIgnoreCase passed in the constructor for
            backwards compatibility.
            
            INotifyPropertyChanging is implemented in case down the line someone wants to create a provider that uses BusinessBase
            objects as Linq-To-SQL entities(DataContext performance skyrockets when this is used). 
            
            </remarks>
        </member>
        <member name="F:BlogEngine.Core.BusinessBase`2.changedProperties">
            <summary>
            The changed properties.
            </summary>
        </member>
        <member name="F:BlogEngine.Core.BusinessBase`2.dateCreated">
            <summary>
            The date created.
            </summary>
        </member>
        <member name="F:BlogEngine.Core.BusinessBase`2.dateModified">
            <summary>
            The date modified.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.BusinessBase`2.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:BlogEngine.Core.BusinessBase`2"/> class. 
            </summary>
        </member>
        <member name="M:BlogEngine.Core.BusinessBase`2.op_Equality(BlogEngine.Core.BusinessBase{`0,`1},BlogEngine.Core.BusinessBase{`0,`1})">
            <summary>
            Checks to see if two business objects are the same.
            </summary>
            <param name="first">The first.</param>
            <param name="second">The second.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:BlogEngine.Core.BusinessBase`2.op_Inequality(BlogEngine.Core.BusinessBase{`0,`1},BlogEngine.Core.BusinessBase{`0,`1})">
            <summary>
            Checks to see if two business objects are different.
            </summary>
            <param name="first">The first.</param>
            <param name="second">The second.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:BlogEngine.Core.BusinessBase`2.Load(`1)">
            <summary>
            Loads an instance of the object based on the Id.
            </summary>
            <param name="id">The unique identifier of the object</param>
            <returns>The instance of the object based on the Id.</returns>
        </member>
        <member name="M:BlogEngine.Core.BusinessBase`2.Delete">
            <summary>
            Marks the object for deletion. It will then be 
                deleted when the object's Save() method is called.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.BusinessBase`2.Equals(System.Object)">
            <summary>
            Comapares this object with another
            </summary>
            <param name="obj">
            The object to compare
            </param>
            <returns>
            True if the two objects as equal
            </returns>
        </member>
        <member name="M:BlogEngine.Core.BusinessBase`2.GetHashCode">
            <summary>
            A uniquely key to identify this particullar instance of the class
            </summary>
            <returns>
            A unique integer value
            </returns>
        </member>
        <member name="M:BlogEngine.Core.BusinessBase`2.MarkOld">
            <summary>
            Marks the object as being an clean, 
                which means not dirty.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.BusinessBase`2.Save">
            <summary>
            Saves the object to the data store (inserts, updates or deletes).
            </summary>
            <returns>The SaveAction.</returns>
        </member>
        <member name="M:BlogEngine.Core.BusinessBase`2.AcceptChanges">
            <summary>
            Resets the object's state to unchanged by accepting the modifications.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.BusinessBase`2.Dispose">
            <summary>
            Disposes the object and frees ressources for the Garbage Collector.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.BusinessBase`2.MarkChanged(System.String)">
            <summary>
            Marks an object as being dirty, or changed.
            </summary>
            <param name="propertyName">
            The name of the property to mark dirty.
            </param>
        </member>
        <member name="M:BlogEngine.Core.BusinessBase`2.OnPropertyChanged(System.String)">
            <summary>
            Raises the PropertyChanged event safely.
            </summary>
            <param name="propertyName">
            The property Name.
            </param>
        </member>
        <member name="M:BlogEngine.Core.BusinessBase`2.OnPropertyChanging(System.String)">
            <summary>
            Method called just before a property's value will change.
            </summary>
            <param name="propertyName">The name of the property whose value changing.</param>
            <remarks>
            
            This method should only be called when a value is definitely going to be changed. This
            should occur after any value validation or other methods are called.
            
            </remarks>
        </member>
        <member name="M:BlogEngine.Core.BusinessBase`2.OnSaved(BlogEngine.Core.BusinessBase{`0,`1},BlogEngine.Core.SaveAction)">
            <summary>
            Raises the Saved event.
            </summary>
            <param name="businessObject">
            The business Object.
            </param>
            <param name="action">
            The action.
            </param>
        </member>
        <member name="M:BlogEngine.Core.BusinessBase`2.OnSaving(BlogEngine.Core.BusinessBase{`0,`1},BlogEngine.Core.SaveAction)">
            <summary>
            Raises the Saving event
            </summary>
            <param name="businessObject">
            The business Object.
            </param>
            <param name="action">
            The action.
            </param>
        </member>
        <member name="M:BlogEngine.Core.BusinessBase`2.AddRule(System.String,System.String,System.Boolean)">
            <summary>
            Add or remove a broken rule.
            </summary>
            <param name="propertyName">
            The name of the property.
            </param>
            <param name="errorMessage">
            The description of the error
            </param>
            <param name="isbroken">
            True if the validation rule is broken.
            </param>
        </member>
        <member name="M:BlogEngine.Core.BusinessBase`2.DataDelete">
            <summary>
            Deletes the object from the data store.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.BusinessBase`2.DataInsert">
            <summary>
            Inserts a new object to the data store.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.BusinessBase`2.DataSelect(`1)">
            <summary>
            Retrieves the object from the data store and populates it.
            </summary>
            <param name="id">
            The unique identifier of the object.
            </param>
            <returns>
            True if the object exists and is being populated successfully
            </returns>
        </member>
        <member name="M:BlogEngine.Core.BusinessBase`2.DataUpdate">
            <summary>
            Updates the object in its data store.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.BusinessBase`2.Dispose(System.Boolean)">
            <summary>
            Disposes the object and frees ressources for the Garbage Collector.
            </summary>
            <param name="disposing">
            If true, the object gets disposed.
            </param>
        </member>
        <member name="M:BlogEngine.Core.BusinessBase`2.SetValue``1(System.String,``0,``0@)">
            <summary>
            Use this method to change values of properties that participate in INotifyPropertyChanged event notification.
            </summary>
            <typeparam name="TValueType">The object type for both the new value and old value.</typeparam>
            <param name="propertyName">The name of the property that should be used when raising the PropertyChanged event.</param>
            <param name="newValue">The new value to be set on the property if it's different from oldValue</param>
            <param name="oldValue">The current value of the property.</param>
            <returns>True if the the property value has been changed, false otherwise.</returns>
            <remarks>
            
            This is left as virtual so users can override this if they have their own validation needs.
            
            </remarks>
        </member>
        <member name="M:BlogEngine.Core.BusinessBase`2.ValidationRules">
            <summary>
            Reinforces the business rules by adding additional rules to the 
                broken rules collection.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.BusinessBase`2.Update">
            <summary>
            Is called by the save method when the object is old and dirty.
            </summary>
            <returns>
            The update.
            </returns>
        </member>
        <member name="E:BlogEngine.Core.BusinessBase`2.Saved">
            <summary>
                Occurs when the class is Saved
            </summary>
        </member>
        <member name="E:BlogEngine.Core.BusinessBase`2.Saving">
            <summary>
                Occurs when the class is Saved
            </summary>
        </member>
        <member name="E:BlogEngine.Core.BusinessBase`2.PropertyChanged">
            <summary>
                Occurs when this instance is marked dirty. 
                It means the instance has been changed but not saved.
            </summary>
        </member>
        <member name="E:BlogEngine.Core.BusinessBase`2.PropertyChanging">
            <summary>
            Event raised when an instance is about to change one of its property values.
            </summary>
        </member>
        <member name="P:BlogEngine.Core.BusinessBase`2.DateCreated">
            <summary>
                Gets or sets the date on which the instance was created.
            </summary>
        </member>
        <member name="P:BlogEngine.Core.BusinessBase`2.DateModified">
            <summary>
                Gets or sets the date on which the instance was modified.
            </summary>
        </member>
        <member name="P:BlogEngine.Core.BusinessBase`2.Error">
            <summary>
                Gets an error message indicating what is wrong with this object.
            </summary>
            <returns>An error message indicating what is wrong with this object. The default is an empty string ("").</returns>
        </member>
        <member name="P:BlogEngine.Core.BusinessBase`2.Id">
            <summary>
                Gets or sets the unique Identification of the object.
            </summary>
        </member>
        <member name="P:BlogEngine.Core.BusinessBase`2.BlogId">
            <summary>
                Gets or sets the Blog instance ID this object is under.
            </summary>
        </member>
        <member name="P:BlogEngine.Core.BusinessBase`2.Blog">
            <summary>
                Gets the Blog instance this object is under.
            </summary>
        </member>
        <member name="P:BlogEngine.Core.BusinessBase`2.IsChanged">
            <summary>
                Gets a value indicating whether if this object's data has been changed.
            </summary>
        </member>
        <member name="P:BlogEngine.Core.BusinessBase`2.Deleted">
            <summary>
                Gets a value indicating whether if this object is marked for deletion.
            </summary>
        </member>
        <member name="P:BlogEngine.Core.BusinessBase`2.New">
            <summary>
                Gets a value indicating whether if this is a new object, False if it is a pre-existing object.
            </summary>
        </member>
        <member name="P:BlogEngine.Core.BusinessBase`2.Valid">
            <summary>
                Gets a value indicating whether the object is valid or not.
            </summary>
        </member>
        <member name="P:BlogEngine.Core.BusinessBase`2.ValidationMessage">
            ///
            <summary>
                Gets if the object has broken business rules, use this property to get access
                to the different validation messages.
            </summary>
        </member>
        <member name="P:BlogEngine.Core.BusinessBase`2.ChangedProperties">
            <summary>
                Gets a collection of the properties that have 
                been marked as being dirty.
            </summary>
        </member>
        <member name="P:BlogEngine.Core.BusinessBase`2.CurrentUserOwns">
            <summary>
            Gets whether or not the current user owns this object.
            </summary>
            <returns></returns>
        </member>
        <member name="P:BlogEngine.Core.BusinessBase`2.CanUserDelete">
            <summary>
            Gets whether the current user can delete this object.
            </summary>
            <returns></returns>
        </member>
        <member name="P:BlogEngine.Core.BusinessBase`2.CanUserEdit">
            <summary>
            Gets whether the current user can edit this object.
            </summary>
            <returns></returns>
        </member>
        <member name="P:BlogEngine.Core.BusinessBase`2.Disposed">
            <summary>
            Gets a value indicating whether the object has been disposed.
            <remarks>
            If the objects is disposed, it must not be disposed a second
            time. The Disposed property is set the first time the object
            is disposed. If the Disposed property is true, then the Dispose()
            method will not dispose again. This help not to prolong the object's
            life if the Garbage Collector.
            </remarks>
            </summary>
            <value>
                <c>true</c> if this instance is disposed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:BlogEngine.Core.BusinessBase`2.Item(System.String)">
            <summary>
                Gets the <see cref="T:System.String"/> with the specified column name.
            </summary>
            <param name="columnName">The column name.</param>
        </member>
        <member name="F:BlogEngine.Core.Blog.isDeleted">
            <summary>
                Whether the blog is deleted.
            </summary>
        </member>
        <member name="F:BlogEngine.Core.Blog.blogName">
            <summary>
                Blog name
            </summary>
        </member>
        <member name="F:BlogEngine.Core.Blog.isPrimary">
            <summary>
                Whether the blog is the primary blog instance
            </summary>
        </member>
        <member name="F:BlogEngine.Core.Blog.isActive">
            <summary>
                Whether the blog is active
            </summary>
        </member>
        <member name="F:BlogEngine.Core.Blog.hostname">
            <summary>
                The hostname of the blog instance.
            </summary>
        </member>
        <member name="F:BlogEngine.Core.Blog.isAnyTextBeforeHostnameAccepted">
            <summary>
                Whether any text before the hostname is accepted.
            </summary>
        </member>
        <member name="F:BlogEngine.Core.Blog.storageContainerName">
            <summary>
                The storage container name of the blog's data
            </summary>
        </member>
        <member name="F:BlogEngine.Core.Blog.virtualPath">
            <summary>
                The virtual path to the blog instance
            </summary>
        </member>
        <member name="F:BlogEngine.Core.Blog.relativeWebRoot">
            <summary>
                The relative web root.
            </summary>
        </member>
        <member name="F:BlogEngine.Core.Blog.isSiteAggregation">
            <summary>
                Whether this blog instance is an aggregration of data across all blog instances.
            </summary>
        </member>
        <member name="F:BlogEngine.Core.Blog.deleteStorageContainer">
            <summary>
                Flag used when blog is deleted on whether the storage container will be deleted too.
            </summary>
        </member>
        <member name="F:BlogEngine.Core.Blog.SyncRoot">
            <summary>
            The sync root.
            </summary>
        </member>
        <member name="F:BlogEngine.Core.Blog.blogs">
            <summary>
            The blogs.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Blog.Delete">
            <summary>
            Attempts to delete the current Blog.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Blog.DataDelete">
            <summary>
            Deletes the Blog from the current BlogProvider.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Blog.DataInsert">
            <summary>
            Inserts a new blog to the current BlogProvider.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Blog.DataUpdate">
            <summary>
            Updates the object in its data store.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Blog.DataSelect(System.Guid)">
            <summary>
            Retrieves the object from the data store and populates it.
            </summary>
            <param name="id">
            The unique identifier of the object.
            </param>
            <returns>
            The object that was selected from the data store.
            </returns>
        </member>
        <member name="M:BlogEngine.Core.Blog.ValidationRules">
            <summary>
            Reinforces the business rules by adding additional rules to the
                broken rules collection.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Blog.SetAsPrimaryInstance">
            <summary>
            Sets the current Blog instance as the primary.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Blog.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:BlogEngine.Core.Blog"/> class. 
                The default contstructor assign default values.
            </summary>
        </member>
        <member name="F:BlogEngine.Core.Blog._InstanceIdOverride">
            <summary>
            Marked as ThreadStatic so each thread has its own value.
            Need to be careful with this since when using ThreadPool.QueueUserWorkItem,
            after a thread is used, it is returned to the thread pool and
            any ThreadStatic values (such as this field) are not cleared, they will persist.
            
            This value is reset in WwwSubdomainModule.BeginRequest.
            
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Blog.GetBlog(System.Guid)">
            <summary>
            Returns a blog based on the specified id.
            </summary>
            <param name="id">
            The blog id.
            </param>
            <returns>
            The selected blog.
            </returns>
        </member>
        <member name="M:BlogEngine.Core.Blog.CreateNewBlog(System.String,System.String,System.String,System.Boolean,System.String,System.String,System.Boolean,System.Boolean,System.String@)">
            <summary>
            Creates a new blog.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Blog.ValidateProperties(System.Boolean,BlogEngine.Core.Blog,System.String,System.String,System.Boolean,System.String,System.String,System.Boolean,System.String@)">
            <summary>
            Validates the blog properties.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Blog.SetupFromExistingBlog(BlogEngine.Core.Blog)">
            <summary>
            Sets up the blog instance using the files and settings from an existing blog instance.
            </summary>
            <param name="existing">The existing blog instance to use files and settings from.</param>
            <returns></returns>
        </member>
        <member name="M:BlogEngine.Core.Blog.CompareTo(BlogEngine.Core.Blog)">
            <summary>
            Compares the current Blog instance to another.
            </summary>
            <param name="other">The other Blog instance to compare to.</param>
            <returns>-1, 0, or 1. See ordering rules in the comments.</returns>
        </member>
        <member name="P:BlogEngine.Core.Blog.IsDeleted">
            <summary>
                Gets or sets a value indicating whether or not the blog is deleted.
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Blog.IsPrimary">
            <summary>
                Gets whether the blog is the primary blog instance.
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Blog.IsSiteAggregation">
            <summary>
                Gets whether this blog instance is an aggregration of data across all blog instances.
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Blog.IsActive">
            <summary>
                Gets whether the blog instance is active.
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Blog.Hostname">
            <summary>
                Gets the optional hostname of the blog instance.
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Blog.IsAnyTextBeforeHostnameAccepted">
            <summary>
                Gets whether any text before the hostname is accepted.
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Blog.Name">
            <summary>
                Gets or sets the blog name.
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Blog.StorageContainerName">
            <summary>
                Gets or sets the storage container name.
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Blog.VirtualPath">
            <summary>
                Gets or sets the virtual path to the blog instance.
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Blog.Id">
            <summary>
                Gets or sets the unique Identification of the blog instance.
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Blog.DeleteStorageContainer">
            <summary>
                Flag used when blog is deleted on whether the storage container will be deleted too.
                This property is not peristed.
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Blog.IsSubfolderOfApplicationWebRoot">
            <summary>
            Returns true if the blog resides in a subfolder of the application root directory; 
            false otherwise.
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Blog.CanUserDelete">
            <summary>
            Gets whether the current user can delete this object.
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Blog.Blogs">
            <summary>
                Gets all blogs.
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Blog.InstanceIdOverride">
            <summary>
            This is a thread-specific Blog Instance ID to override.
            If the current blog instance needs to be overridden,
            this property can be used.  A typical use for this is when
            using BG/async threads where the current blog instance
            cannot be determined since HttpContext will be null.
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Blog.CurrentInstance">
            <summary>
            The current blog instance.
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Blog.SiteAggregationBlog">
            <summary>
                Returns the site aggregation blog instance, if one exists.
            </summary>
            <returns>
                The site aggregation blog instance, if one exists.
            </returns>
        </member>
        <member name="P:BlogEngine.Core.Blog.DoesHostnameDifferFromSiteAggregationBlog">
            <summary>
                Gets whether the hostname differs from the Site Aggreation blog.
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Blog.StorageLocation">
            <summary>
                Gets a mappable virtual path to the blog instance's storage folder.
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Blog.RootFileStore">
            <summary>
            the root file storage directory for the blog. All File system management should start from the Root file store
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Blog.RelativeWebRoot">
            <summary>
                Gets the relative root of the blog instance.
            </summary>
            <value>A string that ends with a '/'.</value>
        </member>
        <member name="P:BlogEngine.Core.Blog.AbsoluteWebRootAuthority">
            <summary>
                Gets the "authority" portion of the absolute web root.
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Blog.AbsoluteWebRoot">
            <summary>
                Gets the absolute root of the blog instance.
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Blog.Cache">
            <summary>
            blog instance cache
            </summary>
        </member>
        <member name="T:BlogEngine.Core.BlogConfig">
            <summary>
                Wrapper class for accessing Blog configuration settings from Web.config.
            </summary>
        </member>
        <member name="F:BlogEngine.Core.BlogConfig.DefaultStorageLocation">
            <summary>
            The default storage location virtual path (App_Data).
            </summary>
        </member>
        <member name="M:BlogEngine.Core.BlogConfig.IsSystemRole(System.String)">
            <summary>
            Returns whether a role is a System role.
            </summary>
            <param name="roleName">The name of the role.</param>
            <returns>true if the roleName is a system role, otherwiser false</returns>
        </member>
        <member name="P:BlogEngine.Core.BlogConfig.FileExtension">
            <summary>
                The  file extension used for aspx pages
            </summary>
        </member>
        <member name="P:BlogEngine.Core.BlogConfig.VirtualPath">
            <summary>
            The virtual path of the BE installation.
            </summary>
        </member>
        <member name="P:BlogEngine.Core.BlogConfig.MobileServices">
            <summary>
            The regex used to identify mobile devices so a different theme can be shown
            </summary>
        </member>
        <member name="P:BlogEngine.Core.BlogConfig.ReservedBlogNames">
            <summary>
            Prevent creating new blog that will conflict with existing folder or path
            </summary>
        </member>
        <member name="P:BlogEngine.Core.BlogConfig.StorageLocation">
            <summary>
            Storage location on web server
            </summary>
            <returns>
            string with virtual path to storage
            </returns>
        </member>
        <member name="P:BlogEngine.Core.BlogConfig.BlogInstancesFolderName">
            <summary>
            Gets name of the folder blog instances are stored in.
            </summary>
        </member>
        <member name="P:BlogEngine.Core.BlogConfig.AdministratorRole">
            <summary>
                The role that has administrator persmissions
            </summary>
        </member>
        <member name="P:BlogEngine.Core.BlogConfig.AnonymousRole">
            <summary>
            The role that represents all non-authenticated users.
            </summary>
        </member>
        <member name="P:BlogEngine.Core.BlogConfig.EditorsRole">
            <summary>
            The role that represents all non-authenticated users.
            </summary>
        </member>
        <member name="P:BlogEngine.Core.BlogConfig.GenericPageSize">
            <summary>
            Default number of items per page in admin data grids.
            </summary>
        </member>
        <member name="T:BlogEngine.Core.BlogGenerator">
            <summary>
            This class should generate new blog from scratch
            instead of using existing blog as a template
            This way it can be used by self-registed users
            to create pre-configured blog on the fly.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.BlogGenerator.CreateNewBlog(System.String,System.String,System.String,System.String,System.String@)">
            <summary>
            Creates new blog
            </summary>
            <param name="blogName">Name of the blog</param>
            <param name="userName">Name of the first user which will be set up as blog admin</param>
            <param name="email">Email address</param>
            <param name="password">Password</param>
            <param name="message">Return message</param>
            <returns>New blog object</returns>
        </member>
        <member name="M:BlogEngine.Core.BlogGenerator.ValidateProperties(System.String,System.String,System.String,System.String@)">
            <summary>
            Validates the blog properties.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.BlogGenerator.CopyTemplateBlogFolder(System.String,System.String,System.String,System.String)">
            <summary>
            Copy template files for new blog
            </summary>
            <param name="blogName">Name of the blog</param>
            <param name="userName">User name</param>
            <param name="email">Email address</param>
            <param name="password">Password</param>
            <returns>True if successful</returns>
        </member>
        <member name="T:BlogEngine.Core.BlogGeneratorConfig">
            <summary>
            Reads default values for a new blog from configuration file
            </summary>
        </member>
        <member name="M:BlogEngine.Core.BlogGeneratorConfig.SetDefaults(System.String@)">
            <summary>
            Sets default values for new blog
            </summary>
            <param name="message">Error message</param>
            <returns>True if successful</returns>
        </member>
        <member name="M:BlogEngine.Core.BlogGeneratorConfig.Init(System.String)">
            <summary>
            Initiates properties by reading values from config file
            </summary>
            <param name="fileName">File name</param>
        </member>
        <member name="M:BlogEngine.Core.BlogGeneratorConfig.CreateConfig(System.String)">
            <summary>
            Generates conig file if one does not exist
            </summary>
            <param name="fileName">File name</param>
        </member>
        <member name="P:BlogEngine.Core.BlogGeneratorConfig.BlogDescription">
            <summary>
            Descripton of the blog
            </summary>
        </member>
        <member name="P:BlogEngine.Core.BlogGeneratorConfig.PostsFileName">
            <summary>
            File name of the post
            </summary>
        </member>
        <member name="P:BlogEngine.Core.BlogGeneratorConfig.PostTitle">
            <summary>
            Post title
            </summary>
        </member>
        <member name="P:BlogEngine.Core.BlogGeneratorConfig.PostContent">
            <summary>
            Post content
            </summary>
        </member>
        <member name="P:BlogEngine.Core.BlogGeneratorConfig.WidgetZone">
            <summary>
            Reads widget zone from file in the template folder and serializes it 
            as WidgetData to format that can be saved  to database
            </summary>
        </member>
        <member name="P:BlogEngine.Core.BlogGeneratorConfig.NewBlogSettings">
            <summary>
            Default settings from blogs/_new/settings.xml
            </summary>
        </member>
        <member name="T:BlogEngine.Core.Category">
            <summary>
            Categories are a way to organize posts. 
                A post can be in multiple categories.
            </summary>
        </member>
        <member name="F:BlogEngine.Core.Category.SyncRoot">
            <summary>
                The sync root.
            </summary>
        </member>
        <member name="F:BlogEngine.Core.Category.categories">
            <summary>
                The categories.
            </summary>
        </member>
        <member name="F:BlogEngine.Core.Category.description">
            <summary>
                The description.
            </summary>
        </member>
        <member name="F:BlogEngine.Core.Category.parent">
            <summary>
                The parent.
            </summary>
        </member>
        <member name="F:BlogEngine.Core.Category.title">
            <summary>
                The title.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Category.#cctor">
            <summary>
            Initializes static members of the <see cref="T:BlogEngine.Core.Category"/> class. 
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Category.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:BlogEngine.Core.Category"/> class.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Category.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:BlogEngine.Core.Category"/> class.
                The category.
            </summary>
            <param name="title">
            The title.
            </param>
            <param name="description">
            The description.
            </param>
        </member>
        <member name="M:BlogEngine.Core.Category.GetCategory(System.Guid)">
            <summary>
            Returns a category based on the specified id.
            </summary>
            <param name="id">
            The category id.
            </param>
            <returns>
            The category.
            </returns>
        </member>
        <member name="M:BlogEngine.Core.Category.GetCategory(System.Guid,System.Boolean)">
            <summary>
            Returns a category based on the specified id.
            </summary>
            <param name="id">
            The category id.
            </param>
            <param name="acrossAllBlogInstances">
            Whether to search across the categories of all blog instances.
            </param>
            <returns>
            The category.
            </returns>
        </member>
        <member name="M:BlogEngine.Core.Category.CompleteTitle">
            <summary>
            Gets the full title with Parent names included
            </summary>
            <returns>
            The complete title.
            </returns>
        </member>
        <member name="M:BlogEngine.Core.Category.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="M:BlogEngine.Core.Category.CompareTo(BlogEngine.Core.Category)">
            <summary>
            Compares the current object with another object of the same type.
            </summary>
            <param name="other">
            An object to compare with this object.
            </param>
            <returns>
            A 32-bit signed integer that indicates the relative order of the objects being compared. 
                The return value has the following meanings: Value Meaning Less than zero This object is 
                less than the other parameter.Zero This object is equal to other. Greater than zero This object is greater than other.
            </returns>
        </member>
        <member name="M:BlogEngine.Core.Category.DataDelete">
            <summary>
            Deletes the object from the data store.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Category.DataInsert">
            <summary>
            Inserts a new object to the data store.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Category.DataSelect(System.Guid)">
            <summary>
            Retrieves the object from the data store and populates it.
            </summary>
            <param name="id">
            The unique identifier of the object.
            </param>
            <returns>
            True if the object exists and is being populated successfully
            </returns>
        </member>
        <member name="M:BlogEngine.Core.Category.DataUpdate">
            <summary>
            Updates the object in its data store.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Category.ValidationRules">
            <summary>
            Reinforces the business rules by adding additional rules to the
                broken rules collection.
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Category.Categories">
            <summary>
                Gets a sorted list of all Categories.
            </summary>
            <value>The categories.</value>
        </member>
        <member name="P:BlogEngine.Core.Category.AllBlogCategories">
            <summary>
                Gets a sorted list of all Categories across all blog instances.
            </summary>
            <value>The categories.</value>
        </member>
        <member name="P:BlogEngine.Core.Category.ApplicableCategories">
            <summary>
                Gets a sorted list of all Categories, taking into account the
                current blog instance's Site Aggregation status in determining if
                categories from just the current instance or all instances should
                be returned.
            </summary>
            <remarks>
                This logic could be put into the normal 'Categories' property, however
                there are times when a Site Aggregation blog instance may just need
                its own categories.  So ApplicableCategories can be called when data
                across all blog instances may be needed, and Categories can be called
                when data for just the current blog instance is needed.
            </remarks>
        </member>
        <member name="P:BlogEngine.Core.Category.AbsoluteLink">
            <summary>
                Gets the absolute link to the page displaying all posts for this category.
            </summary>
            <value>The absolute link.</value>
        </member>
        <member name="P:BlogEngine.Core.Category.RelativeOrAbsoluteLink">
            <summary>
                Returns a relative link if possible if the hostname of this blog instance matches the
                hostname of the site aggregation blog.  If the hostname is different, then the
                absolute link is returned.
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Category.Description">
            <summary>
                Gets or sets the Description of the object.
            </summary>
            <value>The description.</value>
        </member>
        <member name="P:BlogEngine.Core.Category.FeedAbsoluteLink">
            <summary>
                Gets the absolute link to the feed for this category's posts.
            </summary>
            <value>The feed absolute link.</value>
        </member>
        <member name="P:BlogEngine.Core.Category.FeedRelativeLink">
            <summary>
                Gets the relative link to the feed for this category's posts.
            </summary>
            <value>The feed relative link.</value>
        </member>
        <member name="P:BlogEngine.Core.Category.Parent">
            <summary>
                Gets or sets the Parent ID of the object
            </summary>
            <value>The parent.</value>
        </member>
        <member name="P:BlogEngine.Core.Category.Posts">
            <summary>
                Gets all posts in this category.
            </summary>
            <value>The posts.</value>
        </member>
        <member name="P:BlogEngine.Core.Category.RelativeLink">
            <summary>
                Gets the relative link to the page displaying all posts for this category.
            </summary>
            <value>The relative link.</value>
        </member>
        <member name="P:BlogEngine.Core.Category.Title">
            <summary>
                Gets or sets the Title or the object.
            </summary>
            <value>The title.</value>
        </member>
        <member name="T:BlogEngine.Core.Compilation.BaseServerObjectExpressionBuilder">
            <summary>
            Base Server Object Expression Builder
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Compilation.BaseServerObjectExpressionBuilder.EvaluateExpression(System.Object,System.Web.UI.BoundPropertyEntry,System.Object,System.Web.Compilation.ExpressionBuilderContext)">
            <summary>
            When overridden in a derived class, returns an object that represents an evaluated expression.
            </summary>
            <param name="target">
            The object containing the expression.
            </param>
            <param name="entry">
            The object that represents information about the property bound to by the expression.
            </param>
            <param name="parsedData">
            The object containing parsed data as returned by <see cref="M:System.Web.Compilation.ExpressionBuilder.ParseExpression(System.String,System.Type,System.Web.Compilation.ExpressionBuilderContext)"/>.
            </param>
            <param name="context">
            Contextual information for the evaluation of the expression.
            </param>
            <returns>
            An object that represents the evaluated expression; otherwise, null if the inheritor does not implement <see cref="M:System.Web.Compilation.ExpressionBuilder.EvaluateExpression(System.Object,System.Web.UI.BoundPropertyEntry,System.Object,System.Web.Compilation.ExpressionBuilderContext)"/>.
            </returns>
        </member>
        <member name="M:BlogEngine.Core.Compilation.BaseServerObjectExpressionBuilder.GetCodeExpression(System.Web.UI.BoundPropertyEntry,System.Object,System.Web.Compilation.ExpressionBuilderContext)">
            <summary>
            When overridden in a derived class, returns code that is used during page execution to obtain the evaluated expression.
            </summary>
            <param name="entry">
            The object that represents information about the property bound to by the expression.
            </param>
            <param name="parsedData">
            The object containing parsed data as returned by <see cref="M:System.Web.Compilation.ExpressionBuilder.ParseExpression(System.String,System.Type,System.Web.Compilation.ExpressionBuilderContext)"/>.
            </param>
            <param name="context">
            Contextual information for the evaluation of the expression.
            </param>
            <returns>
            A <see cref="T:System.CodeDom.CodeExpression"/> that is used for property assignment.
            </returns>
        </member>
        <member name="M:BlogEngine.Core.Compilation.BaseServerObjectExpressionBuilder.GetRequestedValue(System.String,System.Type,System.String)">
            <summary>
            Gets the requested value.
            </summary>
            <param name="key">
            The key of the requested value.
            </param>
            <param name="targetType">
            Type of the target.
            </param>
            <param name="propertyName">
            Name of the property.
            </param>
            <returns>
            The requested value.
            </returns>
        </member>
        <member name="M:BlogEngine.Core.Compilation.BaseServerObjectExpressionBuilder.GetValue(System.String)">
            <summary>
            Gets the value.
            </summary>
            <param name="key">
            The key of the value to retrieve.
            </param>
            <returns>
            The value.
            </returns>
        </member>
        <member name="P:BlogEngine.Core.Compilation.BaseServerObjectExpressionBuilder.SourceObjectName">
            <summary>
                Gets the name of the source object.
            </summary>
            <value>The name of the source object.</value>
        </member>
        <member name="P:BlogEngine.Core.Compilation.BaseServerObjectExpressionBuilder.SupportsEvaluate">
            <summary>
                When overridden in a derived class, returns a value indicating whether the current <see cref = "T:System.Web.Compilation.ExpressionBuilder" /> object supports no-compile pages.
            </summary>
            <value></value>
            <returns>true if the <see cref = "T:System.Web.Compilation.ExpressionBuilder" /> supports expression evaluation; otherwise, false.
            </returns>
        </member>
        <member name="T:BlogEngine.Core.Compilation.CodeExpressionBuilder">
            <summary>
            Code Expression Builder
            </summary>
            <example>
            page.aspx:
                &lt;asp:CheckBox id="chk1" runat="server" Text='&lt;%$ code: DateTime.Now %&gt;' /&gt;
            web.config:
                &lt;compilation debug="true"&gt;
                    &lt;expressionBuilders&gt;
                        &lt;add expressionPrefix="code" type="WebApp.Compilation.CodeExpressionBuilder, WebApp" /&gt;
                    &lt;/expressionBuilders&gt;
                &lt;/compilation&gt;
            </example>
        </member>
        <member name="M:BlogEngine.Core.Compilation.CodeExpressionBuilder.GetCodeExpression(System.Web.UI.BoundPropertyEntry,System.Object,System.Web.Compilation.ExpressionBuilderContext)">
            <summary>
            When overridden in a derived class, returns code that is used during page execution to obtain the evaluated expression.
            </summary>
            <param name="entry">
            The object that represents information about the property bound to by the expression.
            </param>
            <param name="parsedData">
            The object containing parsed data as returned by <see cref="M:System.Web.Compilation.ExpressionBuilder.ParseExpression(System.String,System.Type,System.Web.Compilation.ExpressionBuilderContext)"/>.
            </param>
            <param name="context">
            Contextual information for the evaluation of the expression.
            </param>
            <returns>
            A <see cref="T:System.CodeDom.CodeExpression"/> that is used for property assignment.
            </returns>
        </member>
        <member name="T:BlogEngine.Core.Compilation.Design.CodeExpressionEditor">
            <summary>
            Code Expression Editor
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Compilation.Design.CodeExpressionEditor.EvaluateExpression(System.String,System.Object,System.Type,System.IServiceProvider)">
            <summary>
            Evaluates an expression string and provides the design-time value for a control property.
            </summary>
            <param name="expression">
            An expression string to evaluate. The expression does not include the expression prefix.
            </param>
            <param name="parseTimeData">
            An object containing additional parsing information for evaluating <paramref name="expression"/>. This typically is provided by the expression builder.
            </param>
            <param name="propertyType">
            The type of the control property to which <paramref name="expression"/> is bound.
            </param>
            <param name="serviceProvider">
            A service provider implementation supplied by the designer host, used to obtain additional design-time services.
            </param>
            <returns>
            The object referenced by the evaluated expression string, if the expression evaluation succeeded; otherwise, null.
            </returns>
        </member>
        <member name="T:BlogEngine.Core.Compilation.Design.QueryStringExpressionEditor">
            <summary>
            Query String Expression Editor
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Compilation.Design.QueryStringExpressionEditor.EvaluateExpression(System.String,System.Object,System.Type,System.IServiceProvider)">
            <summary>
            Evaluates an expression string and provides the design-time value for a control property.
            </summary>
            <param name="expression">
            An expression string to evaluate. The expression does not include the expression prefix.
            </param>
            <param name="parseTimeData">
            An object containing additional parsing information for evaluating <paramref name="expression"/>. This typically is provided by the expression builder.
            </param>
            <param name="propertyType">
            The type of the control property to which <paramref name="expression"/> is bound.
            </param>
            <param name="serviceProvider">
            A service provider implementation supplied by the designer host, used to obtain additional design-time services.
            </param>
            <returns>
            The object referenced by the evaluated expression string, if the expression evaluation succeeded; otherwise, null.
            </returns>
        </member>
        <member name="T:BlogEngine.Core.Compilation.Design.ServerVariableExpressionEditor">
            <summary>
            Server Variable Expression Editor
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Compilation.Design.ServerVariableExpressionEditor.EvaluateExpression(System.String,System.Object,System.Type,System.IServiceProvider)">
            <summary>
            Evaluates an expression string and provides the design-time value for a control property.
            </summary>
            <param name="expression">
            An expression string to evaluate. The expression does not include the expression prefix.
            </param>
            <param name="parseTimeData">
            An object containing additional parsing information for evaluating <paramref name="expression"/>. This typically is provided by the expression builder.
            </param>
            <param name="propertyType">
            The type of the control property to which <paramref name="expression"/> is bound.
            </param>
            <param name="serviceProvider">
            A service provider implementation supplied by the designer host, used to obtain additional design-time services.
            </param>
            <returns>
            The object referenced by the evaluated expression string, if the expression evaluation succeeded; otherwise, null.
            </returns>
        </member>
        <member name="M:BlogEngine.Core.Compilation.Design.ServerVariableExpressionEditor.GetExpressionEditorSheet(System.String,System.IServiceProvider)">
            <summary>
            Returns an expression editor sheet that is associated with the current expression editor.
            </summary>
            <param name="expression">
            The expression string set for a control property, used to initialize the expression editor sheet.
            </param>
            <param name="serviceProvider">
            A service provider implementation supplied by the designer host, used to obtain additional design-time services.
            </param>
            <returns>
            An <see cref="T:System.Web.UI.Design.ExpressionEditorSheet"/> that defines the custom expression properties.
            </returns>
        </member>
        <member name="T:BlogEngine.Core.Compilation.Design.ServerVariableExpressionEditor.ServerVariableExpressionEditorSheet">
            <summary>
            Server Variable Expression Editor Sheet
            </summary>
        </member>
        <member name="F:BlogEngine.Core.Compilation.Design.ServerVariableExpressionEditor.ServerVariableExpressionEditorSheet.owner">
            <summary>
            The owner.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Compilation.Design.ServerVariableExpressionEditor.ServerVariableExpressionEditorSheet.#ctor(System.String,BlogEngine.Core.Compilation.Design.ServerVariableExpressionEditor,System.IServiceProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:BlogEngine.Core.Compilation.Design.ServerVariableExpressionEditor.ServerVariableExpressionEditorSheet"/> class.
            </summary>
            <param name="expression">
            The expression.
            </param>
            <param name="owner">
            The owner.
            </param>
            <param name="serviceProvider">
            The service provider.
            </param>
        </member>
        <member name="M:BlogEngine.Core.Compilation.Design.ServerVariableExpressionEditor.ServerVariableExpressionEditorSheet.GetExpression">
            <summary>
            When overridden in a derived class, returns the expression string that is formed by the expression editor sheet property values.
            </summary>
            <returns>
            The custom expression string for the current property values.
            </returns>
        </member>
        <member name="P:BlogEngine.Core.Compilation.Design.ServerVariableExpressionEditor.ServerVariableExpressionEditorSheet.IsValid">
            <summary>
                Gets a value that indicates whether the expression string is valid.
            </summary>
            <value></value>
            <returns>true, if the expression string is valid; otherwise false.
            </returns>
        </member>
        <member name="P:BlogEngine.Core.Compilation.Design.ServerVariableExpressionEditor.ServerVariableExpressionEditorSheet.ServerVariableName">
            <summary>
                Gets or sets the name of the server variable.
            </summary>
            <value>The name of the server variable.</value>
        </member>
        <member name="T:BlogEngine.Core.Compilation.Design.ServerVariableExpressionEditor.ServerVariableExpressionEditorSheet.ServerVariableTypeConverter">
            <summary>
            Server Variable Type Converter
            </summary>
        </member>
        <member name="F:BlogEngine.Core.Compilation.Design.ServerVariableExpressionEditor.ServerVariableExpressionEditorSheet.ServerVariableTypeConverter.NoServerVariableSetting">
            <summary>
                No Server Variable Setting
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Compilation.Design.ServerVariableExpressionEditor.ServerVariableExpressionEditorSheet.ServerVariableTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether this converter can convert an object of the given type to the type of this converter, using the specified context.
            </summary>
            <param name="context">
            An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.
            </param>
            <param name="sourceType">
            A <see cref="T:System.Type"/> that represents the type you want to convert from.
            </param>
            <returns>
            true if this converter can perform the conversion; otherwise, false.
            </returns>
        </member>
        <member name="M:BlogEngine.Core.Compilation.Design.ServerVariableExpressionEditor.ServerVariableExpressionEditorSheet.ServerVariableTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether this converter can convert the object to the specified type, using the specified context.
            </summary>
            <param name="context">
            An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.
            </param>
            <param name="destinationType">
            A <see cref="T:System.Type"/> that represents the type you want to convert to.
            </param>
            <returns>
            true if this converter can perform the conversion; otherwise, false.
            </returns>
        </member>
        <member name="M:BlogEngine.Core.Compilation.Design.ServerVariableExpressionEditor.ServerVariableExpressionEditorSheet.ServerVariableTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Converts the given object to the type of this converter, using the specified context and culture information.
            </summary>
            <param name="context">
            An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.
            </param>
            <param name="culture">
            The <see cref="T:System.Globalization.CultureInfo"/> to use as the current culture.
            </param>
            <param name="value">
            The <see cref="T:System.Object"/> to convert.
            </param>
            <returns>
            An <see cref="T:System.Object"/> that represents the converted value.
            </returns>
            <exception cref="T:System.NotSupportedException">
            The conversion cannot be performed.
            </exception>
        </member>
        <member name="M:BlogEngine.Core.Compilation.Design.ServerVariableExpressionEditor.ServerVariableExpressionEditorSheet.ServerVariableTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts the given value object to the specified type, using the specified context and culture information.
            </summary>
            <param name="context">
            An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.
            </param>
            <param name="culture">
            A <see cref="T:System.Globalization.CultureInfo"/>. If null is passed, the current culture is assumed.
            </param>
            <param name="value">
            The <see cref="T:System.Object"/> to convert.
            </param>
            <param name="destinationType">
            The <see cref="T:System.Type"/> to convert the <paramref name="value"/> parameter to.
            </param>
            <returns>
            An <see cref="T:System.Object"/> that represents the converted value.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="destinationType"/> parameter is null.
            </exception>
            <exception cref="T:System.NotSupportedException">
            The conversion cannot be performed.
            </exception>
        </member>
        <member name="M:BlogEngine.Core.Compilation.Design.ServerVariableExpressionEditor.ServerVariableExpressionEditorSheet.ServerVariableTypeConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Returns a collection of standard values for the data type this type converter is designed for when provided with a format context.
            </summary>
            <param name="context">
            An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context that can be used to extract additional information about the environment from which this converter is invoked. This parameter or properties of this parameter can be null.
            </param>
            <returns>
            A <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection"/> that holds a standard set of valid values, or null if the data type does not support a standard set of values.
            </returns>
        </member>
        <member name="M:BlogEngine.Core.Compilation.Design.ServerVariableExpressionEditor.ServerVariableExpressionEditorSheet.ServerVariableTypeConverter.GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Returns whether the collection of standard values returned from <see cref="M:System.ComponentModel.TypeConverter.GetStandardValues"/> is an exclusive list of possible values, using the specified context.
            </summary>
            <param name="context">
            An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.
            </param>
            <returns>
            true if the <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection"/> returned from <see cref="M:System.ComponentModel.TypeConverter.GetStandardValues"/> is an exhaustive list of possible values; false if other values are possible.
            </returns>
        </member>
        <member name="M:BlogEngine.Core.Compilation.Design.ServerVariableExpressionEditor.ServerVariableExpressionEditorSheet.ServerVariableTypeConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Returns whether this object supports a standard set of values that can be picked from a list, using the specified context.
            </summary>
            <param name="context">
            An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.
            </param>
            <returns>
            true if <see cref="M:System.ComponentModel.TypeConverter.GetStandardValues"/> should be called to find a common set of values the object supports; otherwise, false.
            </returns>
        </member>
        <member name="T:BlogEngine.Core.Compilation.Design.SessionExpressionEditor">
            <summary>
            Session Expression Editor
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Compilation.Design.SessionExpressionEditor.EvaluateExpression(System.String,System.Object,System.Type,System.IServiceProvider)">
            <summary>
            Evaluates an expression string and provides the design-time value for a control property.
            </summary>
            <param name="expression">
            An expression string to evaluate. The expression does not include the expression prefix.
            </param>
            <param name="parseTimeData">
            An object containing additional parsing information for evaluating <paramref name="expression"/>. This typically is provided by the expression builder.
            </param>
            <param name="propertyType">
            The type of the control property to which <paramref name="expression"/> is bound.
            </param>
            <param name="serviceProvider">
            A service provider implementation supplied by the designer host, used to obtain additional design-time services.
            </param>
            <returns>
            The object referenced by the evaluated expression string, if the expression evaluation succeeded; otherwise, null.
            </returns>
        </member>
        <member name="T:BlogEngine.Core.Compilation.LinqLengthExpressionBuilder">
            <summary>
            Linq Length Expression Builder
            </summary>
            <remarks>
            The example usage below uses an Employee table with a Name column. Employee may need to be namespace referenced
                like improvGroup.Manager.Data.Employee if the namespace of the page is different than the data entity namespace.
            </remarks>
            <example>
            &lt;asp:TextBox ID="TextBoxName" runat="server" MaxLength='&lt;%$LinqLength:Employee.Name%&gt;' /&gt;
            </example>
        </member>
        <member name="M:BlogEngine.Core.Compilation.LinqLengthExpressionBuilder.GetCodeExpression(System.Web.UI.BoundPropertyEntry,System.Object,System.Web.Compilation.ExpressionBuilderContext)">
            <summary>
            Gets the code expression.
            </summary>
            <param name="entry">
            The entry.
            </param>
            <param name="parsedData">
            The parsed data.
            </param>
            <param name="context">
            The context.
            </param>
            <returns>
            A CodeExpression.
            </returns>
        </member>
        <member name="M:BlogEngine.Core.Compilation.LinqLengthExpressionBuilder.AfterLast(System.String,System.String)">
            <summary>
            Gets the end of the string after the last instance of the last.
            </summary>
            <param name="value">
            The string value.
            </param>
            <param name="last">
            The value to search for.
            </param>
            <returns>
            The string after the last instance of last.
            </returns>
        </member>
        <member name="M:BlogEngine.Core.Compilation.LinqLengthExpressionBuilder.BeforeLast(System.String,System.String)">
            <summary>
            Get the string up to the last instance of last.
            </summary>
            <param name="value">
            The string value.
            </param>
            <param name="last">
            The instance to search for the last of.
            </param>
            <returns>
            The string up to the last instance of last.
            </returns>
        </member>
        <member name="M:BlogEngine.Core.Compilation.LinqLengthExpressionBuilder.BetweenFirst(System.String,System.String,System.String)">
            <summary>
            Gets the string value between the start and the end.
            </summary>
            <param name="value">
            The value to search.
            </param>
            <param name="startText">
            The start text to skip.
            </param>
            <param name="endText">
            The end text to skip.
            </param>
            <returns>
            The middle of the string between start and end.
            </returns>
        </member>
        <member name="M:BlogEngine.Core.Compilation.LinqLengthExpressionBuilder.PropertyLength(System.String,System.String)">
            <summary>
            Gets the length of the property.
            </summary>
            <param name="typeName">
            Name of the type.
            </param>
            <param name="propertyName">
            Name of the property.
            </param>
            <returns>
            The length of the property.
            </returns>
        </member>
        <member name="T:BlogEngine.Core.Compilation.QueryStringExpressionBuilder">
            <summary>
            Query String Expression Builder
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Compilation.QueryStringExpressionBuilder.Instance">
            <summary>
            Creates a new instance of this expression builder.
            </summary>
            <returns>
            A new instance of this expression builder.
            </returns>
        </member>
        <member name="M:BlogEngine.Core.Compilation.QueryStringExpressionBuilder.GetValue(System.String)">
            <summary>
            Gets the value.
            </summary>
            <param name="key">
            The key of the value to retrieve.
            </param>
            <returns>
            The value.
            </returns>
        </member>
        <member name="P:BlogEngine.Core.Compilation.QueryStringExpressionBuilder.SourceObjectName">
            <summary>
                Gets the name of the source object.
            </summary>
            <value>The name of the source object.</value>
        </member>
        <member name="T:BlogEngine.Core.Compilation.ReflectExpressionBuilder">
            <summary>
            Implements an expression builder that provides a strongly-typed reference to a type or member info, instead of a string.
                Targeted properties still receive a string as input, but the expression is validated during page compilation or execution.
                If the supplied expression cannot be resolved to a type or member info from an assembly loaded into the current domain
                then an exception is thrown. Note that type and member name resolution is case-sensitive.
                Only public types and members can be resolved.
            </summary>
            <remarks>
            &lt;add expressionPrefix="Reflect" type="WebApp.Compilation.ReflectExpressionBuilder, WebApp"/&gt;
                Add the above to the web.config.
                The following examples illustrate the usage of the expression in web pages:
                &lt;asp:ObjectDataSource SelectMethod="&lt;%$ Reflect: ComCard.Components.BusinessObjects.Task, Search %&gt;" ... /&gt;
                This will resolve the type ComCard.Components.BusinessObjects.Task, and validate that Search is a public member on that type.
                The member name will be returned for binding to the property.
                &lt;asp:ObjectDataSource DataObjectTypeName="&lt;%$ Reflect: ComCard.Components.BusinessObjects.LogEntry %&gt;" ... /&gt;
                This will resolve the type ComCard.Components.BusinessObjects.LogEntry. The type name will be returned for binding.
            </remarks>
        </member>
        <member name="M:BlogEngine.Core.Compilation.ReflectExpressionBuilder.EvaluateExpression(System.Object,System.Web.UI.BoundPropertyEntry,System.Object,System.Web.Compilation.ExpressionBuilderContext)">
            <summary>
            Evaluates the expression at runtime.
            </summary>
            <param name="target">
            The target object.
            </param>
            <param name="entry">
            The entry for the property bound to the expression.
            </param>
            <param name="parsedData">
            The parsed expression data.
            </param>
            <param name="context">
            The current expression builder context.
            </param>
            <returns>
            A string representing the target type or member.
            </returns>
        </member>
        <member name="M:BlogEngine.Core.Compilation.ReflectExpressionBuilder.GetCodeExpression(System.Web.UI.BoundPropertyEntry,System.Object,System.Web.Compilation.ExpressionBuilderContext)">
            <summary>
            Returns a <see cref="N:System.CodeDom"/> expression for invoking the expression from a
                compiled page at runtime.
            </summary>
            <param name="entry">
            The entry for the bound property.
            </param>
            <param name="parsedData">
            The parsed expression data.
            </param>
            <param name="context">
            The expression builder context.
            </param>
            <returns>
            A <see cref="T:System.CodeDom.CodeExpression"/> for invoking the expression.
            </returns>
        </member>
        <member name="M:BlogEngine.Core.Compilation.ReflectExpressionBuilder.ParseExpression(System.String,System.Type,System.Web.Compilation.ExpressionBuilderContext)">
            <summary>
            Parses and validates the expression data and returns a canonical type or member name, 
                or throws an exception if the expression is invalid.
            </summary>
            <param name="expression">
            The raw expression to parse.
            </param>
            <param name="propertyType">
            The target property type.
            </param>
            <param name="context">
            Contextual information for the expression builder.
            </param>
            <returns>
            A string representing the target type or member name for binding.
            </returns>
        </member>
        <member name="M:BlogEngine.Core.Compilation.ReflectExpressionBuilder.ValidateExpression(System.String,System.String)">
            <summary>
            Validates that the specified type and member name can be resolved in the current context.
                Member name resolution is optional.
            </summary>
            <param name="typeName">
            The full name of the type.
            </param>
            <param name="memberName">
            The member name to resolve, or null to ignore.
            </param>
            <returns>
            The type / member name as a string for binding to the target property.
            </returns>
        </member>
        <member name="P:BlogEngine.Core.Compilation.ReflectExpressionBuilder.SupportsEvaluate">
            <summary>
                Gets a flag that indicates whether the expression builder supports no-compile evaluation.
                Returns true, as the target type can be validated at runtime as well.
            </summary>
        </member>
        <member name="T:BlogEngine.Core.Compilation.ServerVariableExpressionBuilder">
            <summary>
            Server Variable Expression Builder
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Compilation.ServerVariableExpressionBuilder.Instance">
            <summary>
            Creates a new instance of this expression builder.
            </summary>
            <returns>
            A new instance of this expression builder.
            </returns>
        </member>
        <member name="M:BlogEngine.Core.Compilation.ServerVariableExpressionBuilder.GetValue(System.String)">
            <summary>
            Gets the value.
            </summary>
            <param name="key">
            The key of the value to get.
            </param>
            <returns>
            The value.
            </returns>
        </member>
        <member name="P:BlogEngine.Core.Compilation.ServerVariableExpressionBuilder.SourceObjectName">
            <summary>
                Gets the name of the source object.
            </summary>
            <value>The name of the source object.</value>
        </member>
        <member name="T:BlogEngine.Core.Compilation.SessionExpressionBuilder">
            <summary>
            Session Expression Builder
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Compilation.SessionExpressionBuilder.Instance">
            <summary>
            Creates a new instance of this expression builder.
            </summary>
            <returns>
            A new instance of this expression builder.
            </returns>
        </member>
        <member name="M:BlogEngine.Core.Compilation.SessionExpressionBuilder.GetValue(System.String)">
            <summary>
            Gets the value.
            </summary>
            <param name="key">
            The key of the value to get.
            </param>
            <returns>
            The value.
            </returns>
        </member>
        <member name="P:BlogEngine.Core.Compilation.SessionExpressionBuilder.SourceObjectName">
            <summary>
                Gets the name of the source object.
            </summary>
            <value>The name of the source object.</value>
        </member>
        <member name="T:BlogEngine.Core.Extensions">
            <summary>
            Extension Methods.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Extensions.Contains(System.String,System.String,System.StringComparison)">
            <summary>
            Checks whether a source string contains another string based on the supplied StringComparison.
            </summary>
            <param name="source"></param>
            <param name="partial"></param>
            <param name="comparison"></param>
            <returns></returns>
        </member>
        <member name="M:BlogEngine.Core.Extensions.TryParse(System.String,System.Guid@)">
            <summary>
            Tries to parse the string into the specified Guid.
            </summary>
            <param name="guidString">The GUID string.</param>
            <param name="guid">The parsed GUID.</param>
            <returns>Whether it worked or not.</returns>
        </member>
        <member name="M:BlogEngine.Core.Extensions.TryParse(System.String,System.Nullable{System.Guid}@)">
            <summary>
            Tries to parse the string into the specified Guid.
            </summary>
            <param name="guidString">The GUID string.</param>
            <param name="guid">The parsed GUID.</param>
            <returns>Whether it worked or not.</returns>
        </member>
        <member name="M:BlogEngine.Core.Extensions.TryParse``1(System.String,``0@)">
            <summary>
            Tries to convert the string to the specified type.
            </summary>
            <typeparam name="T">The type to try to convert to.</typeparam>
            <param name="theString">The string to parse.</param>
            <param name="output">The output.</param>
            <returns>Whether it worked or not.</returns>
            <remarks>
            Abuse of a language feature? Probably.
            </remarks>
        </member>
        <member name="T:BlogEngine.Core.FileSystem.Directory">
            <summary>
            A directory is a virtual data store directory,
                the directory may contain files, and directories
            </summary>
            <remarks>
                Not to be confused with System.IO.Directory, this is a virtual directory that is part of a blog based filesystem
            </remarks>
        </member>
        <member name="F:BlogEngine.Core.FileSystem.Directory.name">
            <summary>
            directory name
            </summary>
        </member>
        <member name="F:BlogEngine.Core.FileSystem.Directory.fullpath">
            <summary>
            directory full path
            </summary>
        </member>
        <member name="F:BlogEngine.Core.FileSystem.Directory.isroot">
            <summary>
            is root directory?
            </summary>
        </member>
        <member name="F:BlogEngine.Core.FileSystem.Directory.parent">
            <summary>
            parent directory
            </summary>
        </member>
        <member name="F:BlogEngine.Core.FileSystem.Directory.directories">
            <summary>
            directories in the directory, lazy loaded
            </summary>
        </member>
        <member name="F:BlogEngine.Core.FileSystem.Directory.files">
            <summary>
            files in the directory, lazy loaded
            </summary>
        </member>
        <member name="M:BlogEngine.Core.FileSystem.Directory.CreateSubDirectory(System.String)">
            <summary>
            Creates a subdirectory in the current directory
            </summary>
            <param name="Name">Name of the new directory</param>
            <returns>the new directory</returns>
        </member>
        <member name="M:BlogEngine.Core.FileSystem.Directory.DeleteSubDirectory(System.String)">
            <summary>
            Delets a subdirectory by name
            </summary>
            <param name="Name"></param>
        </member>
        <member name="M:BlogEngine.Core.FileSystem.Directory.Delete">
            <summary>
            Deletes the current directory, and all subsequent files
            </summary>
        </member>
        <member name="M:BlogEngine.Core.FileSystem.Directory.DeleteAllFiles">
            <summary>
            Deletes all files in the directory.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.FileSystem.Directory.DeleteAllDirectories">
            <summary>
            Deletes all the directories, including subdirectories &amp; files.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.FileSystem.Directory.CompareTo(BlogEngine.Core.FileSystem.Directory)">
            <summary>
            Not implemented. Throws a NotImplementedException.
            </summary>
            <param name="other">unused</param>
            <returns>Nothing</returns>
        </member>
        <member name="M:BlogEngine.Core.FileSystem.Directory.ValidationRules">
            <summary>
            Not implemented. Throws a NotImplementedException.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.FileSystem.Directory.DataUpdate">
            <summary>
            Not implemented. Throws a NotImplementedException.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.FileSystem.Directory.DataSelect(System.Guid)">
            <summary>
            Not implemented. Throws a NotImplementedException.
            </summary>
            <para>unused</para>
            <returns>Nothing</returns>
        </member>
        <member name="M:BlogEngine.Core.FileSystem.Directory.DataInsert">
            <summary>
            Not implemented. Throws a NotImplementedException.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.FileSystem.Directory.DataDelete">
            <summary>
            Not implemented. Throws a NotImplementedException.
            </summary>
        </member>
        <member name="P:BlogEngine.Core.FileSystem.Directory.Name">
            <summary>
            gets the Directory name
            </summary>
            <remarks>
            set accessor interal
            </remarks>
        </member>
        <member name="P:BlogEngine.Core.FileSystem.Directory.FullPath">
            <summary>
            gets the full path to the directory.
            </summary>
            <remarks>
            set accessor marked internal
            </remarks>
        </member>
        <member name="P:BlogEngine.Core.FileSystem.Directory.IsRoot">
            <summary>
            gets the flag wether or not this is the root directory
            </summary>
            <remarks>
            set accessor marked internal
            </remarks>
        </member>
        <member name="P:BlogEngine.Core.FileSystem.Directory.Parent">
            <summary>
            gets the parent directory for the direct
            </summary>
            <remarks>
            set accessor marked as internal
            </remarks>
        </member>
        <member name="P:BlogEngine.Core.FileSystem.Directory.Directories">
            <summary>
            gets directories contained within this directory, Lazy loaded
            </summary>
            <remarks>
            set marked as internal
            </remarks>
        </member>
        <member name="P:BlogEngine.Core.FileSystem.Directory.Files">
            <summary>
            gets the Files in this directory, Lazy loaded
            </summary>
            <remarks>
            set accessor marked as internal
            </remarks>
        </member>
        <member name="P:BlogEngine.Core.FileSystem.Directory.LastAccessTime">
            <summary>
            gets the last access time
            </summary>
            <remarks>
            set marked as internal
            </remarks>
        </member>
        <member name="T:BlogEngine.Core.FileSystem.File">
            <summary>
            The file is a virtual file that is loaded into memory.
            </summary>
            <remarks>
                Not to be confused with System.IO.File
            </remarks>
        </member>
        <member name="F:BlogEngine.Core.FileSystem.File.contents">
            <summary>
            the binary of the file
            </summary>
        </member>
        <member name="F:BlogEngine.Core.FileSystem.File.fileSize">
            <summary>
            the file size, in raw long format
            </summary>
        </member>
        <member name="F:BlogEngine.Core.FileSystem.File.parentDirectory">
            <summary>
            the parent directory of the file
            </summary>
        </member>
        <member name="F:BlogEngine.Core.FileSystem.File.name">
            <summary>
            the name of the file without the path
            </summary>
        </member>
        <member name="F:BlogEngine.Core.FileSystem.File.fullpath">
            <summary>
            the full path of the file, internal field only, use file path for external calls. reduces security concerns
            while outside of the buisness layer
            </summary>
        </member>
        <member name="F:BlogEngine.Core.FileSystem.File.filepath">
            <summary>
            the relative file path to the blog file container
            </summary>
        </member>
        <member name="F:BlogEngine.Core.FileSystem.File.ImageExtensnios">
            <summary>
            list of valid image extensions
            </summary>
        </member>
        <member name="M:BlogEngine.Core.FileSystem.File.Delete">
            <summary>
            deletes the current file object from the storage container
            </summary>
        </member>
        <member name="M:BlogEngine.Core.FileSystem.File.Rename(System.String)">
            <summary>
            renames the current file
            </summary>
            <param name="NewName">the new name of the file</param>
            <returns>the new file objbect</returns>
            <remarks>
            methods performs an upload, then deletes itself. The result will dispose of the original object
            </remarks>
        </member>
        <member name="M:BlogEngine.Core.FileSystem.File.MoveFile(System.String,BlogEngine.Core.FileSystem.Directory)">
            <summary>
            moves the file to a new directory &amp; new name
            </summary>
            <param name="NewName">the new name</param>
            <param name="NewBaseDirectory">the new directory</param>
            <returns>
            the new file object
            </returns>
            <remarks>
            methods perfoms an upload, the deletes iteself. The result will dispose of the original object
            </remarks>
        </member>
        <member name="M:BlogEngine.Core.FileSystem.File.CopyFile(BlogEngine.Core.FileSystem.Directory)">
            <summary>
            copys a file from one directory to another
            </summary>
            <param name="NewBaseDirectory">the new directory</param>
            <returns>the new file object</returns>
            <remarks>
            both object will be maintained after the copy. 
            </remarks>
        </member>
        <member name="M:BlogEngine.Core.FileSystem.File.CopyFile(System.String,BlogEngine.Core.FileSystem.Directory)">
            <summary>
            copys a file from one directory to another with a new name
            </summary>
            <param name="NewName">the new name</param>
            <param name="NewBaseDirectory">the new directory</param>
            <returns>the new file object</returns>
            <remarks>
            both object will be maintained after the copy. 
            </remarks>
        </member>
        <member name="M:BlogEngine.Core.FileSystem.File.ValidationRules">
            <summary>
            Not implemented. Throws a NotImplementedException.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.FileSystem.File.DataUpdate">
            <summary>
            Not implemented. Throws a NotImplementedException.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.FileSystem.File.DataSelect(System.String)">
            <summary>
            Not implemented. Throws a NotImplementedException.
            </summary>
            <param name="id">unused</param>
            <returns>Nothing</returns>
        </member>
        <member name="M:BlogEngine.Core.FileSystem.File.DataInsert">
            <summary>
            Not implemented. Throws a NotImplementedException.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.FileSystem.File.DataDelete">
            <summary>
            Not implemented. Throws a NotImplementedException.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.FileSystem.File.CompareTo(BlogEngine.Core.FileSystem.File)">
            <summary>
            Not implemented. Throws a NotImplementedException.
            </summary>
            <param name="other">unused</param>
            <returns>Nothing</returns>
        </member>
        <member name="M:BlogEngine.Core.FileSystem.File.SizeFormat(System.Single,System.String)">
            <summary>
            formats a file to a predetermided size
            </summary>
            <param name="size">the file size as a float</param>
            <param name="formatString">the numeric format string</param>
            <returns>the formated string</returns>
        </member>
        <member name="P:BlogEngine.Core.FileSystem.File.FileContents">
            <summary>
            Gets the File Contents, Lazy loaded
            </summary>
            <remarks>
            set accessor set to internal
            </remarks>
        </member>
        <member name="P:BlogEngine.Core.FileSystem.File.FileSize">
            <summary>
            gets the file size, in raw long
            </summary>
            <remarks>
            set accessor set to internal
            </remarks>
        </member>
        <member name="P:BlogEngine.Core.FileSystem.File.ParentDirectory">
            <summary>
            gets the parent directory, uses Lazy loading
            </summary>
            <remarks>
            set accessor set to internal
            </remarks>
        </member>
        <member name="P:BlogEngine.Core.FileSystem.File.Name">
            <summary>
            gets the file name
            </summary>
            <remarks>
            set accessor set to the internal
            </remarks>
        </member>
        <member name="P:BlogEngine.Core.FileSystem.File.FullPath">
            <summary>
            gets the full path, internale set. To change the path use rename methods
            </summary>
        </member>
        <member name="P:BlogEngine.Core.FileSystem.File.FilePath">
            <summary>
            gets the relative path to the file
            </summary>
            <remarks>
            set accessor set to internal
            </remarks>
        </member>
        <member name="P:BlogEngine.Core.FileSystem.File.Extension">
            <summary>
            gets the file extension
            </summary>
        </member>
        <member name="P:BlogEngine.Core.FileSystem.File.SafeFilePath">
            <summary>
            gets the safe file name, URL encoded version of this.FilePath
            </summary>
        </member>
        <member name="P:BlogEngine.Core.FileSystem.File.FileSizeFormat">
            <summary>
            gets the file size in string formated
            </summary>
        </member>
        <member name="P:BlogEngine.Core.FileSystem.File.FileDescription">
            <summary>
            gets the full file description of name and filesize (formated)
            </summary>
        </member>
        <member name="P:BlogEngine.Core.FileSystem.File.FileDownloadPath">
            <summary>
            gets the full download path to the file, using the file handler
            </summary>
        </member>
        <member name="P:BlogEngine.Core.FileSystem.File.LastAccessTime">
            <summary>
            gets the last access time for the file
            </summary>
            <remarks>
            set accessor set to internal
            </remarks>
        </member>
        <member name="P:BlogEngine.Core.FileSystem.File.IsImage">
            <summary>
            valdidates if this object is an image
            </summary>
        </member>
        <member name="P:BlogEngine.Core.FileSystem.File.AsImage">
            <summary>
            converts the object to the Image object and disposes of the original object. An exception will be thrown if the image is not of a file type.
            </summary>
            <remarks>
            always compare the IsImage flag first before attempting a direct call to AsImage
            </remarks>
        </member>
        <member name="T:BlogEngine.Core.FileSystem.Image">
            <summary>
            image specific class, will contain the extra methods and properties of an image
            </summary>
        </member>
        <member name="F:BlogEngine.Core.FileSystem.Image.bitmap">
            <summary>
            the current image bitmap. call the accessor directly
            </summary>
        </member>
        <member name="M:BlogEngine.Core.FileSystem.Image.#ctor(BlogEngine.Core.FileSystem.File)">
            <summary>
            ctor, copys all the properties from the file object into the new object.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.FileSystem.Image.#ctor">
            <summary>
            ctor, property free constructor, initiates the this.Image(file) passing in a null file reference
            </summary>
        </member>
        <member name="M:BlogEngine.Core.FileSystem.Image.ResizeImage(System.Drawing.Size)">
            <summary>
            resizes the image to a new size. The image will be replaced
            </summary>
            <param name="newSize">the new Size for the image</param>
            <returns>the new image</returns>
        </member>
        <member name="M:BlogEngine.Core.FileSystem.Image.ResizeImageThumbnail(System.Int32,System.Byte[])">
            <summary>
            Creates a thumbnail from the original image.
            </summary>
            <param name="MaxSize">The max size in pixels of the thumbnail to generate.</param>
            <param name="originalContents">Byte array containing the original image.</param>
            <returns>Byte array containing the newly generated thumbnail image.</returns>
        </member>
        <member name="M:BlogEngine.Core.FileSystem.Image.ResizeImage(System.Decimal)">
            <summary>
            resizes the image to a new size based on a percentage
            </summary>
            <param name="Percent">the percentage to resize</param>
            <returns>the new image</returns>
            <remarks>
            This may not be exactly to the percent as we must maintain aspect ratios.
            </remarks>
        </member>
        <member name="M:BlogEngine.Core.FileSystem.Image.ModifyImage(BlogEngine.Core.FileSystem.Image.ModificationType[])">
            <summary>
            accepts change requests for an image for rotate &amp; flip
            </summary>
            <param name="modifications">a list of changes, will be executed in the order recieved</param>
            <returns>the original image</returns>
        </member>
        <member name="M:BlogEngine.Core.FileSystem.Image.CropImage(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Crops an image by giving the crop start x &amp; y co-ordinates and then the height &amp; width to crop to. Making a perfect rectangle of the crop area.
            </summary>
            <param name="x">the x co-ordinate</param>
            <param name="y">the y co-ordinate</param>
            <param name="width">the width to crop</param>
            <param name="height">the height to crop</param>
            <returns>the new object, on exception the image will not be modified.</returns>
        </member>
        <member name="M:BlogEngine.Core.FileSystem.Image.ArrayToBmp(System.Byte[])">
            <summary>
            converts a byte array to a bitmap
            </summary>
            <param name="inArray">the in array</param>
            <returns>the new bitmap</returns>
        </member>
        <member name="M:BlogEngine.Core.FileSystem.Image.BmpToArray(System.Drawing.Bitmap,System.Drawing.Imaging.ImageFormat)">
            <summary>
            converts a bitmap to an array
            </summary>
            <param name="bmp">the bitmap to convert</param>
            <param name="imgFormat">The format of the image to save to.</param>
            <returns>the byte array object</returns>
        </member>
        <member name="M:BlogEngine.Core.FileSystem.Image.GetImageFormat(System.Drawing.Image)">
            <summary>
            Determines the image format of the image.
            </summary>
            <param name="image">The image to check.</param>
            <returns>The image format</returns>
        </member>
        <member name="M:BlogEngine.Core.FileSystem.Image.resizeImage(System.Drawing.Image,System.Drawing.Size)">
            <summary>
            resizes an image to  specific size
            </summary>
            <param name="imgToResize">the image to resize</param>
            <param name="size">the new size</param>
            <returns>new resized image</returns>
        </member>
        <member name="P:BlogEngine.Core.FileSystem.Image.bitMap">
            <summary>
            gets the bitmap of the current image Item
            </summary>
            <remarks>
            set accessor set to internal
            </remarks>
        </member>
        <member name="P:BlogEngine.Core.FileSystem.Image.ImageUrl">
            <summary>
            gets the full download path to the file, using the file handler
            </summary>
        </member>
        <member name="T:BlogEngine.Core.FileSystem.Image.ModificationType">
            <summary>
            enum for the file modification methods
            </summary>
        </member>
        <member name="F:BlogEngine.Core.FileSystem.Image.ModificationType.FlipHorizontal">
            <summary>
            Flip the image horizontally
            </summary>
        </member>
        <member name="F:BlogEngine.Core.FileSystem.Image.ModificationType.FlipVertical">
            <summary>
            Flip the image vertically
            </summary>
        </member>
        <member name="F:BlogEngine.Core.FileSystem.Image.ModificationType.RotateLeft">
            <summary>
            270 degree clockwise rotation without flipping
            </summary>
        </member>
        <member name="F:BlogEngine.Core.FileSystem.Image.ModificationType.RotateRight">
            <summary>
            90 degree clockwise rotation without flipping
            </summary>
        </member>
        <member name="T:BlogEngine.Core.FileSystem.FileSystemUtilities">
            <summary>
            Utility class for various FileSystem operations.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.FileSystem.FileSystemUtilities.CompressDirectory(System.String,BlogEngine.Core.FileSystem.Directory)">
            <summary>
            Compresses a directory using Zip compression into a specified directory
            </summary>
            <param name="ArchiveOutputLocation">the output directory path (including file name)</param>
            <param name="ArchiveDirectory">the Directory object to be compressed</param>
            <remarks>
            is recursive
            </remarks>
        </member>
        <member name="M:BlogEngine.Core.FileSystem.FileSystemUtilities.ZipDirectory(BlogEngine.Core.FileSystem.Directory,BlogEngine.Core.FileSystem.Directory,ICSharpCode.SharpZipLib.Zip.ZipOutputStream)">
            <summary>
            Adds a directory to a specific ZipStream
            </summary>
            <param name="RootDirectory">the root directory</param>
            <param name="CurrentDirectory">the directory to push</param>
            <param name="zStream">stream to write to</param>
            <remarks>
            do not call this method directly, this method is designed be called in a recursive manor.
            </remarks>
        </member>
        <member name="M:BlogEngine.Core.FileSystem.FileSystemUtilities.DumpProvider(System.String,System.String)">
            <summary>
            Dumps the file store provider to a zip file, clears the old file store, switches and reloads a new providers
                clears the new file storage provider, then loads the new file store provider from the zip.
            </summary>
            <param name="NewProviderName">The name of the new provider</param>
            <param name="ArchiveOutputLocation">The output archive location.</param>
            <returns>bool if complete</returns>
        </member>
        <member name="M:BlogEngine.Core.FileSystem.FileSystemUtilities.CreateProvider(System.String)">
            <summary>
            Retrieves the given provider from Web.config and attempts to instantiate it.
            </summary>
            <param name="ProviderName">The blog provider to instantiate.</param>
            <returns>A BlogProvider instance.</returns>
        </member>
        <member name="T:BlogEngine.Core.Json.JsonBlog">
            <summary>
            Blog data used for blogs management in admin area.
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Json.JsonBlog.Id">
            <summary>
            Blog ID
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Json.JsonBlog.Name">
            <summary>
            Blog name
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Json.JsonBlog.VirtualPath">
            <summary>
            Virtual Path.
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Json.JsonBlog.StorageContainerName">
            <summary>
            Storage Container Name.
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Json.JsonBlog.Hostname">
            <summary>
            Hostname.
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Json.JsonBlog.IsAnyTextBeforeHostnameAccepted">
            <summary>
            IsAnyTextBeforeHostnameAccepted.
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Json.JsonBlog.PhysicalStorageLocation">
            <summary>
            Physical path to the Storage Location (READ ONLY).
            This is "StorageLocation" after running it thru MapPath.
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Json.JsonBlog.RelativeWebRoot">
            <summary>
            Relative Web Root (READ ONLY).
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Json.JsonBlog.AbsoluteWebRoot">
            <summary>
            Absolute Web Root (READ ONLY).
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Json.JsonBlog.IsPrimary">
            <summary>
            Whether the blog instance is the Primary instance.
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Json.JsonBlog.IsActive">
            <summary>
            Active status
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Json.JsonBlog.IsSiteAggregation">
            <summary>
            Whether the blog instance is a Site Aggregation instance.
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Json.JsonBlog.CanUserDelete">
            <summary>
            If the current user can delete this page.
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Json.JsonBlog.CanUserEdit">
            <summary>
            If the current user can edit this page.
            </summary>
        </member>
        <member name="T:BlogEngine.Core.Json.JsonBlogs">
            <summary>
            List of blogs
            </summary>
        </member>
        <member name="F:BlogEngine.Core.Json.JsonBlogs.currentPage">
            <summary>
            The current page.
            </summary>
        </member>
        <member name="F:BlogEngine.Core.Json.JsonBlogs.blogCnt">
            <summary>
            The comm cnt.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Json.JsonBlogs.GetBlogs(System.Int32,System.Int32)">
            <summary>
            Gets blog list based on selection for current page
            </summary>
            <param name="page">Current page</param>
            <param name="pageSize">Page Size</param>
            <returns>List of blogs</returns>
        </member>
        <member name="M:BlogEngine.Core.Json.JsonBlogs.CreateJsonBlog(BlogEngine.Core.Blog)">
            <summary>
            Converts the Blog data into a JSON-serializable object.
            </summary>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:BlogEngine.Core.Json.JsonBlogs.GetPager(System.Int32,System.Int32)">
            <summary>
            Builds pager control for blogs page
            </summary>
            <param name="page">Current Page Number</param>
            <param name="pageSize">Page Size</param>
            <returns></returns>
        </member>
        <member name="T:BlogEngine.Core.Json.JsonCategory">
            <summary>
            Category list
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Json.JsonCategory.Id">
            <summary>
            Unique Id
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Json.JsonCategory.Title">
            <summary>
            Title
            </summary>
        </member>
        <member name="T:BlogEngine.Core.Json.JsonComment">
            <summary>
            Wrapper for Json serializible comment list
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Json.JsonComment.GetChildren(System.Guid)">
            <summary>
            If connent has nested comments
            </summary>
            <param name="comId">
            Comment Id
            </param>
            <returns>
            True if has child records
            </returns>
        </member>
        <member name="P:BlogEngine.Core.Json.JsonComment.Id">
            <summary>
                Gets or sets the Comment Id
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Json.JsonComment.Email">
            <summary>
                Gets or sets the Email
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Json.JsonComment.Author">
            <summary>
                Gets or sets the Author
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Json.JsonComment.Avatar">
            <summary>
                Gets the avatar image
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Json.JsonComment.HasChildren">
            <summary>
                Gets a value indicating whether this comment has nested comments
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Json.JsonComment.Title">
            <summary>
                Gets or sets the comment title
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Json.JsonComment.Teaser">
            <summary>
                Gets or sets the shorten comment content
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Json.JsonComment.Website">
            <summary>
                Gets or sets the author's website
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Json.JsonComment.AuthorAvatar">
            <summary>
            Static avatar image
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Json.JsonComment.Content">
            <summary>
                Gets or sets the comment body
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Json.JsonComment.Ip">
            <summary>
                Gets or sets the ip
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Json.JsonComment.Date">
            <summary>
                Gets or sets the date portion of published date
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Json.JsonComment.Time">
            <summary>
                Gets or sets the time portion of published date
            </summary>
        </member>
        <member name="T:BlogEngine.Core.Json.JsonCulture">
            <summary>
            Represents the i18n culture used by blog.js. Used by ResourceHandler.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Json.JsonCulture.#ctor(System.Globalization.CultureInfo,BlogEngine.Core.Json.JsonCulture.ResourceType)">
            <summary>
            Creates a new JsonCulture instance from the supplied CultureInfo.
            </summary>
            <param name="cultureInfo">The CultureInfo needed to get the proper translations for this JsonCulture instance</param>
            <param name="resourceType">Type of resource (blog or admin)</param>
            <remarks>
            
            This class uses a dictionary as its basis for storing/caching its information. This makes it incredibly easy to extend
            without having to create/remove properties.
            
            </remarks>
        </member>
        <member name="M:BlogEngine.Core.Json.JsonCulture.AddResource(System.String)">
            <summary>
            Adds a new translatable string resource to this JsonCulture.
            </summary>
            <param name="resourceLabelKey">The key used to retrieve the translated value from global resource labels.</param>
            <returns>The translated string.</returns>
        </member>
        <member name="M:BlogEngine.Core.Json.JsonCulture.ToJsonString">
            <summary>
            Returns a JSON formatted string repressentation of this JsonCulture instance's culture labels.
            </summary>
            <returns></returns>
        </member>
        <member name="T:BlogEngine.Core.Json.JsonCulture.ResourceType">
            <summary>
            Type of language resources
            </summary>
        </member>
        <member name="F:BlogEngine.Core.Json.JsonCulture.ResourceType.Blog">
            <summary>
                Resources added to Blog
            </summary>
        </member>
        <member name="F:BlogEngine.Core.Json.JsonCulture.ResourceType.Admin">
            <summary>
                Resources added to Admin
            </summary>
        </member>
        <member name="T:BlogEngine.Core.Json.JsonCustomFilter">
            <summary>
            Custom filter
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Json.JsonCustomFilter.Name">
            <summary>
            Short name
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Json.JsonCustomFilter.FullName">
            <summary>
            Long (class) name
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Json.JsonCustomFilter.Enabled">
            <summary>
            If filter enabled
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Json.JsonCustomFilter.Checked">
            <summary>
            Number of comments checked by filter
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Json.JsonCustomFilter.Spam">
            <summary>
            Spam comments identified
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Json.JsonCustomFilter.Mistakes">
            <summary>
            Number of mistakes made
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Json.JsonCustomFilter.Accuracy">
            <summary>
            Accuracy
            </summary>
        </member>
        <member name="T:BlogEngine.Core.Json.JsonCustomFilterList">
            <summary>
             Handle json-friendly list of custom filters
            </summary>
        </member>
        <member name="F:BlogEngine.Core.Json.JsonCustomFilterList.CustomFilters">
            <summary>
            The custom filters.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Json.JsonCustomFilterList.GetCustomFilters">
            <summary>
            Get list of custom filters
            </summary>
            <returns>List of filters</returns>
        </member>
        <member name="M:BlogEngine.Core.Json.JsonCustomFilterList.ResetCounters(System.String)">
            <summary>
            Reset counters for custom filter
            </summary>
            <param name="filterName">Filter name</param>
            <returns>Json response</returns>
        </member>
        <member name="T:BlogEngine.Core.Json.JsonPackage">
            <summary>
            Json wrapper for package object
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Json.JsonPackage.Id">
            <summary>
            Package Id
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Json.JsonPackage.PackageType">
            <summary>
            Package type
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Json.JsonPackage.Title">
            <summary>
            Title
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Json.JsonPackage.LocalVersion">
            <summary>
            Local Version
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Json.JsonPackage.OnlineVersion">
            <summary>
            Online version
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Json.JsonPackage.Description">
            <summary>
            Desctiption
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Json.JsonPackage.DownloadCount">
            <summary>
            Download count
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Json.JsonPackage.LastUpdated">
            <summary>
            Last updated
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Json.JsonPackage.Website">
            <summary>
            Project Website
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Json.JsonPackage.PackageUrl">
            <summary>
            Package url in the server gallery
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Json.JsonPackage.IconUrl">
            <summary>
            Icon URL
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Json.JsonPackage.Authors">
            <summary>
             Authors
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Json.JsonPackage.Tags">
            <summary>
            Tags
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Json.JsonPackage.Location">
            <summary>
            Package location
            L - local; G - gallery; I - both (installed)
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Json.JsonPackage.Rating">
            <summary>
            Package rating
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Json.JsonPackage.UpdateAvailable">
            <summary>
            If update available in the gallery
            </summary>
        </member>
        <member name="T:BlogEngine.Core.Json.JsonPage">
            <summary>
            Json friendly Page wrapper
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Json.JsonPage.Id">
            <summary>
            Page ID
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Json.JsonPage.Title">
            <summary>
            Page title
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Json.JsonPage.ShowInList">
            <summary>
            Page author
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Json.JsonPage.IsPublished">
            <summary>
            If page is published
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Json.JsonPage.Date">
            <summary>
                Gets or sets the date portion of published date
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Json.JsonPage.Time">
            <summary>
                Gets or sets the time portion of published date
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Json.JsonPage.ParentId">
            <summary>
            Parent page Id
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Json.JsonPage.ParentTitle">
            <summary>
            Parent page title
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Json.JsonPage.HasChildren">
            <summary>
            If has child pages
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Json.JsonPage.CanUserDelete">
            <summary>
            If the current user can delete this page.
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Json.JsonPage.CanUserEdit">
            <summary>
            If the current user can edit this page.
            </summary>
        </member>
        <member name="T:BlogEngine.Core.Json.JsonPages">
            <summary>
            Json friendly list of pages
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Json.JsonPages.GetPages(System.String)">
            <summary>
            Get list of pages
            </summary>
            <param name="type">Published or Drafts</param>
            <returns>List of pages</returns>
        </member>
        <member name="T:BlogEngine.Core.Json.JsonPost">
            <summary>
            Wrapper aroung Post
            used to show post list in the admin
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Json.JsonPost.Id">
            <summary>
            Post ID
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Json.JsonPost.Title">
            <summary>
            Post title
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Json.JsonPost.Author">
            <summary>
            Post author
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Json.JsonPost.Date">
            <summary>
                Gets or sets the date portion of published date
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Json.JsonPost.Time">
            <summary>
                Gets or sets the time portion of published date
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Json.JsonPost.Categories">
            <summary>
            Comma separated list of post categories
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Json.JsonPost.Tags">
            <summary>
            Comma separated list of post tags
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Json.JsonPost.Comments">
            <summary>
            Comment counts for the post
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Json.JsonPost.IsPublished">
            <summary>
            Gets or sets post status
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Json.JsonPost.CanUserDelete">
            <summary>
            If the current user can delete this page.
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Json.JsonPost.CanUserEdit">
            <summary>
            If the current user can edit this page.
            </summary>
        </member>
        <member name="T:BlogEngine.Core.Json.PostType">
            <summary>
            Post type
            </summary>
        </member>
        <member name="F:BlogEngine.Core.Json.PostType.All">
            <summary>
            All posts
            </summary>
        </member>
        <member name="F:BlogEngine.Core.Json.PostType.Draft">
            <summary>
            Drafts
            </summary>
        </member>
        <member name="F:BlogEngine.Core.Json.PostType.Published">
            <summary>
            Published posts
            </summary>
        </member>
        <member name="T:BlogEngine.Core.Json.JsonPosts">
            <summary>
            List of posts
            </summary>
        </member>
        <member name="F:BlogEngine.Core.Json.JsonPosts.currentPage">
            <summary>
            The current page.
            </summary>
        </member>
        <member name="F:BlogEngine.Core.Json.JsonPosts.postCnt">
            <summary>
            The comm cnt.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Json.JsonPosts.GetPosts(System.Int32,System.Int32,System.String,System.String,System.String)">
            <summary>
            Gets post list based on selection for current page
            </summary>
            <param name="page">Current page</param>
            <param name="pageSize">Page Size</param>
            <param name="postType">Selected post type: draft, published or all</param>
            <param name="filter">Secondary filter: category, tag, author or all</param>
            <param name="title">Value selected in secondary filter</param>
            <returns>List of posts</returns>
        </member>
        <member name="M:BlogEngine.Core.Json.JsonPosts.GetPager(System.Int32,System.Int32)">
            <summary>
            Builds pager control for posts page
            </summary>
            <param name="page">Current Page Number</param>
            <param name="pageSize">Page Size</param>
            <returns></returns>
        </member>
        <member name="T:BlogEngine.Core.Json.JsonProfile">
            <summary>
            Author profile for json serialization
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Json.JsonProfile.DisplayName">
            <summary>
            display name
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Json.JsonProfile.FirstName">
            <summary>
            first name
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Json.JsonProfile.MiddleName">
            <summary>
            middle name
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Json.JsonProfile.LastName">
            <summary>
            last name
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Json.JsonProfile.EmailAddress">
            <summary>
            email address
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Json.JsonProfile.Birthday">
            <summary>
            birthday date
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Json.JsonProfile.PhotoUrl">
            <summary>
            photo url
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Json.JsonProfile.Private">
            <summary>
            private/public
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Json.JsonProfile.PhoneMobile">
            <summary>
            mobile phone
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Json.JsonProfile.PhoneMain">
            <summary>
            main phone
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Json.JsonProfile.PhoneFax">
            <summary>
            fax
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Json.JsonProfile.CityTown">
            <summary>
            city
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Json.JsonProfile.RegionState">
            <summary>
            state
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Json.JsonProfile.Country">
            <summary>
            country
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Json.JsonProfile.AboutMe">
            <summary>
            biography
            </summary>
        </member>
        <member name="T:BlogEngine.Core.Json.JsonResponse">
            <summary>
            JSON response.
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Json.JsonResponse.Data">
            <summary>
                Gets or sets Data.
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Json.JsonResponse.Message">
            <summary>
                Gets or sets Message.
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Json.JsonResponse.Success">
            <summary>
                Gets or sets a value indicating whether Success.
            </summary>
        </member>
        <member name="T:BlogEngine.Core.Json.JsonResponse`1">
            <summary>
            JSON response with a strongly typed data.
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Json.JsonResponse`1.Data">
            <summary>
                Gets or sets Data.
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Json.JsonResponse`1.Message">
            <summary>
                Gets or sets Message.
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Json.JsonResponse`1.Success">
            <summary>
                Gets or sets a value indicating whether Success.
            </summary>
        </member>
        <member name="T:BlogEngine.Core.Json.CommentType">
            <summary>
            Comment type.
            </summary>
        </member>
        <member name="F:BlogEngine.Core.Json.CommentType.Pending">
            <summary>
                Pending Comment Type
            </summary>
        </member>
        <member name="F:BlogEngine.Core.Json.CommentType.Approved">
            <summary>
                Approved Comment Type
            </summary>
        </member>
        <member name="F:BlogEngine.Core.Json.CommentType.Pingback">
            <summary>
                Pingbacks and trackbacks Comment Type
            </summary>
        </member>
        <member name="F:BlogEngine.Core.Json.CommentType.Spam">
            <summary>
                Spam Comment Type
            </summary>
        </member>
        <member name="T:BlogEngine.Core.Json.JsonComments">
            <summary>
            List of comments
            </summary>
        </member>
        <member name="F:BlogEngine.Core.Json.JsonComments.currentPage">
            <summary>
            The current page.
            </summary>
        </member>
        <member name="F:BlogEngine.Core.Json.JsonComments.commCnt">
            <summary>
            The comm cnt.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Json.JsonComments.GetComments(BlogEngine.Core.Json.CommentType,System.Int32)">
            <summary>
            List of comments based on type for a single page.
            </summary>
            <param name="commentType">
            The comment type.
            </param>
            <param name="page">
            The current page.
            </param>
            <returns>
            A list of JSON comments.
            </returns>
        </member>
        <member name="M:BlogEngine.Core.Json.JsonComments.GetComments(BlogEngine.Core.Json.CommentType,System.Int32,System.Int32)">
            <summary>
            List of comments based on type for a single page.
            </summary>
            <param name="commentType">
            The comment type.
            </param>
            <param name="pageSize">
            The number of comments per page.
            </param>
            <param name="page">
            The current page.
            </param>
            <returns>
            A list of JSON comments.
            </returns>
        </member>
        <member name="M:BlogEngine.Core.Json.JsonComments.GetComment(System.Guid)">
            <summary>
            Single commnet by ID
            </summary>
            <param name="id">
            Comment id
            </param>
            <returns>
            A JSON Comment
            </returns>
        </member>
        <member name="M:BlogEngine.Core.Json.JsonComments.GetPager(System.Int32)">
            <summary>
            Builds pager control for comments page
            </summary>
            <param name="page">
            Current page
            </param>
            <returns>
            HTML with next and previous buttons
            </returns>
        </member>
        <member name="T:BlogEngine.Core.Json.JsonRole">
            <summary>
            Json friendly Role wrapper
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Json.JsonRole.RoleName">
            <summary>
            Role Name
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Json.JsonRole.IsSystemRole">
            <summary>
            Is System Role
            </summary>
        </member>
        <member name="T:BlogEngine.Core.Json.JsonTag">
            <summary>
            Json Tag
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Json.JsonTag.TagName">
            <summary>
            Tag Name
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Json.JsonTag.TagCount">
            <summary>
            Tag Count
            </summary>
        </member>
        <member name="T:BlogEngine.Core.Json.JsonTrash">
            <summary>
            JSON trash object
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Json.JsonTrash.Id">
            <summary>
                Deleted item ID
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Json.JsonTrash.Title">
            <summary>
                Deleted item title
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Json.JsonTrash.ObjectType">
            <summary>
                Type of deleted object
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Json.JsonTrash.Date">
            <summary>
                Gets or sets the date portion of published date
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Json.JsonTrash.Time">
            <summary>
                Gets or sets the time portion of published date
            </summary>
        </member>
        <member name="T:BlogEngine.Core.Json.TrashType">
            <summary>
            Type of deleted object
            </summary>
        </member>
        <member name="F:BlogEngine.Core.Json.TrashType.All">
            <summary>
                Any deleted object
            </summary>
        </member>
        <member name="F:BlogEngine.Core.Json.TrashType.Comment">
            <summary>
                Deleted comment
            </summary>
        </member>
        <member name="F:BlogEngine.Core.Json.TrashType.Post">
            <summary>
                Deleted post
            </summary>
        </member>
        <member name="F:BlogEngine.Core.Json.TrashType.Page">
            <summary>
                Deleted page
            </summary>
        </member>
        <member name="T:BlogEngine.Core.Json.JsonTrashList">
            <summary>
            List of deleted objects
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Json.JsonTrashList.GetTrash(BlogEngine.Core.Json.TrashType,System.Int32)">
            <summary>
            Paged list of deleted objects
            </summary>
            <param name="trashType">Type of delted object</param>
            <param name="page">Page number</param>
            <returns></returns>
        </member>
        <member name="M:BlogEngine.Core.Json.JsonTrashList.GetPager(System.Int32)">
            <summary>
            Builds pager control for trash list page
            </summary>
            <param name="page">Current Page Number</param>
            <returns></returns>
        </member>
        <member name="M:BlogEngine.Core.Json.JsonTrashList.IsTrashEmpty">
            <summary>
            If trash is empty.
            </summary>
            <returns>True if empty.</returns>
        </member>
        <member name="M:BlogEngine.Core.Json.JsonTrashList.Process(System.String,System.String[])">
            <summary>
            Processes recycle bin actions
            </summary>
            <param name="action">Action</param>
            <param name="vals">Values</param>
            <returns>Response</returns>
        </member>
        <member name="M:BlogEngine.Core.Json.JsonTrashList.PurgeLogfile">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:BlogEngine.Core.Notes.QuickNote">
            <summary>
            Quick Note
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Notes.QuickNote.#ctor">
            <summary>
            constructor
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Notes.QuickNote.Id">
            <summary>
            Note ID
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Notes.QuickNote.BlogId">
            <summary>
            Blog ID
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Notes.QuickNote.Note">
            <summary>
            Note content
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Notes.QuickNote.Author">
            <summary>
            Author
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Notes.QuickNote.Updated">
            <summary>
            Date and time updated
            </summary>
        </member>
        <member name="T:BlogEngine.Core.Notes.QuickNotes">
            <summary>
            Quick notes
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Notes.QuickNotes.#ctor(System.String)">
            <summary>
            Constructs a QuickNotes for the specified user.
            </summary>
            <param name="user">The user.</param>
        </member>
        <member name="M:BlogEngine.Core.Notes.QuickNotes.Note(System.Guid)">
            <summary>
            The note
            </summary>
            <param name="id">Note ID</param>
            <returns>Quick note object</returns>
        </member>
        <member name="M:BlogEngine.Core.Notes.QuickNotes.SaveNote(System.String,System.String)">
            <summary>
            Save note to collection
            and data storage
            </summary>
            <param name="id">Id</param>
            <param name="note">Note</param>
        </member>
        <member name="M:BlogEngine.Core.Notes.QuickNotes.SaveSettings(System.String,System.String)">
            <summary>
            Save settings
            </summary>
            <param name="category">Default post category id</param>
            <param name="tags">Default tags</param>
        </member>
        <member name="M:BlogEngine.Core.Notes.QuickNotes.Delete(System.String)">
            <summary>
            Mark note as deleted
            </summary>
            <param name="id">ID</param>
            <returns>True if deleted</returns>
        </member>
        <member name="P:BlogEngine.Core.Notes.QuickNotes.Notes">
            <summary>
            Collection of notes
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Notes.QuickNotes.Settings">
            <summary>
            Settings for quick notes
            </summary>
        </member>
        <member name="T:BlogEngine.Core.Notes.QuickSetting">
            <summary>
            Settings
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Notes.QuickSetting.BlogId">
            <summary>
            Blog ID
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Notes.QuickSetting.Author">
            <summary>
            Each author can have individual settings
            driving quick notes behavior
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Notes.QuickSetting.SettingName">
            <summary>
            Setting name
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Notes.QuickSetting.SettingValue">
            <summary>
            Setting value
            </summary>
        </member>
        <member name="T:BlogEngine.Core.Notes.QuickSettings">
            <summary>
            Settings for quick notes
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Notes.QuickSettings.#ctor(System.String)">
            <summary>
            Quick settings
            </summary>
            <param name="user"></param>
        </member>
        <member name="M:BlogEngine.Core.Notes.QuickSettings.Save(BlogEngine.Core.Notes.QuickSetting)">
            <summary>
            Save to collection (add or replace)
            </summary>
            <param name="setting">Setting</param>
        </member>
        <member name="P:BlogEngine.Core.Notes.QuickSettings.Settings">
            <summary>
            List of settings
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Notes.QuickSettings.Categories">
            <summary>
            List of categories
            </summary>
        </member>
        <member name="T:BlogEngine.Core.Packaging.Constants">
            <summary>
            Incapsulate all packaging constants
            </summary>
        </member>
        <member name="F:BlogEngine.Core.Packaging.Constants.GalleryUrl">
            <summary>
            Root allery url
            </summary>
        </member>
        <member name="F:BlogEngine.Core.Packaging.Constants.GalleryAppUrl">
            <summary>
            Gallery application url
            </summary>
        </member>
        <member name="F:BlogEngine.Core.Packaging.Constants.Theme">
            <summary>
            Package type Theme
            </summary>
        </member>
        <member name="F:BlogEngine.Core.Packaging.Constants.Widget">
            <summary>
            Package type Widget
            </summary>
        </member>
        <member name="F:BlogEngine.Core.Packaging.Constants.Extension">
            <summary>
            Package type Extension
            </summary>
        </member>
        <member name="F:BlogEngine.Core.Packaging.Constants.PageSize">
            <summary>
            Page size for admin/plugins lists
            </summary>
        </member>
        <member name="F:BlogEngine.Core.Packaging.Constants.InstalledPackagesXml">
            <summary>
            Installed packages XML
            </summary>
        </member>
        <member name="F:BlogEngine.Core.Packaging.Constants.InstalledPackageFilesXml">
            <summary>
            Installed package files XML
            </summary>
        </member>
        <member name="F:BlogEngine.Core.Packaging.Constants.CacheKey">
            <summary>
            Cache key for gallery packages
            </summary>
        </member>
        <member name="T:BlogEngine.Core.Packaging.FileSystem">
            <summary>
            Class for packaging IO
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Packaging.FileSystem.Load(System.Collections.Generic.List{BlogEngine.Core.Json.JsonPackage})">
            <summary>
            
            </summary>
            <param name="packages"></param>
        </member>
        <member name="M:BlogEngine.Core.Packaging.FileSystem.InstallPackage(System.String,System.String)">
            <summary>
            Copy uncompressed package files
            to application directories
            </summary>
            <param name="pkgId">Package Id</param>
            <param name="version">Package Version</param>
        </member>
        <member name="M:BlogEngine.Core.Packaging.FileSystem.UninstallPackage(System.String)">
            <summary>
            Remove package files
            </summary>
            <param name="pkgId">Package Id</param>
        </member>
        <member name="T:BlogEngine.Core.Packaging.Gallery">
            <summary>
            Online gallery
            </summary>
        </member>
        <member name="F:BlogEngine.Core.Packaging.Gallery.GalleryPager">
            <summary>
            Gallery pager
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Packaging.Gallery.Load(System.Collections.Generic.List{BlogEngine.Core.Json.JsonPackage})">
            <summary>
            
            </summary>
            <param name="packages"></param>
        </member>
        <member name="M:BlogEngine.Core.Packaging.Gallery.ConvertVersion(System.String)">
            <summary>
            Convert version from string to int for comparison
            </summary>
            <param name="version">string version</param>
            <returns>int version</returns>
        </member>
        <member name="M:BlogEngine.Core.Packaging.Gallery.PackageUrl(System.String,System.String)">
            <summary>
            Package URL
            </summary>
            <param name="pkgType">Package Type</param>
            <param name="pkgId">Package ID</param>
            <returns></returns>
        </member>
        <member name="T:BlogEngine.Core.Packaging.Gallery.OrderType">
            <summary>
            Type of sort order
            </summary>
        </member>
        <member name="F:BlogEngine.Core.Packaging.Gallery.OrderType.Downloads">
            <summary>
            Most downloaded
            </summary>
        </member>
        <member name="F:BlogEngine.Core.Packaging.Gallery.OrderType.Newest">
            <summary>
            Newest
            </summary>
        </member>
        <member name="F:BlogEngine.Core.Packaging.Gallery.OrderType.Rating">
            <summary>
            Heighest rated
            </summary>
        </member>
        <member name="F:BlogEngine.Core.Packaging.Gallery.OrderType.Alphanumeric">
            <summary>
            Alphabetical
            </summary>
        </member>
        <member name="T:BlogEngine.Core.Packaging.InstalledPackage">
            <summary>
            Locally installed gallery package
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Packaging.InstalledPackage.PackageId">
            <summary>
            Package ID
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Packaging.InstalledPackage.Version">
            <summary>
            Installed package Version
            </summary>
        </member>
        <member name="T:BlogEngine.Core.Packaging.Installer">
            <summary>
            Responsible for install/uninstall operations
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Packaging.Installer.InstallPackage(System.String)">
            <summary>
            Install package
            </summary>
            <param name="pkgId"></param>
        </member>
        <member name="M:BlogEngine.Core.Packaging.Installer.UninstallPackage(System.String)">
            <summary>
            Uninstall package
            </summary>
            <param name="pkgId"></param>
            <returns></returns>
        </member>
        <member name="M:BlogEngine.Core.Packaging.Installer.MarkAsInstalled(System.Collections.Generic.List{BlogEngine.Core.Json.JsonPackage})">
            <summary>
            Load installed packages
            </summary>
            <param name="packages"></param>
        </member>
        <member name="T:BlogEngine.Core.Packaging.PackageFile">
            <summary>
             Installed package
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Packaging.PackageFile.PackageId">
            <summary>
             Package ID
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Packaging.PackageFile.FileOrder">
            <summary>
            Order in wich files were created
            To uninstall need to go reverse order
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Packaging.PackageFile.FilePath">
            <summary>
            File path
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Packaging.PackageFile.IsDirectory">
            <summary>
            True if file is directory
            </summary>
        </member>
        <member name="T:BlogEngine.Core.Packaging.PackageRepository">
            <summary>
            Package repository
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Packaging.PackageRepository.FromGallery(System.String,System.Int32,BlogEngine.Core.Packaging.Gallery.OrderType,System.String)">
            <summary>
            Returns list of packages from online gallery for a single page
            </summary>
            <param name="pkgType">Theme, Widget or Extension</param>
            <param name="page">Current page</param>
            <param name="sortOrder">Order - newest, most downloaded etc.</param>
            <param name="searchVal">Search term if it is search request</param>
            <returns>List of packages</returns>
        </member>
        <member name="M:BlogEngine.Core.Packaging.PackageRepository.LocalPackages(System.String)">
            <summary>
            Returns list of local packages from repository
            For reference:
            G - package exists only in the online gallery
            I - installed from gallery, exists both in gallery and locally
            L - local, only exists locally
            </summary>
            <param name="pkgType">Package type</param>
            <returns>List of packages</returns>
        </member>
        <member name="M:BlogEngine.Core.Packaging.PackageRepository.GetPackage(System.String)">
            <summary>
            Package by ID
            </summary>
            <param name="pkgId">Package ID</param>
            <returns>Package</returns>
        </member>
        <member name="P:BlogEngine.Core.Packaging.PackageRepository.CachedPackages">
            <summary>
            Local "packages" - list of extensions,
            themes and widgets folders
            </summary>
        </member>
        <member name="T:BlogEngine.Core.Packaging.PackagingSource">
            <summary>
            Packaging source
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Packaging.PackagingSource.Id">
            <summary>
            Feed id
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Packaging.PackagingSource.FeedTitle">
            <summary>
            Feed title
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Packaging.PackagingSource.FeedUrl">
            <summary>
            Feed url
            </summary>
        </member>
        <member name="T:BlogEngine.Core.Packaging.Pager">
            <summary>
            Gallery pager
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Packaging.Pager.#ctor(System.Int32,System.Int32,System.String)">
            <summary>
            Pager
            </summary>
            <param name="currentPage">Current page</param>
            <param name="itemCount">Item count</param>
            <param name="pkgType">Package type</param>
        </member>
        <member name="P:BlogEngine.Core.Packaging.Pager.CurrentPage">
            <summary>
            Current page
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Packaging.Pager.PageItems">
            <summary>
            Pager items
            </summary>
        </member>
        <member name="T:BlogEngine.Core.Packaging.PagerItem">
            <summary>
            Page Item
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Packaging.PagerItem.#ctor(System.Int32,System.Boolean,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="pageNumber"></param>
            <param name="current"></param>
            <param name="pkgType"></param>
        </member>
        <member name="P:BlogEngine.Core.Packaging.PagerItem.PageNumber">
            <summary>
            Page number
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Packaging.PagerItem.Current">
            <summary>
            Current selected page
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Packaging.PagerItem.PageLink">
            <summary>
            Page link
            </summary>
        </member>
        <member name="T:BlogEngine.Core.Ping.Manager">
            <summary>
            Manages to send out trackbacks and then pingbacks if trackbacks aren't supported by the linked site.
            </summary>
        </member>
        <member name="F:BlogEngine.Core.Ping.Manager.TrackbackLinkRegex">
            <summary>
                Regex used to find the trackback link on a remote web page.
            </summary>
        </member>
        <member name="F:BlogEngine.Core.Ping.Manager.UrlsRegex">
            <summary>
                Regex used to find all hyperlinks.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Ping.Manager.Send(BlogEngine.Core.IPublishable,System.Uri)">
            <summary>
            Sends the trackback or pingback message.
                <remarks>
            It will try to send a trackback message first, and if the refered web page
                    doesn't support trackbacks, a pingback is sent.
                </remarks>
            </summary>
            <param name="item">
            The publishable item.
            </param>
            <param name="itemUrl">
            The item Url.
            </param>
        </member>
        <member name="M:BlogEngine.Core.Ping.Manager.GetTrackBackUrlFromPage(System.String)">
            <summary>
            Examines the web page source code to retrieve the trackback link from the RDF.
            </summary>
            <param name="input">The input.</param>
            <returns>The trackback Uri</returns>
        </member>
        <member name="M:BlogEngine.Core.Ping.Manager.GetUrlsFromContent(System.String)">
            <summary>
            Gets all the URLs from the specified string.
            </summary>
            <param name="content">The content.</param>
            <returns>A list of Uri</returns>
        </member>
        <member name="T:BlogEngine.Core.Ping.Trackback">
            <summary>
            The trackback.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Ping.Trackback.Send(BlogEngine.Core.Ping.TrackbackMessage)">
            <summary>
            The send.
            </summary>
            <param name="message">
            </param>
            <returns>
            The send.
            </returns>
        </member>
        <member name="M:BlogEngine.Core.Ping.Trackback.OnSending(System.Uri)">
            <summary>
            Called when [sending].
            </summary>
            <param name="url">The URL.</param>
        </member>
        <member name="M:BlogEngine.Core.Ping.Trackback.OnSent(System.Uri)">
            <summary>
            Called when [sent].
            </summary>
            <param name="url">The URL.</param>
        </member>
        <member name="E:BlogEngine.Core.Ping.Trackback.Sending">
            <summary>
                Occurs just before a trackback is sent.
            </summary>
        </member>
        <member name="E:BlogEngine.Core.Ping.Trackback.Sent">
            <summary>
                Occurs when a trackback has been sent
            </summary>
        </member>
        <member name="T:BlogEngine.Core.Ping.TrackbackMessage">
            <summary>
            The trackback message.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Ping.TrackbackMessage.#ctor(BlogEngine.Core.IPublishable,System.Uri,System.Uri)">
            <summary>
            Initializes a new instance of the <see cref="T:BlogEngine.Core.Ping.TrackbackMessage"/> class.
            </summary>
            <param name="item">
            The publishable item.
            </param>
            <param name="urlToNotifyTrackback">
            The URL to notify trackback.
            </param>
            <param name="itemUrl">
            The item Url.
            </param>
        </member>
        <member name="M:BlogEngine.Core.Ping.TrackbackMessage.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="P:BlogEngine.Core.Ping.TrackbackMessage.BlogName">
            <summary>
                Gets or sets the name of the blog.
            </summary>
            <value>The name of the blog.</value>
        </member>
        <member name="P:BlogEngine.Core.Ping.TrackbackMessage.Excerpt">
            <summary>
                Gets or sets the excerpt.
            </summary>
            <value>The excerpt.</value>
        </member>
        <member name="P:BlogEngine.Core.Ping.TrackbackMessage.PostUrl">
            <summary>
                Gets or sets the post URL.
            </summary>
            <value>The post URL.</value>
        </member>
        <member name="P:BlogEngine.Core.Ping.TrackbackMessage.Title">
            <summary>
                Gets or sets the title.
            </summary>
            <value>The title.</value>
        </member>
        <member name="P:BlogEngine.Core.Ping.TrackbackMessage.UrlToNotifyTrackback">
            <summary>
                Gets or sets the URL to notify trackback.
            </summary>
            <value>The URL to notify trackback.</value>
        </member>
        <member name="T:BlogEngine.Core.Providers.BlogFileSystemProvider">
            <summary>
            Abstract base class for managing all FileSystem methods.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Providers.BlogFileSystemProvider.ClearFileSystem">
            <summary>
            Clears a file system. This will delete all files and folders recursivly.
            </summary>
            <remarks>
            Handle with care... Possibly an internal method?
            </remarks>
        </member>
        <member name="M:BlogEngine.Core.Providers.BlogFileSystemProvider.CreateDirectory(System.String)">
            <summary>
            Creates a directory at a specific path
            </summary>
            <param name="VirtualPath">The virtual path to be created</param>
            <returns>the new Directory object created</returns>
            <remarks>
            Virtual path is the path starting from the /files/ containers
            The entity is created against the current blog id
            </remarks>
        </member>
        <member name="M:BlogEngine.Core.Providers.BlogFileSystemProvider.DeleteDirectory(System.String)">
            <summary>
            Deletes a spefic directory from a virtual path
            </summary>
            <param name="VirtualPath">The path to delete</param>
            <remarks>
            Virtual path is the path starting from the /files/ containers
            The entity is queried against to current blog id
            </remarks>
        </member>
        <member name="M:BlogEngine.Core.Providers.BlogFileSystemProvider.DirectoryExists(System.String)">
            <summary>
            Returns wether or not the specific directory by virtual path exists
            </summary>
            <param name="VirtualPath">The virtual path to query</param>
            <returns>boolean</returns>
        </member>
        <member name="M:BlogEngine.Core.Providers.BlogFileSystemProvider.GetDirectory(System.String)">
            <summary>
            gets a directory by the virtual path, creates the directory path if it does not exist
            </summary>
            <param name="VirtualPath">the virtual path</param>
            <returns>the directory object</returns>
        </member>
        <member name="M:BlogEngine.Core.Providers.BlogFileSystemProvider.GetDirectory(System.String,System.Boolean)">
            <summary>
            gets a directory by the virtual path, with a flag to create if not found
            </summary>
            <param name="VirtualPath">The virtual path</param>
            <param name="CreateNew">bool yes \ no to create the director.</param>
            <returns>the directory object, or null if the create flag is set to false</returns>
        </member>
        <member name="M:BlogEngine.Core.Providers.BlogFileSystemProvider.GetDirectory(BlogEngine.Core.FileSystem.Directory,System.String[])">
            <summary>
            gets a directory by a basedirectory and a string array of sub path tree, directory will be created if not found
            </summary>
            <param name="BaseDirectory">the base directory object</param>
            <param name="SubPath">the params of sub path</param>
            <returns>the directory found</returns>
        </member>
        <member name="M:BlogEngine.Core.Providers.BlogFileSystemProvider.GetDirectory(BlogEngine.Core.FileSystem.Directory,System.Boolean,System.String[])">
            <summary>
            gets a directory by a basedirectory and a string array of sub path tree
            </summary>
            <param name="BaseDirectory">the base directory object</param>
            <param name="CreateNew">if set will create the directory structure</param>
            <param name="SubPath">the params of sub path</param>
            <returns>the directory found, or null for no directory found</returns>
        </member>
        <member name="M:BlogEngine.Core.Providers.BlogFileSystemProvider.GetDirectories(BlogEngine.Core.FileSystem.Directory)">
            <summary>
            gets all the directories underneath a base directory. Only searches one level.
            </summary>
            <param name="BaseDirectory">the base directory</param>
            <returns>collection of Directory objects</returns>
        </member>
        <member name="M:BlogEngine.Core.Providers.BlogFileSystemProvider.GetFiles(BlogEngine.Core.FileSystem.Directory)">
            <summary>
            gets all the files in a directory, only searches one level
            </summary>
            <param name="BaseDirectory">the base directory</param>
            <returns>collection of File objects</returns>
        </member>
        <member name="M:BlogEngine.Core.Providers.BlogFileSystemProvider.GetFile(System.String)">
            <summary>
            gets a specific file by virtual path
            </summary>
            <param name="VirtualPath">the virtual path of the file</param>
            <returns></returns>
        </member>
        <member name="M:BlogEngine.Core.Providers.BlogFileSystemProvider.FileExists(System.String)">
            <summary>
            boolean wether a file exists by its virtual path
            </summary>
            <param name="VirtualPath">the virtual path</param>
            <returns>boolean</returns>
        </member>
        <member name="M:BlogEngine.Core.Providers.BlogFileSystemProvider.DeleteFile(System.String)">
            <summary>
            deletes a file by virtual path
            </summary>
            <param name="VirtualPath">virtual path</param>
        </member>
        <member name="M:BlogEngine.Core.Providers.BlogFileSystemProvider.UploadFile(System.Byte[],System.String,BlogEngine.Core.FileSystem.Directory)">
            <summary>
            uploads a file to the provider container
            </summary>
            <param name="FileBinary">file contents as byte array</param>
            <param name="FileName">the file name</param>
            <param name="BaseDirectory">directory object that is the owner</param>
            <returns>the new file object</returns>
        </member>
        <member name="M:BlogEngine.Core.Providers.BlogFileSystemProvider.UploadFile(System.Byte[],System.String,BlogEngine.Core.FileSystem.Directory,System.Boolean)">
            <summary>
            uploads a file to the provider container
            </summary>
            <param name="FileBinary">the contents of the file as a byte array</param>
            <param name="FileName">the file name</param>
            <param name="BaseDirectory">the directory object that is the owner</param>
            <param name="Overwrite">boolean wether to overwrite the file if it exists.</param>
            <returns>the new file object</returns>
        </member>
        <member name="M:BlogEngine.Core.Providers.BlogFileSystemProvider.GetFileContents(BlogEngine.Core.FileSystem.File)">
            <summary>
            gets the file contents via Lazy load, however in the DbProvider the Contents are loaded when the initial object is created to cut down on DbReads
            </summary>
            <param name="BaseFile">the baseFile object to fill</param>
            <returns>the original file object</returns>
        </member>
        <member name="M:BlogEngine.Core.Providers.BlogFileSystemProvider.ImageThumbnail(System.String,System.Int32)">
            <summary>
            Subclasses may override this method to generate a thumbnail image at a maximum size.
            </summary>
            <param name="VirtualPath">The virtual path of the image</param>
            <param name="MaximumSize">The maximum size for the image</param>
            <returns>The image with the thumbnail contents</returns>
        </member>
        <member name="T:BlogEngine.Core.Providers.BlogFileSystemProviderCollection">
            <summary>
            A collection class for BlogFileSystemProviders.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Providers.BlogFileSystemProviderCollection.Add(System.Configuration.Provider.ProviderBase)">
            <summary>
            Add a provider to the collection.
            </summary>
            <param name="provider">
            The provider.
            </param>
        </member>
        <member name="P:BlogEngine.Core.Providers.BlogFileSystemProviderCollection.Item(System.String)">
            <summary>
                Gets a provider by its name.
            </summary>
            <param name="name">The name of the provider.</param>
        </member>
        <member name="T:BlogEngine.Core.Providers.BlogFileSystemProviderSection">
            <summary>
            Enables a custom configuration section for the BE provider in Web.config.
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Providers.BlogFileSystemProviderSection.DefaultProvider">
            <summary>
                Gets or sets the name of the default provider
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Providers.BlogFileSystemProviderSection.Providers">
            <summary>
                Gets a collection of registered providers.
            </summary>
        </member>
        <member name="T:BlogEngine.Core.Providers.BlogProviderCollection">
            <summary>
            A collection of all registered providers.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Providers.BlogProviderCollection.Add(System.Configuration.Provider.ProviderBase)">
            <summary>
            Add a provider to the collection.
            </summary>
            <param name="provider">
            The provider.
            </param>
        </member>
        <member name="P:BlogEngine.Core.Providers.BlogProviderCollection.Item(System.String)">
            <summary>
                Gets a provider by its name.
            </summary>
            <param name="name">The name of the provider.</param>
        </member>
        <member name="T:BlogEngine.Core.Providers.CacheProvider.CacheBase">
            <summary>
            Cache Base
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Providers.CacheProvider.CacheBase.Add(System.String,System.Object,System.Web.Caching.CacheDependency,System.DateTime,System.TimeSpan,System.Web.Caching.CacheItemPriority,System.Web.Caching.CacheItemRemovedCallback)">
            <summary>
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <param name="dependencies"></param>
            <param name="absoluteExpiration"></param>
            <param name="slidingExpiration"></param>
            <param name="priority"></param>
            <param name="onRemoveCallback"></param>
            <returns></returns>
        </member>
        <member name="M:BlogEngine.Core.Providers.CacheProvider.CacheBase.Get(System.String)">
            <summary>
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:BlogEngine.Core.Providers.CacheProvider.CacheBase.GetEnumerator">
            <summary>
            </summary>
            <returns></returns>
        </member>
        <member name="M:BlogEngine.Core.Providers.CacheProvider.CacheBase.Insert(System.String,System.Object)">
            <summary>
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:BlogEngine.Core.Providers.CacheProvider.CacheBase.Insert(System.String,System.Object,System.Web.Caching.CacheDependency)">
            <summary>
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <param name="dependencies"></param>
        </member>
        <member name="M:BlogEngine.Core.Providers.CacheProvider.CacheBase.Insert(System.String,System.Object,System.Web.Caching.CacheDependency,System.DateTime,System.TimeSpan)">
            <summary>
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <param name="dependencies"></param>
            <param name="absoluteExpiration"></param>
            <param name="slidingExpiration"></param>
        </member>
        <member name="M:BlogEngine.Core.Providers.CacheProvider.CacheBase.Insert(System.String,System.Object,System.Web.Caching.CacheDependency,System.DateTime,System.TimeSpan,System.Web.Caching.CacheItemPriority,System.Web.Caching.CacheItemRemovedCallback)">
            <summary>
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <param name="dependencies"></param>
            <param name="absoluteExpiration"></param>
            <param name="slidingExpiration"></param>
            <param name="priority"></param>
            <param name="onRemoveCallback"></param>
        </member>
        <member name="M:BlogEngine.Core.Providers.CacheProvider.CacheBase.Remove(System.String)">
            <summary>
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="P:BlogEngine.Core.Providers.CacheProvider.CacheBase.Count">
            <summary>
            Count
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Providers.CacheProvider.CacheBase.EffectivePercentagePhysicalMemoryLimit">
            <summary>
            Physical Memory Limit
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Providers.CacheProvider.CacheBase.EffectivePrivateBytesLimit">
            <summary>
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Providers.CacheProvider.CacheBase.Item(System.String)">
            <summary>
            </summary>
            <param name="key"></param>
        </member>
        <member name="T:BlogEngine.Core.Providers.CacheProvider.CacheProvider">
            <summary>
            Abstracts away access to the cache.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Providers.CacheProvider.CacheProvider.#ctor(System.Web.Caching.Cache)">
            <summary>
            
            </summary>
            <param name="cache"></param>
        </member>
        <member name="M:BlogEngine.Core.Providers.CacheProvider.CacheProvider.Add(System.String,System.Object,System.Web.Caching.CacheDependency,System.DateTime,System.TimeSpan,System.Web.Caching.CacheItemPriority,System.Web.Caching.CacheItemRemovedCallback)">
            <summary>
            Adds the specified item to the cache.
            </summary>
            <param name="key">The cache key used to reference the item. It will be prefixed with the current blog instance's id.</param>
            <param name="value">The item to be added to the cache.</param>
            <param name="dependencies">The file or cache key dependencies for the item. When any dependency changes, the object becomes invalid and is removed from the cache. If there are no dependencies, this parameter contains null.</param>
            <param name="absoluteExpiration">The time at which the added object expires and is removed from the cache. If you are using sliding expiration, the absoluteExpiration parameter must be System.Web.Caching.Cache.NoAbsoluteExpiration.</param>
            <param name="slidingExpiration">The interval between the time the added object was last accessed and the time at which that object expires. If this value is the equivalent of 20 minutes, the object expires and is removed from the cache 20 minutes after it is last accessed. If you are using absolute expiration, the slidingExpiration parameter must be System.Web.Caching.Cache.NoSlidingExpiration.</param>
            <param name="priority">The relative cost of the object, as expressed by the System.Web.Caching.CacheItemPriority enumeration. The cache uses this value when it evicts objects; objects with a lower cost are removed from the cache before objects with a higher cost.</param>
            <param name="onRemoveCallback">A delegate that, if provided, is called when an object is removed from the cache. You can use this to notify applications when their objects are deleted from the cache.</param>
            <returns>An object that represents the item that was added if the item was previously stored in the cache; otherwise, null.</returns>
        </member>
        <member name="M:BlogEngine.Core.Providers.CacheProvider.CacheProvider.Get(System.String)">
            <summary>
            Retrieves the specified item from the cache.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:BlogEngine.Core.Providers.CacheProvider.CacheProvider.GetEnumerator">
            <summary>
            Retrieves a dictionary enumerator used to iterate through the key settings and their values contained in the cache.
            </summary>
            <returns></returns>
        </member>
        <member name="M:BlogEngine.Core.Providers.CacheProvider.CacheProvider.Insert(System.String,System.Object)">
            <summary>
            Inserts an item into the cache with a cache key to reference its location, using default values provided by the System.Web.Caching.CacheItemPriority enumeration.
            </summary>
            <param name="key">The cache key used to reference the item. It will be prefixed with the current blog instance's id.</param>
            <param name="value">The object to be inserted into the cache.</param>
        </member>
        <member name="M:BlogEngine.Core.Providers.CacheProvider.CacheProvider.Insert(System.String,System.Object,System.Web.Caching.CacheDependency)">
            <summary>
            Inserts an object into the cache that has file or key dependencies.
            </summary>
            <param name="key">The cache key used to reference the item. It will be prefixed with the current blog instance's id.</param>
            <param name="value">The object to be inserted into the cache.</param>
            <param name="dependencies">The file or cache key dependencies for the inserted object. When any dependency changes, the object becomes invalid and is removed from the cache. If there are no dependencies, this parameter contains null.</param>
        </member>
        <member name="M:BlogEngine.Core.Providers.CacheProvider.CacheProvider.Insert(System.String,System.Object,System.Web.Caching.CacheDependency,System.DateTime,System.TimeSpan)">
            <summary>
            Inserts an object into the cache with dependencies and expiration policies.
            </summary>
            <param name="key">The cache key used to reference the item. It will be prefixed with the current blog instance's id.</param>
            <param name="value">The object to be inserted into the cache.</param>
            <param name="dependencies">The file or cache key dependencies for the inserted object. When any dependency changes, the object becomes invalid and is removed from the cache. If there are no dependencies, this parameter contains null.</param>
            <param name="absoluteExpiration">The time at which the added object expires and is removed from the cache. If you are using sliding expiration, the absoluteExpiration parameter must be System.Web.Caching.Cache.NoAbsoluteExpiration.</param>
            <param name="slidingExpiration">The interval between the time the added object was last accessed and the time at which that object expires. If this value is the equivalent of 20 minutes, the object expires and is removed from the cache 20 minutes after it is last accessed. If you are using absolute expiration, the slidingExpiration parameter must be System.Web.Caching.Cache.NoSlidingExpiration.</param>
        </member>
        <member name="M:BlogEngine.Core.Providers.CacheProvider.CacheProvider.Insert(System.String,System.Object,System.Web.Caching.CacheDependency,System.DateTime,System.TimeSpan,System.Web.Caching.CacheItemPriority,System.Web.Caching.CacheItemRemovedCallback)">
            <summary>
            Inserts an object into the cache object together with dependencies, expiration policies, and a delegate that you can use to notify the application before the item is removed from the cache.
            </summary>
            <param name="key">The cache key used to reference the item. It will be prefixed with the current blog instance's id.</param>
            <param name="value">The object to be inserted into the cache.</param>
            <param name="dependencies">The file or cache key dependencies for the inserted object. When any dependency changes, the object becomes invalid and is removed from the cache. If there are no dependencies, this parameter contains null.</param>
            <param name="absoluteExpiration">The time at which the added object expires and is removed from the cache. If you are using sliding expiration, the absoluteExpiration parameter must be System.Web.Caching.Cache.NoAbsoluteExpiration.</param>
            <param name="slidingExpiration">The interval between the time the added object was last accessed and the time at which that object expires. If this value is the equivalent of 20 minutes, the object expires and is removed from the cache 20 minutes after it is last accessed. If you are using absolute expiration, the slidingExpiration parameter must be System.Web.Caching.Cache.NoSlidingExpiration.</param>
            <param name="priority">The cost of the object relative to other items stored in the cache, as expressed by the System.Web.Caching.CacheItemPriority enumeration. This value is used by the cache when it evicts objects; objects with a lower cost are removed from the cache before objects with a higher cost.</param>
            <param name="onRemoveCallback">A delegate that, if provided, will be called when an object is removed from the cache. You can use this to notify applications when their objects are deleted from the cache.</param>
        </member>
        <member name="M:BlogEngine.Core.Providers.CacheProvider.CacheProvider.Remove(System.String)">
            <summary>
            Removes the specified item from the application's cache object.
            </summary>
            <param name="key">The cache key used to reference the item. It will be prefixed with the current blog instance's id.</param>
            <returns></returns>
        </member>
        <member name="P:BlogEngine.Core.Providers.CacheProvider.CacheProvider.Count">
            <summary>
            Gets the number of items stored in the cache.
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Providers.CacheProvider.CacheProvider.EffectivePercentagePhysicalMemoryLimit">
            <summary>
            Gets the percentage of physical memory that can be consumed by an application before ASP.NET starts removing items from the cache.
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Providers.CacheProvider.CacheProvider.EffectivePrivateBytesLimit">
            <summary>
            Gets the number of bytes available for the cache.
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Providers.CacheProvider.CacheProvider.Item(System.String)">
            <summary>
            Gets or sets the cache item at the specified key.
            </summary>
            <param name="key">The cache key used to reference the item. It will be prefixed with the current blog instance's id.</param>
            <returns>The specified cache item.</returns>
        </member>
        <member name="T:BlogEngine.Core.Providers.DbConnectionHelper">
            <summary>
            Helper class for working with DbConnections.
            </summary>
            <remarks>
            
            This class is meant to reduce the amount of repeated code in database provider classes by pulling all the common actions
            into one spot. This should remove the many repetitive null checks on connections/parameters.
            
            This class handles the creation of DbConnection, setting its connection string, and opening the connection if possible.
            
            Usage is simple:
            using(var helper = new ConnectionHelper(provider)) {
                if (helper.HasConnection) {
                    // do stuff
                }
            }
            
            Note: This class throws a NullReferenceException if its Provider.CreateParameter() method returns a null object.
            All of the methods in the DbBlogProvider class require parameterized queries, and previously each parameter
            created was being checked for null before proceeding. It's better to fail fast in this instance, to help creaters
            of custom implementations figure out what's wrong.
            
            </remarks>
        </member>
        <member name="M:BlogEngine.Core.Providers.DbConnectionHelper.#ctor(System.Configuration.ConnectionStringSettings)">
            <summary>
            Creates a new DbConnectionHelper instance from the given ConnectionStringSettings.
            </summary>
            <param name="settings"></param>
        </member>
        <member name="M:BlogEngine.Core.Providers.DbConnectionHelper.#ctor(System.String,System.String)">
            <summary>
            Creates a new DbConnectionHelper instance from the given provider name and database connection string..
            </summary>
            <param name="providerName"></param>
            <param name="connectionString"></param>
        </member>
        <member name="M:BlogEngine.Core.Providers.DbConnectionHelper.CreateCommand">
            <summary>
            Uses this ConnectionHelper instance's connection to create and return a new DbCommand instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:BlogEngine.Core.Providers.DbConnectionHelper.CreateTextCommand(System.String)">
            <summary>
            Users this ConnectionHelper instance's connection to create and return a new DbCommand with the given command text. CommandType is automatically set to CommandType.Text.
            </summary>
            <param name="commandText"></param>
            <returns></returns>
        </member>
        <member name="M:BlogEngine.Core.Providers.DbConnectionHelper.CreateParameter(System.String,System.Object)">
            <summary>
            Uses this ConnectionHelper's Provider to create a DbParameter instance with the given parameter name and value.
            </summary>
            <param name="parameterName">The name of the parameter.</param>
            <param name="value">The value of the parameter.</param>
            <returns></returns>
        </member>
        <member name="M:BlogEngine.Core.Providers.DbConnectionHelper.CreateParameter(System.String,System.Object,System.Data.DbType)">
            <summary>
            Uses this ConnectionHelper's Provider to create a DbParameter instance with the given parameter name and value.
            </summary>
            <param name="parameterName">The name of the parameter.</param>
            <param name="value">The value of the parameter.</param>
            <param name="dbType">The DB type.</param>
            <returns></returns>
        </member>
        <member name="M:BlogEngine.Core.Providers.DbConnectionHelper.CreateParameter(System.String,System.Object,System.Nullable{System.Data.DbType},System.Nullable{System.Int32})">
            <summary>
            Uses this ConnectionHelper's Provider to create a DbParameter instance with the given parameter name and value.
            </summary>
            <param name="parameterName">The name of the parameter.</param>
            <param name="value">The value of the parameter.</param>
            <param name="dbType">The DB type.</param>
            <param name="size">The size/length of the parameter.</param>
            <returns></returns>
        </member>
        <member name="M:BlogEngine.Core.Providers.DbConnectionHelper.Dispose">
            <summary>
            Disposes this DbConnectionHelper and its underlying connection.
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Providers.DbConnectionHelper.Connection">
            <summary>
            Returns the DbConnection of this instance.
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Providers.DbConnectionHelper.HasConnection">
            <summary>
            Gets whether the Connection of this ConnectionHelper instance is null.
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Providers.DbConnectionHelper.Provider">
            <summary>
            Gets the DbProviderFactory used by this ConnectionHelper instance.
            </summary>
        </member>
        <member name="T:BlogEngine.Core.Providers.DbFileSystemProvider">
            <summary>
            DbBlogProvider Parial class for manageing all FileSystem methods
            </summary>
        </member>
        <member name="F:BlogEngine.Core.Providers.DbFileSystemProvider.connStringName">
            <summary>
            The conn string name.
            </summary>
        </member>
        <member name="F:BlogEngine.Core.Providers.DbFileSystemProvider.parmPrefix">
            <summary>
            The parm prefix.
            </summary>
        </member>
        <member name="F:BlogEngine.Core.Providers.DbFileSystemProvider.tablePrefix">
            <summary>
            The table prefix.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Providers.DbFileSystemProvider.Initialize(System.String,System.Collections.Specialized.NameValueCollection)">
            <summary>
            init
            </summary>
            <param name="name"></param>
            <param name="config"></param>
        </member>
        <member name="M:BlogEngine.Core.Providers.DbFileSystemProvider.ClearFileSystem">
            <summary>
            Clears a file system. This will delete all files and folders recursivly.
            </summary>
            <remarks>
            Handle with care... Possibly an internal method?
            </remarks>
        </member>
        <member name="M:BlogEngine.Core.Providers.DbFileSystemProvider.CreateDirectory(System.String)">
            <summary>
            Creates a directory at a specific path
            </summary>
            <param name="VirtualPath">The virtual path to be created</param>
            <returns>the new Directory object created</returns>
            <remarks>
            Virtual path is the path starting from the /files/ containers
            The entity is created against the current blog id
            </remarks>
        </member>
        <member name="M:BlogEngine.Core.Providers.DbFileSystemProvider.DeleteDirectory(System.String)">
            <summary>
            Deletes a spefic directory from a virtual path
            </summary>
            <param name="VirtualPath">The path to delete</param>
            <remarks>
            Virtual path is the path starting from the /files/ containers
            The entity is queried against to current blog id
            </remarks>
        </member>
        <member name="M:BlogEngine.Core.Providers.DbFileSystemProvider.DirectoryExists(System.String)">
            <summary>
            Returns wether or not the specific directory by virtual path exists
            </summary>
            <param name="VirtualPath">The virtual path to query</param>
            <returns>boolean</returns>
        </member>
        <member name="M:BlogEngine.Core.Providers.DbFileSystemProvider.GetDirectory(System.String)">
            <summary>
            gets a directory by the virtual path, creates the directory path if it does not exist
            </summary>
            <param name="VirtualPath">the virtual path</param>
            <returns>the directory object</returns>
        </member>
        <member name="M:BlogEngine.Core.Providers.DbFileSystemProvider.GetDirectory(System.String,System.Boolean)">
            <summary>
            gets a directory by the virtual path, with a flag to create if not found
            </summary>
            <param name="VirtualPath">The virtual path</param>
            <param name="CreateNew">bool yes \ no to create the director.</param>
            <returns>the directory object, or null if the create flag is set to false</returns>
        </member>
        <member name="M:BlogEngine.Core.Providers.DbFileSystemProvider.GetDirectory(BlogEngine.Core.FileSystem.Directory,System.String[])">
            <summary>
            gets a directory by a basedirectory and a string array of sub path tree
            </summary>
            <param name="BaseDirectory">the base directory object</param>
            <param name="SubPath">the params of sub path</param>
            <returns>the directory found, or null for no directory found</returns>
        </member>
        <member name="M:BlogEngine.Core.Providers.DbFileSystemProvider.GetDirectory(BlogEngine.Core.FileSystem.Directory,System.Boolean,System.String[])">
            <summary>
            gets a directory by a basedirectory and a string array of sub path tree.
            </summary>
            <param name="BaseDirectory">the base directory object</param>
            <param name="CreateNew">If true, creates the directory if it does not already exist.</param>
            <param name="SubPath">the params of sub path</param>
            <returns>The directory found, or null for no directory found</returns>
        </member>
        <member name="M:BlogEngine.Core.Providers.DbFileSystemProvider.GetDirectories(BlogEngine.Core.FileSystem.Directory)">
            <summary>
            gets all the directories underneath a base directory. Only searches one level.
            </summary>
            <param name="BaseDirectory">the base directory</param>
            <returns>collection of Directory objects</returns>
        </member>
        <member name="M:BlogEngine.Core.Providers.DbFileSystemProvider.GetFiles(BlogEngine.Core.FileSystem.Directory)">
            <summary>
            gets all the files in a directory, only searches one level
            </summary>
            <param name="BaseDirectory">the base directory</param>
            <returns>collection of File objects</returns>
        </member>
        <member name="M:BlogEngine.Core.Providers.DbFileSystemProvider.GetFile(System.String)">
            <summary>
            gets a specific file by virtual path
            </summary>
            <param name="VirtualPath">the virtual path of the file</param>
            <returns></returns>
        </member>
        <member name="M:BlogEngine.Core.Providers.DbFileSystemProvider.FileExists(System.String)">
            <summary>
            boolean wether a file exists by its virtual path
            </summary>
            <param name="VirtualPath">the virtual path</param>
            <returns>boolean</returns>
        </member>
        <member name="M:BlogEngine.Core.Providers.DbFileSystemProvider.DeleteFile(System.String)">
            <summary>
            deletes a file by virtual path
            </summary>
            <param name="VirtualPath">virtual path</param>
        </member>
        <member name="M:BlogEngine.Core.Providers.DbFileSystemProvider.UploadFile(System.Byte[],System.String,BlogEngine.Core.FileSystem.Directory)">
            <summary>
            uploads a file to the provider container
            </summary>
            <param name="FileBinary">file contents as byte array</param>
            <param name="FileName">the file name</param>
            <param name="BaseDirectory">directory object that is the owner</param>
            <returns>the new file object</returns>
        </member>
        <member name="M:BlogEngine.Core.Providers.DbFileSystemProvider.UploadFile(System.Byte[],System.String,BlogEngine.Core.FileSystem.Directory,System.Boolean)">
            <summary>
            uploads a file to the provider container
            </summary>
            <param name="FileBinary">the contents of the file as a byte array</param>
            <param name="FileName">the file name</param>
            <param name="BaseDirectory">the directory object that is the owner</param>
            <param name="Overwrite">boolean wether to overwrite the file if it exists.</param>
            <returns>the new file object</returns>
        </member>
        <member name="M:BlogEngine.Core.Providers.DbFileSystemProvider.GetFileContents(BlogEngine.Core.FileSystem.File)">
            <summary>
            gets the file contents via Lazy load, however in the DbProvider the Contents are loaded when the initial object is created to cut down on DbReads
            </summary>
            <param name="BaseFile">the baseFile object to fill</param>
            <returns>the original file object</returns>
        </member>
        <member name="M:BlogEngine.Core.Providers.DbFileSystemProvider.ImageThumbnail(System.String,System.Int32)">
            <summary>
            Returns a thumbnail image at a maximum size. Only one size is provided as the thumbnail will be scaled down. If the thumbnail does not exist the thumbnail is created
            </summary>
            <param name="VirtualPath">The virtual path of the image</param>
            <param name="MaximumSize">The maximum size for the image</param>
            <returns>The image with the thumbnail contents</returns>
            <remarks>
            this is a virtual file and all actual file methods will not be available.
            </remarks>
        </member>
        <member name="P:BlogEngine.Core.Providers.DbFileSystemProvider.connectionString">
            <summary>
            active web.config connection string, defined by the blogProvider sections
            </summary>
        </member>
        <member name="T:BlogEngine.Core.Providers.DbFileSystemExtensions">
            <summary>
            static classes for the DbFileSystem
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Providers.DbFileSystemExtensions.CopyToDirectory(BlogEngine.Core.FileSystem.FileStoreDirectory)">
            <summary>
            copy's the database directory object to a Directory object
            </summary>
            <param name="inObj">the database directory to copy</param>
            <returns>a new Directory object</returns>
        </member>
        <member name="M:BlogEngine.Core.Providers.DbFileSystemExtensions.CopyToFile(BlogEngine.Core.FileSystem.FileStoreFile)">
            <summary>
            copys a database File object to a File object
            </summary>
            <param name="inObj">the database file object to copy</param>
            <returns>a new File object</returns>
        </member>
        <member name="M:BlogEngine.Core.Providers.DbFileSystemExtensions.VirtualPathToDbPath(System.String)">
            <summary>
            removes the virtual path of BlogStorageLocation + files from the virtual path. 
            </summary>
            <param name="VirtualPath">the virtual path to replace against</param>
            <returns>the repleaced string</returns>
        </member>
        <member name="T:BlogEngine.Core.Providers.UNCFileSystemProvider">
            <summary>
            A class for managing storage on a UNC share.
            </summary>
        </member>
        <member name="F:BlogEngine.Core.Providers.UNCFileSystemProvider.uncPath">
            <summary>
            unc path to store files. This will be the base path for all blogs.
            Each blog will then seperate into seperate paths built upon the UNC path by the blog name.
            ie. [unc]/primary, [unc]/template
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Providers.UNCFileSystemProvider.Initialize(System.String,System.Collections.Specialized.NameValueCollection)">
            <summary>
            init
            </summary>
            <param name="name"></param>
            <param name="config"></param>
        </member>
        <member name="M:BlogEngine.Core.Providers.UNCFileSystemProvider.ClearFileSystem">
            <summary>
            Clears a file system. This will delete all files and folders recursivly.
            </summary>
            <remarks>
            Handle with care... Possibly an internal method?
            </remarks>
        </member>
        <member name="M:BlogEngine.Core.Providers.UNCFileSystemProvider.CreateDirectory(System.String)">
            <summary>
            Creates a directory at a specific path
            </summary>
            <param name="VirtualPath">The virtual path to be created</param>
            <returns>the new Directory object created</returns>
            <remarks>
            Virtual path is the path starting from the /files/ containers
            The entity is created against the current blog id
            </remarks>
        </member>
        <member name="M:BlogEngine.Core.Providers.UNCFileSystemProvider.DeleteDirectory(System.String)">
            <summary>
            Deletes a spefic directory from a virtual path
            </summary>
            <param name="VirtualPath">The path to delete</param>
            <remarks>
            Virtual path is the path starting from the /files/ containers
            The entity is queried against to current blog id
            </remarks>
        </member>
        <member name="M:BlogEngine.Core.Providers.UNCFileSystemProvider.DirectoryExists(System.String)">
            <summary>
            Returns wether or not the specific directory by virtual path exists
            </summary>
            <param name="VirtualPath">The virtual path to query</param>
            <returns>boolean</returns>
        </member>
        <member name="M:BlogEngine.Core.Providers.UNCFileSystemProvider.GetDirectory(System.String)">
            <summary>
            gets a directory by the virtual path
            </summary>
            <param name="VirtualPath">the virtual path</param>
            <returns>the directory object or null for no directory found</returns>
        </member>
        <member name="M:BlogEngine.Core.Providers.UNCFileSystemProvider.GetDirectory(System.String,System.Boolean)">
            <summary>
            gets a directory by the virtual path
            </summary>
            <param name="VirtualPath">the virtual path</param>
            <param name="CreateNew">unused</param>
            <returns>the directory object</returns>
        </member>
        <member name="M:BlogEngine.Core.Providers.UNCFileSystemProvider.GetDirectory(BlogEngine.Core.FileSystem.Directory,System.String[])">
            <summary>
            gets a directory by a basedirectory and a string array of sub path tree
            </summary>
            <param name="BaseDirectory">the base directory object</param>
            <param name="SubPath">the params of sub path</param>
            <returns>the directory found, or null for no directory found</returns>
        </member>
        <member name="M:BlogEngine.Core.Providers.UNCFileSystemProvider.GetDirectory(BlogEngine.Core.FileSystem.Directory,System.Boolean,System.String[])">
            <summary>
            gets a directory by a basedirectory and a string array of sub path tree
            </summary>
            <param name="BaseDirectory">the base directory object</param>
            <param name="CreateNew">if set will create the directory structure</param>
            <param name="SubPath">the params of sub path</param>
            <returns>the directory found, or null for no directory found</returns>
        </member>
        <member name="M:BlogEngine.Core.Providers.UNCFileSystemProvider.GetDirectories(BlogEngine.Core.FileSystem.Directory)">
            <summary>
            gets all the directories underneath a base directory. Only searches one level.
            </summary>
            <param name="BaseDirectory">the base directory</param>
            <returns>collection of Directory objects</returns>
        </member>
        <member name="M:BlogEngine.Core.Providers.UNCFileSystemProvider.GetFiles(BlogEngine.Core.FileSystem.Directory)">
            <summary>
            gets all the files in a directory, only searches one level
            </summary>
            <param name="BaseDirectory">the base directory</param>
            <returns>collection of File objects</returns>
        </member>
        <member name="M:BlogEngine.Core.Providers.UNCFileSystemProvider.GetFile(System.String)">
            <summary>
            gets a specific file by virtual path
            </summary>
            <param name="VirtualPath">the virtual path of the file</param>
            <returns></returns>
        </member>
        <member name="M:BlogEngine.Core.Providers.UNCFileSystemProvider.FileExists(System.String)">
            <summary>
            boolean wether a file exists by its virtual path
            </summary>
            <param name="VirtualPath">the virtual path</param>
            <returns>boolean</returns>
        </member>
        <member name="M:BlogEngine.Core.Providers.UNCFileSystemProvider.DeleteFile(System.String)">
            <summary>
            deletes a file by virtual path
            </summary>
            <param name="VirtualPath">virtual path</param>
        </member>
        <member name="M:BlogEngine.Core.Providers.UNCFileSystemProvider.UploadFile(System.Byte[],System.String,BlogEngine.Core.FileSystem.Directory)">
            <summary>
            uploads a file to the provider container
            </summary>
            <param name="FileBinary">file contents as byte array</param>
            <param name="FileName">the file name</param>
            <param name="BaseDirectory">directory object that is the owner</param>
            <returns>the new file object</returns>
        </member>
        <member name="M:BlogEngine.Core.Providers.UNCFileSystemProvider.UploadFile(System.Byte[],System.String,BlogEngine.Core.FileSystem.Directory,System.Boolean)">
            <summary>
            uploads a file to the provider container
            </summary>
            <param name="FileBinary">the contents of the file as a byte array</param>
            <param name="FileName">the file name</param>
            <param name="BaseDirectory">the directory object that is the owner</param>
            <param name="Overwrite">boolean wether to overwrite the file if it exists.</param>
            <returns>the new file object</returns>
        </member>
        <member name="M:BlogEngine.Core.Providers.UNCFileSystemProvider.GetFileContents(BlogEngine.Core.FileSystem.File)">
            <summary>
            gets the file contents via Lazy load, however in the DbProvider the Contents are loaded when the initial object is created to cut down on DbReads
            </summary>
            <param name="BaseFile">the baseFile object to fill</param>
            <returns>the original file object</returns>
        </member>
        <member name="M:BlogEngine.Core.Providers.UNCFileSystemProvider.FileToByteArray(System.String)">
            <summary>
            Converts a file path to a byte array for handler processing
            </summary>
            <param name="FilePath">the file path to process</param>
            <returns>a new binary array</returns>
        </member>
        <member name="M:BlogEngine.Core.Providers.UNCFileSystemProvider.ImageThumbnail(System.String,System.Int32)">
            <summary>
            Not implemented. Throws a NotImplementedException.
            </summary>
            <param name="VirtualPath">unused</param>
            <param name="MaximumSize">unused</param>
            <returns>Nothing</returns>
        </member>
        <member name="T:BlogEngine.Core.Providers.XmlBlogProvider">
            <summary>
            A storage provider for BlogEngine that uses XML files.
                <remarks>
            To build another provider, you can just copy and modify
                    this one. Then add it to the web.config's BlogEngine section.
                </remarks>
            </summary>
            <summary>
            A storage provider for BlogEngine that uses XML files.
                <remarks>
            To build another provider, you can just copy and modify
                    this one. Then add it to the web.config's BlogEngine section.
                </remarks>
            </summary>
            <summary>
            A storage provider for BlogEngine that uses XML files.
                <remarks>
            To build another provider, you can just copy and modify
                    this one. Then add it to the web.config's BlogEngine section.
                </remarks>
            </summary>
            <summary>
            A storage provider for BlogEngine that uses XML files.
                <remarks>
            To build another provider, you can just copy and modify
                    this one. Then add it to the web.config's BlogEngine section.
                </remarks>
            </summary>
            <summary>
            A storage provider for BlogEngine that uses XML files.
                <remarks>
            To build another provider, you can just copy and modify
                    this one. Then add it to the web.config's BlogEngine section.
                </remarks>
            </summary>
            <summary>
            The xml blog provider.
            </summary>
            <summary>
            The xml blog provider.
            </summary>
            <summary>
            A storage provider for BlogEngine that uses XML files.
                <remarks>
            To build another provider, you can just copy and modify
                    this one. Then add it to the web.config's BlogEngine section.
                </remarks>
            </summary>
            <summary>
            A storage provider for BlogEngine that uses XML files.
                <remarks>
            To build another provider, you can just copy and modify
                    this one. Then add it to the web.config's BlogEngine section.
                </remarks>
            </summary>
            <summary>
            A storage provider for BlogEngine that uses XML files.
                <remarks>
            To build another provider, you can just copy and modify
                    this one. Then add it to the web.config's BlogEngine section.
                </remarks>
            </summary>
            <summary>
            A storage provider for BlogEngine that uses XML files.
                <remarks>
            To build another provider, you can just copy and modify
                    this one. Then add it to the web.config's BlogEngine section.
                </remarks>
            </summary>
        </member>
        <member name="T:BlogEngine.Core.Providers.BlogProvider">
            <summary>
            A base class for all custom providers to inherit from.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Providers.BlogProvider.DeleteBlogRollItem(BlogEngine.Core.BlogRollItem)">
            <summary>
            Deletes a BlogRoll from the data store specified by the provider.
            </summary>
            <param name="blogRollItem">
            The blog Roll Item to delete.
            </param>
        </member>
        <member name="M:BlogEngine.Core.Providers.BlogProvider.DeleteBlog(BlogEngine.Core.Blog)">
            <summary>
            Deletes a Blog from the data store specified by the provider.
            </summary>
            <param name="blog">
            The blog to delete.
            </param>
        </member>
        <member name="M:BlogEngine.Core.Providers.BlogProvider.DeleteBlogStorageContainer(BlogEngine.Core.Blog)">
            <summary>
            Deletes a Blog's storage container from the data store specified by the provider.
            </summary>
            <param name="blog">
            The blog to delete the storage container of.
            </param>
        </member>
        <member name="M:BlogEngine.Core.Providers.BlogProvider.DeleteCategory(BlogEngine.Core.Category)">
            <summary>
            Deletes a Category from the data store specified by the provider.
            </summary>
            <param name="category">
            The category to delete.
            </param>
        </member>
        <member name="M:BlogEngine.Core.Providers.BlogProvider.DeletePage(BlogEngine.Core.Page)">
            <summary>
            Deletes a Page from the data store specified by the provider.
            </summary>
            <param name="page">
            The page to delete.
            </param>
        </member>
        <member name="M:BlogEngine.Core.Providers.BlogProvider.DeletePost(BlogEngine.Core.Post)">
            <summary>
            Deletes a Post from the data store specified by the provider.
            </summary>
            <param name="post">
            The post to delete.
            </param>
        </member>
        <member name="M:BlogEngine.Core.Providers.BlogProvider.DeleteProfile(BlogEngine.Core.AuthorProfile)">
            <summary>
            Deletes a Page from the data store specified by the provider.
            </summary>
            <param name="profile">
            The profile to delete.
            </param>
        </member>
        <member name="M:BlogEngine.Core.Providers.BlogProvider.FillBlogRoll">
            <summary>
            Retrieves all BlogRolls from the provider and returns them in a list.
            </summary>
            <returns>A list of BlogRollItem.</returns>
        </member>
        <member name="M:BlogEngine.Core.Providers.BlogProvider.FillBlogs">
            <summary>
            Retrieves all Blogs from the provider and returns them in a list.
            </summary>
            <returns>A list of Blogs.</returns>
        </member>
        <member name="M:BlogEngine.Core.Providers.BlogProvider.FillCategories(BlogEngine.Core.Blog)">
            <summary>
            Retrieves all Categories from the provider and returns them in a List.
            </summary>
            <returns>A list of Category.</returns>
        </member>
        <member name="M:BlogEngine.Core.Providers.BlogProvider.FillPages">
            <summary>
            Retrieves all Pages from the provider and returns them in a List.
            </summary>
            <returns>A list of Page.</returns>
        </member>
        <member name="M:BlogEngine.Core.Providers.BlogProvider.FillPosts">
            <summary>
            Retrieves all Posts from the provider and returns them in a List.
            </summary>
            <returns>A list of Post.</returns>
        </member>
        <member name="M:BlogEngine.Core.Providers.BlogProvider.FillProfiles">
            <summary>
            Retrieves all Pages from the provider and returns them in a List.
            </summary>
            <returns>A list of AuthorProfile.</returns>
        </member>
        <member name="M:BlogEngine.Core.Providers.BlogProvider.FillReferrers">
            <summary>
            Deletes a Referrer from the data store specified by the provider.
            </summary>
            <returns>A list of Referrer.</returns>
        </member>
        <member name="M:BlogEngine.Core.Providers.BlogProvider.FillRights">
            <summary>
            Returns a dictionary representing rights and the roles that allow them.
            </summary>
            <returns>
            
            The key must be a string of the name of the Rights enum of the represented Right.
            The value must be an IEnumerable of strings that includes only the role names of
            roles the right represents.
            
            Inheritors do not need to worry about verifying that the keys and values are valid.
            This is handled in the Right class.
            
            </returns>
        </member>
        <member name="M:BlogEngine.Core.Providers.BlogProvider.InsertBlogRollItem(BlogEngine.Core.BlogRollItem)">
            <summary>
            Inserts a new BlogRoll into the data store specified by the provider.
            </summary>
            <param name="blogRollItem">
            The blog Roll Item.
            </param>
        </member>
        <member name="M:BlogEngine.Core.Providers.BlogProvider.InsertBlog(BlogEngine.Core.Blog)">
            <summary>
            Inserts a new Blog into the data store specified by the provider.
            </summary>
            <param name="blog">
            The blog.
            </param>
        </member>
        <member name="M:BlogEngine.Core.Providers.BlogProvider.InsertCategory(BlogEngine.Core.Category)">
            <summary>
            Inserts a new Category into the data store specified by the provider.
            </summary>
            <param name="category">
            The category.
            </param>
        </member>
        <member name="M:BlogEngine.Core.Providers.BlogProvider.InsertPage(BlogEngine.Core.Page)">
            <summary>
            Inserts a new Page into the data store specified by the provider.
            </summary>
            <param name="page">
            The page to insert.
            </param>
        </member>
        <member name="M:BlogEngine.Core.Providers.BlogProvider.InsertPost(BlogEngine.Core.Post)">
            <summary>
            Inserts a new Post into the data store specified by the provider.
            </summary>
            <param name="post">
            The post to insert.
            </param>
        </member>
        <member name="M:BlogEngine.Core.Providers.BlogProvider.InsertProfile(BlogEngine.Core.AuthorProfile)">
            <summary>
            Inserts a new Page into the data store specified by the provider.
            </summary>
            <param name="profile">
            The profile to insert.
            </param>
        </member>
        <member name="M:BlogEngine.Core.Providers.BlogProvider.InsertReferrer(BlogEngine.Core.Referrer)">
            <summary>
            Inserts a new Referrer into the data store specified by the provider.
            </summary>
            <param name="referrer">
            The referrer to insert.
            </param>
        </member>
        <member name="M:BlogEngine.Core.Providers.BlogProvider.LoadFromDataStore(BlogEngine.Core.DataStore.ExtensionType,System.String)">
            <summary>
            Loads settings from data store
            </summary>
            <param name="extensionType">
            Extension Type
            </param>
            <param name="extensionId">
            Extensio Id
            </param>
            <returns>
            Settings as stream
            </returns>
        </member>
        <member name="M:BlogEngine.Core.Providers.BlogProvider.LoadPingServices">
            <summary>
            Loads the ping services.
            </summary>
            <returns>
            A StringCollection.
            </returns>
        </member>
        <member name="M:BlogEngine.Core.Providers.BlogProvider.LoadSettings(BlogEngine.Core.Blog)">
            <summary>
            Loads the settings from the provider.
            </summary>
            <returns>A StringDictionary.</returns>
        </member>
        <member name="M:BlogEngine.Core.Providers.BlogProvider.LoadStopWords">
            <summary>
            Loads the stop words used in the search feature.
            </summary>
            <returns>
            A StringCollection.
            </returns>
        </member>
        <member name="M:BlogEngine.Core.Providers.BlogProvider.RemoveFromDataStore(BlogEngine.Core.DataStore.ExtensionType,System.String)">
            <summary>
            Removes settings from data store
            </summary>
            <param name="extensionType">
            Extension Type
            </param>
            <param name="extensionId">
            Extension Id
            </param>
        </member>
        <member name="M:BlogEngine.Core.Providers.BlogProvider.SavePingServices(System.Collections.Specialized.StringCollection)">
            <summary>
            Saves the ping services.
            </summary>
            <param name="services">
            The services.
            </param>
        </member>
        <member name="M:BlogEngine.Core.Providers.BlogProvider.SaveRights(System.Collections.Generic.IEnumerable{BlogEngine.Core.Right})">
            <summary>
            Saves all of the Rights and the roles that coorespond with them.
            </summary>
            <param name="rights"></param>
        </member>
        <member name="M:BlogEngine.Core.Providers.BlogProvider.SaveSettings(System.Collections.Specialized.StringDictionary)">
            <summary>
            Saves the settings to the provider.
            </summary>
            <param name="settings">
            The settings.
            </param>
        </member>
        <member name="M:BlogEngine.Core.Providers.BlogProvider.SaveToDataStore(BlogEngine.Core.DataStore.ExtensionType,System.String,System.Object)">
            <summary>
            Saves settings to data store
            </summary>
            <param name="extensionType">
            Extension Type
            </param>
            <param name="extensionId">
            Extension Id
            </param>
            <param name="settings">
            Settings object
            </param>
        </member>
        <member name="M:BlogEngine.Core.Providers.BlogProvider.SelectBlogRollItem(System.Guid)">
            <summary>
            Retrieves a BlogRoll from the provider based on the specified id.
            </summary>
            <param name="id">The Blog Roll Item Id.</param>
            <returns>A BlogRollItem.</returns>
        </member>
        <member name="M:BlogEngine.Core.Providers.BlogProvider.SelectBlog(System.Guid)">
            <summary>
            Retrieves a Blog from the provider based on the specified id.
            </summary>
            <param name="id">The Blog Id.</param>
            <returns>A Blog.</returns>
        </member>
        <member name="M:BlogEngine.Core.Providers.BlogProvider.SelectCategory(System.Guid)">
            <summary>
            Retrieves a Category from the provider based on the specified id.
            </summary>
            <param name="id">The Category id.</param>
            <returns>A Category.</returns>
        </member>
        <member name="M:BlogEngine.Core.Providers.BlogProvider.SelectPage(System.Guid)">
            <summary>
            Retrieves a Page from the provider based on the specified id.
            </summary>
            <param name="id">The Page id.</param>
            <returns>The Page object.</returns>
        </member>
        <member name="M:BlogEngine.Core.Providers.BlogProvider.SelectPost(System.Guid)">
            <summary>
            Retrieves a Post from the provider based on the specified id.
            </summary>
            <param name="id">The Post id.</param>
            <returns>A Post object.</returns>
        </member>
        <member name="M:BlogEngine.Core.Providers.BlogProvider.SelectProfile(System.String)">
            <summary>
            Retrieves a Page from the provider based on the specified id.
            </summary>
            <param name="id">The AuthorProfile id.</param>
            <returns>An AuthorProfile.</returns>
        </member>
        <member name="M:BlogEngine.Core.Providers.BlogProvider.SelectReferrer(System.Guid)">
            <summary>
            Retrieves a Referrer from the provider based on the specified id.
            </summary>
            <param name="id">The Referrer Id.</param>
            <returns>A Referrer.</returns>
        </member>
        <member name="M:BlogEngine.Core.Providers.BlogProvider.SetupBlogFromExistingBlog(BlogEngine.Core.Blog,BlogEngine.Core.Blog)">
            <summary>
            Sets up the required storage files/tables for a new Blog instance, from an existing blog instance.
            </summary>
            <param name="existingBlog">The existing blog instance to base the new blog instance off of.</param>
            <param name="newBlog">The new blog instance.</param>
            <returns>A boolean indicating if the setup process was successful.</returns>
        </member>
        <member name="M:BlogEngine.Core.Providers.BlogProvider.SetupNewBlog(BlogEngine.Core.Blog,System.String,System.String,System.String)">
            <summary>
            Setup new blog
            </summary>
            <param name="newBlog">New blog</param>
            <param name="userName">User name</param>
            <param name="email">Email</param>
            <param name="password">Password</param>
            <returns>True if successful</returns>
        </member>
        <member name="M:BlogEngine.Core.Providers.BlogProvider.UpdateBlogRollItem(BlogEngine.Core.BlogRollItem)">
            <summary>
            Updates an existing BlogRollItem in the data store specified by the provider.
            </summary>
            <param name="blogRollItem">
            The blogroll item to update.
            </param>
        </member>
        <member name="M:BlogEngine.Core.Providers.BlogProvider.UpdateBlog(BlogEngine.Core.Blog)">
            <summary>
            Updates an existing Blog in the data store specified by the provider.
            </summary>
            <param name="blog">
            The blog to update.
            </param>
        </member>
        <member name="M:BlogEngine.Core.Providers.BlogProvider.UpdateCategory(BlogEngine.Core.Category)">
            <summary>
            Updates an existing Category in the data store specified by the provider.
            </summary>
            <param name="category">
            The category to update.
            </param>
        </member>
        <member name="M:BlogEngine.Core.Providers.BlogProvider.UpdatePage(BlogEngine.Core.Page)">
            <summary>
            Updates an existing Page in the data store specified by the provider.
            </summary>
            <param name="page">
            The page to update.
            </param>
        </member>
        <member name="M:BlogEngine.Core.Providers.BlogProvider.UpdatePost(BlogEngine.Core.Post)">
            <summary>
            Updates an existing Post in the data store specified by the provider.
            </summary>
            <param name="post">
            The post to update.
            </param>
        </member>
        <member name="M:BlogEngine.Core.Providers.BlogProvider.UpdateProfile(BlogEngine.Core.AuthorProfile)">
            <summary>
            Updates an existing Page in the data store specified by the provider.
            </summary>
            <param name="profile">
            The profile to update.
            </param>
        </member>
        <member name="M:BlogEngine.Core.Providers.BlogProvider.UpdateReferrer(BlogEngine.Core.Referrer)">
            <summary>
            Updates an existing Referrer in the data store specified by the provider.
            </summary>
            <param name="referrer">
            The referrer to update.
            </param>
        </member>
        <member name="M:BlogEngine.Core.Providers.BlogProvider.SavePackage(BlogEngine.Core.Packaging.InstalledPackage)">
            <summary>
            Save installed package id and version
            </summary>
            <param name="package">Intalled package</param>
        </member>
        <member name="M:BlogEngine.Core.Providers.BlogProvider.SavePackageFiles(System.Collections.Generic.List{BlogEngine.Core.Packaging.PackageFile})">
            <summary>
            Log of all files for installed package
            </summary>
            <param name="packageFiles">List of intalled package files</param>
        </member>
        <member name="M:BlogEngine.Core.Providers.BlogProvider.FillPackageFiles(System.String)">
            <summary>
            Gets list of files for installed package
            </summary>
            <param name="packageId">Package ID</param>
            <returns>List of files for installed package</returns>
        </member>
        <member name="M:BlogEngine.Core.Providers.BlogProvider.FillPackages">
            <summary>
            Gets all installed from gallery packages
            </summary>
            <returns>List of installed packages</returns>
        </member>
        <member name="M:BlogEngine.Core.Providers.BlogProvider.DeletePackage(System.String)">
            <summary>
            Should delete package and remove all package files
            </summary>
            <param name="packageId">Package ID</param>
        </member>
        <member name="M:BlogEngine.Core.Providers.BlogProvider.SaveQuickNote(BlogEngine.Core.Notes.QuickNote)">
            <summary>
            Save quick note
            </summary>
            <param name="note">Quick note</param>
        </member>
        <member name="M:BlogEngine.Core.Providers.BlogProvider.SaveQuickSetting(BlogEngine.Core.Notes.QuickSetting)">
            <summary>
            Save quick setting
            </summary>
            <param name="setting">Quick setting</param>
        </member>
        <member name="M:BlogEngine.Core.Providers.BlogProvider.FillQuickNotes(System.String)">
            <summary>
            Fill quick notes
            </summary>
            <param name="userId">User ID</param>
            <returns>List of user notes</returns>
        </member>
        <member name="M:BlogEngine.Core.Providers.BlogProvider.FillQuickSettings(System.String)">
            <summary>
            Fill quick settings
            </summary>
            <param name="userId">User ID</param>
            <returns>List of user settings</returns>
        </member>
        <member name="M:BlogEngine.Core.Providers.BlogProvider.DeleteQuickNote(System.Guid)">
            <summary>
            Delete quick note
            </summary>
            <param name="noteId">Note ID</param>
        </member>
        <member name="M:BlogEngine.Core.Providers.XmlBlogProvider.DeleteBlog(BlogEngine.Core.Blog)">
            <summary>
            Deletes a Blog
            </summary>
            <param name="blog">
            The blog.
            </param>
        </member>
        <member name="M:BlogEngine.Core.Providers.XmlBlogProvider.DeleteBlogStorageContainer(BlogEngine.Core.Blog)">
            <summary>
            Deletes the blog's storage container.
            </summary>
            <param name="blog">
            The blog.
            </param>
        </member>
        <member name="M:BlogEngine.Core.Providers.XmlBlogProvider.FillBlogs">
            <summary>
            Fills an unsorted list of Blogs.
            </summary>
            <returns>
            A List&lt;Blog&gt; of all Blogs
            </returns>
        </member>
        <member name="M:BlogEngine.Core.Providers.XmlBlogProvider.InsertBlog(BlogEngine.Core.Blog)">
            <summary>
            Inserts a Blog
            </summary>
            <param name="blog">
            The Blog.
            </param>
        </member>
        <member name="M:BlogEngine.Core.Providers.XmlBlogProvider.SelectBlog(System.Guid)">
            <summary>
            Gets a Blog based on a Guid.
            </summary>
            <param name="id">
            The Blog's Guid.
            </param>
            <returns>
            A matching Blog
            </returns>
        </member>
        <member name="M:BlogEngine.Core.Providers.XmlBlogProvider.UpdateBlog(BlogEngine.Core.Blog)">
            <summary>
            Updates a Blog
            </summary>
            <param name="blog">
            The blog.
            </param>
        </member>
        <member name="M:BlogEngine.Core.Providers.XmlBlogProvider.WriteBlogsFile(System.Collections.Generic.List{BlogEngine.Core.Blog})">
            <summary>
            Saves blogs to a file.
            </summary>
            <param name="blogs">
            The blogs.
            </param>
        </member>
        <member name="M:BlogEngine.Core.Providers.XmlBlogProvider.SetupBlogFromExistingBlog(BlogEngine.Core.Blog,BlogEngine.Core.Blog)">
            <summary>
            Sets up the required storage files/tables for a new Blog instance, from an existing blog instance.
            </summary>
            <param name="existingBlog">
            The existing blog to copy from.
            </param>
            <param name="newBlog">
            The new blog to copy to.
            </param>
        </member>
        <member name="M:BlogEngine.Core.Providers.XmlBlogProvider.SetupNewBlog(BlogEngine.Core.Blog,System.String,System.String,System.String)">
            <summary>
            Setup new blog
            </summary>
            <param name="newBlog">New blog</param>
            <param name="userName">User name</param>
            <param name="email">Email</param>
            <param name="password">Password</param>
            <returns>True if successful</returns>
        </member>
        <member name="M:BlogEngine.Core.Providers.XmlBlogProvider.SavePackage(BlogEngine.Core.Packaging.InstalledPackage)">
            <summary>
            Log of all installed packages
            </summary>
            <param name="package">Intalled package</param>
        </member>
        <member name="M:BlogEngine.Core.Providers.XmlBlogProvider.SavePackageFiles(System.Collections.Generic.List{BlogEngine.Core.Packaging.PackageFile})">
            <summary>
            Log of all files for installed package
            </summary>
            <param name="packageFiles">List of intalled package files</param>
        </member>
        <member name="M:BlogEngine.Core.Providers.XmlBlogProvider.FillPackages">
            <summary>
            Gets all installed from gallery packages
            </summary>
            <returns>List of installed packages</returns>
        </member>
        <member name="M:BlogEngine.Core.Providers.XmlBlogProvider.FillPackageFiles(System.String)">
            <summary>
            Gets list of files for installed package
            </summary>
            <param name="packageId">Package ID</param>
            <returns>List of files for installed package</returns>
        </member>
        <member name="M:BlogEngine.Core.Providers.XmlBlogProvider.DeletePackage(System.String)">
            <summary>
            Should delete package and remove all package files
            </summary>
            <param name="packageId">Package ID</param>
        </member>
        <member name="M:BlogEngine.Core.Providers.XmlBlogProvider.SaveQuickNote(BlogEngine.Core.Notes.QuickNote)">
            <summary>
            Save quick note
            </summary>
            <param name="note">Quick note</param>
        </member>
        <member name="M:BlogEngine.Core.Providers.XmlBlogProvider.SaveQuickSetting(BlogEngine.Core.Notes.QuickSetting)">
            <summary>
            Save quick setting
            </summary>
            <param name="setting">Quick setting</param>
        </member>
        <member name="M:BlogEngine.Core.Providers.XmlBlogProvider.FillQuickNotes(System.String)">
            <summary>
            Fill quick notes
            </summary>
            <param name="userId">User ID</param>
            <returns>List of user notes</returns>
        </member>
        <member name="M:BlogEngine.Core.Providers.XmlBlogProvider.FillQuickSettings(System.String)">
            <summary>
            Fill quick settings
            </summary>
            <param name="userId">User ID</param>
            <returns>List of user settings</returns>
        </member>
        <member name="M:BlogEngine.Core.Providers.XmlBlogProvider.DeleteQuickNote(System.Guid)">
            <summary>
            Delete quick note
            </summary>
            <param name="noteId">Note ID</param>
        </member>
        <member name="M:BlogEngine.Core.Providers.XmlBlogProvider.FillRights">
            <summary>
            Returns a dictionary of right names and the roles associated with them.
            </summary>
            <returns></returns>
        </member>
        <member name="M:BlogEngine.Core.Providers.XmlBlogProvider.SaveRights(System.Collections.Generic.IEnumerable{BlogEngine.Core.Right})">
            <summary>
            Saves the current BlogEngine rights.
            </summary>
            <param name="rights"></param>
        </member>
        <member name="M:BlogEngine.Core.Providers.XmlBlogProvider.LoadPingServices">
            <summary>
            Loads the ping services.
            </summary>
            <returns>A StringCollection.</returns>
        </member>
        <member name="M:BlogEngine.Core.Providers.XmlBlogProvider.SavePingServices(System.Collections.Specialized.StringCollection)">
            <summary>
            Saves the ping services.
            </summary>
            <param name="services">
            The services.
            </param>
        </member>
        <member name="M:BlogEngine.Core.Providers.XmlBlogProvider.DeleteBlogRollItem(BlogEngine.Core.BlogRollItem)">
            <summary>
            Deletes a BlogRoll
            </summary>
            <param name="blogRollItem">
            The blog Roll Item.
            </param>
        </member>
        <member name="M:BlogEngine.Core.Providers.XmlBlogProvider.FillBlogRoll">
            <summary>
            Fills an unsorted list of BlogRolls.
            </summary>
            <returns>
            A List&lt;BlogRoll&gt; of all BlogRolls
            </returns>
        </member>
        <member name="M:BlogEngine.Core.Providers.XmlBlogProvider.InsertBlogRollItem(BlogEngine.Core.BlogRollItem)">
            <summary>
            Inserts a BlogRoll
            </summary>
            <param name="blogRollItem">
            The blog Roll Item.
            </param>
        </member>
        <member name="M:BlogEngine.Core.Providers.XmlBlogProvider.SelectBlogRollItem(System.Guid)">
            <summary>
            Gets a BlogRoll based on a Guid.
            </summary>
            <param name="id">
            The BlogRoll's Guid.
            </param>
            <returns>
            A matching BlogRoll
            </returns>
        </member>
        <member name="M:BlogEngine.Core.Providers.XmlBlogProvider.UpdateBlogRollItem(BlogEngine.Core.BlogRollItem)">
            <summary>
            Updates a BlogRoll
            </summary>
            <param name="blogRollItem">
            The blog Roll Item.
            </param>
        </member>
        <member name="M:BlogEngine.Core.Providers.XmlBlogProvider.WriteBlogRollFile(System.Collections.Generic.List{BlogEngine.Core.BlogRollItem})">
            <summary>
            The write blog roll file.
            </summary>
            <param name="blogRollItems">
            The blog roll items.
            </param>
        </member>
        <member name="M:BlogEngine.Core.Providers.XmlBlogProvider.DeleteCategory(BlogEngine.Core.Category)">
            <summary>
            Deletes a Category
            </summary>
            <param name="category">
            Must be a valid Category object.
            </param>
        </member>
        <member name="M:BlogEngine.Core.Providers.XmlBlogProvider.FillCategories(BlogEngine.Core.Blog)">
            <summary>
            Fills an unsorted list of categories.
            </summary>
            <returns>
            A List&lt;Category&gt; of all Categories.
            </returns>
        </member>
        <member name="M:BlogEngine.Core.Providers.XmlBlogProvider.InsertCategory(BlogEngine.Core.Category)">
            <summary>
            Inserts a Category
            </summary>
            <param name="category">
            Must be a valid Category object.
            </param>
        </member>
        <member name="M:BlogEngine.Core.Providers.XmlBlogProvider.SelectCategory(System.Guid)">
            <summary>
            Gets a Category based on a Guid
            </summary>
            <param name="id">
            The category's Guid.
            </param>
            <returns>
            A matching Category
            </returns>
        </member>
        <member name="M:BlogEngine.Core.Providers.XmlBlogProvider.UpdateCategory(BlogEngine.Core.Category)">
            <summary>
            Updates a Category
            </summary>
            <param name="category">
            Must be a valid Category object.
            </param>
        </member>
        <member name="M:BlogEngine.Core.Providers.XmlBlogProvider.WriteToFile">
            <summary>
            Saves the Categories to disk.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Providers.XmlBlogProvider.LoadFromDataStore(BlogEngine.Core.DataStore.ExtensionType,System.String)">
            <summary>
            Loads settings from generic data store
            </summary>
            <param name="extensionType">
            Extension Type
            </param>
            <param name="extensionId">
            Extension ID
            </param>
            <returns>
            Stream Settings
            </returns>
        </member>
        <member name="M:BlogEngine.Core.Providers.XmlBlogProvider.RemoveFromDataStore(BlogEngine.Core.DataStore.ExtensionType,System.String)">
            <summary>
            Removes settings from data store
            </summary>
            <param name="extensionType">
            Extension Type
            </param>
            <param name="extensionId">
            Extension Id
            </param>
        </member>
        <member name="M:BlogEngine.Core.Providers.XmlBlogProvider.SaveToDataStore(BlogEngine.Core.DataStore.ExtensionType,System.String,System.Object)">
            <summary>
            Save settings to generic data store
            </summary>
            <param name="extensionType">
            Type of extension
            </param>
            <param name="extensionId">
            Extension ID
            </param>
            <param name="settings">
            Stream Settings
            </param>
        </member>
        <member name="M:BlogEngine.Core.Providers.XmlBlogProvider.StorageLocation(BlogEngine.Core.DataStore.ExtensionType)">
            <summary>
            Data Store Location
            </summary>
            <param name="extensionType">
            Type of extension
            </param>
            <returns>
            Path to storage directory
            </returns>
        </member>
        <member name="M:BlogEngine.Core.Providers.XmlBlogProvider.ExtensionLocation(BlogEngine.Core.DataStore.ExtensionType,System.String)">
            <summary>
            Data Store Location for an extension.
            </summary>
            <param name="extensionType">
            Type of extension
            </param>
            <param name="extensionId">The id of the extension</param>
            <returns>
            XML file of extension data.
            </returns>
        </member>
        <member name="M:BlogEngine.Core.Providers.XmlBlogProvider.DeleteProfile(BlogEngine.Core.AuthorProfile)">
            <summary>
            The delete profile.
            </summary>
            <param name="profile">
            The profile.
            </param>
        </member>
        <member name="M:BlogEngine.Core.Providers.XmlBlogProvider.FillProfiles">
            <summary>
            The fill profiles.
            </summary>
            <returns>
            A list of AuthorProfile.
            </returns>
        </member>
        <member name="M:BlogEngine.Core.Providers.XmlBlogProvider.InsertProfile(BlogEngine.Core.AuthorProfile)">
            <summary>
            The insert profile.
            </summary>
            <param name="profile">
            The profile.
            </param>
        </member>
        <member name="M:BlogEngine.Core.Providers.XmlBlogProvider.SelectProfile(System.String)">
            <summary>
            Retrieves a Page from the provider based on the specified id.
            </summary>
            <param name="id">The AuthorProfile id.</param>
            <returns>An AuthorProfile.</returns>
        </member>
        <member name="M:BlogEngine.Core.Providers.XmlBlogProvider.UpdateProfile(BlogEngine.Core.AuthorProfile)">
            <summary>
            The update profile.
            </summary>
            <param name="profile">
            The profile.
            </param>
        </member>
        <member name="M:BlogEngine.Core.Providers.XmlBlogProvider.FillReferrers">
            <summary>
            Fills an unsorted list of Referrers.
            </summary>
            <returns>
            A List&lt;Referrer&gt; of all Referrers.
            </returns>
        </member>
        <member name="M:BlogEngine.Core.Providers.XmlBlogProvider.InsertReferrer(BlogEngine.Core.Referrer)">
            <summary>
            Inserts a Referrer.
            </summary>
            <param name="referrer">
            Must be a valid Referrer object.
            </param>
        </member>
        <member name="M:BlogEngine.Core.Providers.XmlBlogProvider.SelectReferrer(System.Guid)">
            <summary>
            Gets a Referrer based on the Id.
            </summary>
            <param name="Id">
            The Referrer's Id.
            </param>
            <returns>
            A matching Referrer.
            </returns>
        </member>
        <member name="M:BlogEngine.Core.Providers.XmlBlogProvider.UpdateReferrer(BlogEngine.Core.Referrer)">
            <summary>
            Updates a Referrer.
            </summary>
            <param name="referrer">
            Must be a valid Referrer object.
            </param>
        </member>
        <member name="M:BlogEngine.Core.Providers.XmlBlogProvider.GetReferrersFromFile(System.IO.FileInfo,System.DateTime)">
            <summary>
            The get referrers from file.
            </summary>
            <param name="file">
            The file.
            </param>
            <param name="day">
            The day.
            </param>
            <returns>
            A list of Referrer.
            </returns>
        </member>
        <member name="M:BlogEngine.Core.Providers.XmlBlogProvider.WriteReferrerFile(System.Collections.Generic.List{BlogEngine.Core.Referrer},System.DateTime)">
            <summary>
            The write referrer file.
            </summary>
            <param name="referrers">
            The referrers.
            </param>
            <param name="day">
            The day.
            </param>
        </member>
        <member name="M:BlogEngine.Core.Providers.XmlBlogProvider.LoadStopWords">
            <summary>
            Loads the stop words used in the search feature.
            </summary>
            <returns>
            A StringCollection.
            </returns>
        </member>
        <member name="M:BlogEngine.Core.Providers.XmlBlogProvider.LoadSettings(BlogEngine.Core.Blog)">
            <summary>
            Loads the settings from the provider.
            </summary>
            <returns>A StringDictionary.</returns>
        </member>
        <member name="M:BlogEngine.Core.Providers.XmlBlogProvider.SaveSettings(System.Collections.Specialized.StringDictionary)">
            <summary>
            Saves the settings to the provider.
            </summary>
            <param name="settings">
            The settings.
            </param>
        </member>
        <member name="M:BlogEngine.Core.Providers.XmlBlogProvider.DeletePage(BlogEngine.Core.Page)">
            <summary>
            Deletes a Page from the data store specified by the provider.
            </summary>
            <param name="page">The page to delete.</param>
        </member>
        <member name="M:BlogEngine.Core.Providers.XmlBlogProvider.FillPages">
            <summary>
            Retrieves all pages from the data store
            </summary>
            <returns>
            List of Pages
            </returns>
        </member>
        <member name="M:BlogEngine.Core.Providers.XmlBlogProvider.InsertPage(BlogEngine.Core.Page)">
            <summary>
            Inserts a new Page into the data store specified by the provider.
            </summary>
            <param name="page">The page to insert.</param>
        </member>
        <member name="M:BlogEngine.Core.Providers.XmlBlogProvider.SelectPage(System.Guid)">
            <summary>
            Retrieves a Page from the provider based on the specified id.
            </summary>
            <param name="id">The Page id.</param>
            <returns>The Page object.</returns>
        </member>
        <member name="M:BlogEngine.Core.Providers.XmlBlogProvider.UpdatePage(BlogEngine.Core.Page)">
            <summary>
            Updates an existing Page in the data store specified by the provider.
            </summary>
            <param name="page">The page to update.</param>
        </member>
        <member name="M:BlogEngine.Core.Providers.XmlBlogProvider.GetFolder(BlogEngine.Core.Blog)">
            <summary>
                Gets the storage folder for the blog.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Providers.XmlBlogProvider.DeletePost(BlogEngine.Core.Post)">
            <summary>
            Deletes a post from the data store.
            </summary>
            <param name="post">
            The post to delete.
            </param>
        </member>
        <member name="M:BlogEngine.Core.Providers.XmlBlogProvider.FillPosts">
            <summary>
            Retrieves all posts from the data store
            </summary>
            <returns>
            List of Posts
            </returns>
        </member>
        <member name="M:BlogEngine.Core.Providers.XmlBlogProvider.InsertPost(BlogEngine.Core.Post)">
            <summary>
            Inserts a new Post to the data store.
            </summary>
            <param name="post">
            The post to insert.
            </param>
        </member>
        <member name="M:BlogEngine.Core.Providers.XmlBlogProvider.SelectPost(System.Guid)">
            <summary>
            Retrieves a Post from the provider based on the specified id.
            </summary>
            <param name="id">
            The Post id.
            </param>
            <returns>
            A Post object.
            </returns>
        </member>
        <member name="M:BlogEngine.Core.Providers.XmlBlogProvider.UpdatePost(BlogEngine.Core.Post)">
            <summary>
            Updates an existing Post in the data store specified by the provider.
            </summary>
            <param name="post">
            The post to update.
            </param>
        </member>
        <member name="P:BlogEngine.Core.Providers.XmlBlogProvider.Folder">
            <summary>
                Gets the storage folder of the current blog instance.
            </summary>
        </member>
        <member name="T:BlogEngine.Core.Providers.XmlFileSystemProvider">
            <summary>
            XmlBlogProvider Parial class for manageing all FileSystem methods
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Providers.XmlFileSystemProvider.BlogAbsolutePath(System.String)">
            <summary>
            gets the absolute file path from a virtual path.
            </summary>
            <param name="VirtualPath">the virtual path</param>
            <returns>the absolute path</returns>
        </member>
        <member name="M:BlogEngine.Core.Providers.XmlFileSystemProvider.ClearFileSystem">
            <summary>
            Clears a file system. This will delete all files and folders recursivly.
            </summary>
            <remarks>
            Handle with care... Possibly an internal method?
            </remarks>
        </member>
        <member name="M:BlogEngine.Core.Providers.XmlFileSystemProvider.CreateDirectory(System.String)">
            <summary>
            Creates a directory at a specific path
            </summary>
            <param name="VirtualPath">The virtual path to be created</param>
            <returns>the new Directory object created</returns>
            <remarks>
            Virtual path is the path starting from the /files/ containers
            The entity is created against the current blog id
            </remarks>
        </member>
        <member name="M:BlogEngine.Core.Providers.XmlFileSystemProvider.DeleteDirectory(System.String)">
            <summary>
            Deletes a spefic directory from a virtual path
            </summary>
            <param name="VirtualPath">The path to delete</param>
            <remarks>
            Virtual path is the path starting from the /files/ containers
            The entity is queried against to current blog id
            </remarks>
        </member>
        <member name="M:BlogEngine.Core.Providers.XmlFileSystemProvider.DirectoryExists(System.String)">
            <summary>
            Returns wether or not the specific directory by virtual path exists
            </summary>
            <param name="VirtualPath">The virtual path to query</param>
            <returns>boolean</returns>
        </member>
        <member name="M:BlogEngine.Core.Providers.XmlFileSystemProvider.GetDirectory(System.String)">
            <summary>
            gets a directory by the virtual path
            </summary>
            <param name="VirtualPath">the virtual path</param>
            <returns>the directory object or null for no directory found</returns>
        </member>
        <member name="M:BlogEngine.Core.Providers.XmlFileSystemProvider.GetDirectory(System.String,System.Boolean)">
            <summary>
            gets a directory by the virtual path
            </summary>
            <param name="VirtualPath">the virtual path</param>
            <param name="CreateNew">unused</param>
            <returns>the directory object</returns>
        </member>
        <member name="M:BlogEngine.Core.Providers.XmlFileSystemProvider.GetDirectory(BlogEngine.Core.FileSystem.Directory,System.String[])">
            <summary>
            gets a directory by a basedirectory and a string array of sub path tree
            </summary>
            <param name="BaseDirectory">the base directory object</param>
            <param name="SubPath">the params of sub path</param>
            <returns>the directory found, or null for no directory found</returns>
        </member>
        <member name="M:BlogEngine.Core.Providers.XmlFileSystemProvider.GetDirectory(BlogEngine.Core.FileSystem.Directory,System.Boolean,System.String[])">
            <summary>
            gets a directory by a basedirectory and a string array of sub path tree
            </summary>
            <param name="BaseDirectory">the base directory object</param>
            <param name="CreateNew">if set will create the directory structure</param>
            <param name="SubPath">the params of sub path</param>
            <returns>the directory found, or null for no directory found</returns>
        </member>
        <member name="M:BlogEngine.Core.Providers.XmlFileSystemProvider.GetDirectories(BlogEngine.Core.FileSystem.Directory)">
            <summary>
            gets all the directories underneath a base directory. Only searches one level.
            </summary>
            <param name="BaseDirectory">the base directory</param>
            <returns>collection of Directory objects</returns>
        </member>
        <member name="M:BlogEngine.Core.Providers.XmlFileSystemProvider.GetFiles(BlogEngine.Core.FileSystem.Directory)">
            <summary>
            gets all the files in a directory, only searches one level
            </summary>
            <param name="BaseDirectory">the base directory</param>
            <returns>collection of File objects</returns>
        </member>
        <member name="M:BlogEngine.Core.Providers.XmlFileSystemProvider.GetFile(System.String)">
            <summary>
            gets a specific file by virtual path
            </summary>
            <param name="VirtualPath">the virtual path of the file</param>
            <returns></returns>
        </member>
        <member name="M:BlogEngine.Core.Providers.XmlFileSystemProvider.FileExists(System.String)">
            <summary>
            boolean wether a file exists by its virtual path
            </summary>
            <param name="VirtualPath">the virtual path</param>
            <returns>boolean</returns>
        </member>
        <member name="M:BlogEngine.Core.Providers.XmlFileSystemProvider.DeleteFile(System.String)">
            <summary>
            deletes a file by virtual path
            </summary>
            <param name="VirtualPath">virtual path</param>
        </member>
        <member name="M:BlogEngine.Core.Providers.XmlFileSystemProvider.UploadFile(System.Byte[],System.String,BlogEngine.Core.FileSystem.Directory)">
            <summary>
            uploads a file to the provider container
            </summary>
            <param name="FileBinary">file contents as byte array</param>
            <param name="FileName">the file name</param>
            <param name="BaseDirectory">directory object that is the owner</param>
            <returns>the new file object</returns>
        </member>
        <member name="M:BlogEngine.Core.Providers.XmlFileSystemProvider.UploadFile(System.Byte[],System.String,BlogEngine.Core.FileSystem.Directory,System.Boolean)">
            <summary>
            uploads a file to the provider container
            </summary>
            <param name="FileBinary">the contents of the file as a byte array</param>
            <param name="FileName">the file name</param>
            <param name="BaseDirectory">the directory object that is the owner</param>
            <param name="Overwrite">boolean wether to overwrite the file if it exists.</param>
            <returns>the new file object</returns>
        </member>
        <member name="M:BlogEngine.Core.Providers.XmlFileSystemProvider.GetFileContents(BlogEngine.Core.FileSystem.File)">
            <summary>
            gets the file contents via Lazy load, however in the DbProvider the Contents are loaded when the initial object is created to cut down on DbReads
            </summary>
            <param name="BaseFile">the baseFile object to fill</param>
            <returns>the original file object</returns>
        </member>
        <member name="M:BlogEngine.Core.Providers.XmlFileSystemProvider.FileToByteArray(System.String)">
            <summary>
            Converts a file path to a byte array for handler processing
            </summary>
            <param name="FilePath">the file path to process</param>
            <returns>a new binary array</returns>
        </member>
        <member name="M:BlogEngine.Core.Providers.XmlFileSystemProvider.ImageThumbnail(System.String,System.Int32)">
            <summary>
            Not implemented. Throws a NotImplementedException.
            </summary>
            <param name="VirtualPath">unused</param>
            <param name="MaximumSize">unused</param>
            <returns>Nothing</returns>
        </member>
        <member name="T:BlogEngine.Core.RemoteFile">
            <summary>
            Class used to download files from a website address.
            </summary>
            <remarks>
            
            The purpose of this class is so there's one core way of downloading remote files with urls that are from
            outside users. There's various areas in BlogEngine where an attacker could supply an external url to the server
            and tie up resources.
            
            For example, the JavascriptHandler accepts off-server addresses as a path. An attacker could, for instance, pass the url
            to a file that's a few gigs in size, causing the server to get out-of-memory exceptions or some other errors. An attacker
            could also use this same method to use one BlogEngine instance to hammer another site by, again, passing an off-server
            address of the victims site to the JavascriptHandler. 
            
            RemoteFile makes use of two BlogSettings properties: AllowServerToDownloadRemoteFiles and RemoteFileDownloadTimeout.
            
            This class will not throw an exception if the Uri supplied points to a resource local to the running BlogEngine instance.
            
            There shouldn't be any security issues there, as the internal WebRequest instance is still calling it remotely. 
            Any local files that shouldn't be accessed by this won't be allowed by the remote call.
            
            </remarks>
        </member>
        <member name="M:BlogEngine.Core.RemoteFile.#ctor(System.Uri,System.Boolean)">
            <summary>
            Creates a new RemoteFile instance that can be used to download files from another server.
            </summary>
            <param name="filePath">The url of the file to be downloaded.</param>
            <param name="ignoreRemoteDownloadSettings">Set to true if RemoteFile should ignore the current BlogEngine instance's remote download settings.</param>
        </member>
        <member name="M:BlogEngine.Core.RemoteFile.GetWebResponse">
            <summary>
            Returns the WebResponse used to download this file.
            </summary>
            <returns></returns>
            <remarks>
            
            This method is meant for outside users who need specific access to the WebResponse this class
            generates. They're responsible for disposing of it.
            
            </remarks>
        </member>
        <member name="M:BlogEngine.Core.RemoteFile.GetFileAsString">
            <summary>
            Returns the remote file as a string.
            </summary>
            <returns></returns>
            <remarks>
            This returns the resulting stream as a string as passed through a StreamReader.
            </remarks>
        </member>
        <member name="M:BlogEngine.Core.RemoteFile.GetWebRequest">
            <summary>
            Creates the WebRequest object used internally for this RemoteFile instance.
            </summary>
            <returns>
            
            The WebRequest should not be passed outside of this instance, as it will allow tampering. Anyone
            that needs more fine control over the downloading process should probably be using the WebRequest
            class on its own.
            
            </returns>
        </member>
        <member name="P:BlogEngine.Core.RemoteFile.IgnoreRemoteDownloadSettings">
            <summary>
            Gets whether this RemoteFile instance is ignoring remote download rules set in the current BlogSettings instance.
            </summary>
            <remarks>
            
            This should only be set to true if the supplied url is a verified resource. Use at your own risk.
            
            </remarks>
        </member>
        <member name="P:BlogEngine.Core.RemoteFile.UriPointsToLocalResource">
            <summary>
            Gets whether the Uri property is pointed at a resource local to the running BlogEngine instance.
            </summary>
            <remarks>
            This property is to determine whether the remote path supplied is pointing to a local file instance.
            This check is required because when a user has CompressWebResource set to true, it sends js.axd
            the full site path as its query parameter.
            </remarks>
        </member>
        <member name="P:BlogEngine.Core.RemoteFile.Uri">
            <summary>
            Gets the Uri of the remote file being downloaded.
            </summary>
        </member>
        <member name="P:BlogEngine.Core.RemoteFile.TimeoutLength">
            <summary>
            Gets or sets the length of time, in milliseconds, that a remote file download attempt can last before timing out.
            </summary>
            <remarks>
            This value can only be set if the instance is supposed to ignore the remote download settings set
            in the current BlogSettings instance. 
            
            Set this value to 0 if there should be no timeout.
            
            </remarks>
        </member>
        <member name="T:BlogEngine.Core.CustomIdentity">
            <summary>
            IIdentity class used for authentication.
            </summary>
            <remarks>
            Need to inherit from MarshalByRefObject to prevent runtime errors with Cassini when using a custom identity.
            </remarks>
        </member>
        <member name="M:BlogEngine.Core.CustomIdentity.#ctor(System.String,System.Boolean)">
            <summary>
            Creates a new intance using the specified username and isAuthenticated bit.
            </summary>
            <param name="username">The user's username.</param>
            <param name="isAuthenticated">Whether or not the user is authenticated.</param>
        </member>
        <member name="M:BlogEngine.Core.CustomIdentity.#ctor(System.String,System.String)">
            <summary>
            Creates a new instance, authenticating the user using the given credentials.
            </summary>
            <param name="username">The user's username.</param>
            <param name="password">The user's password.</param>
        </member>
        <member name="P:BlogEngine.Core.CustomIdentity.AuthenticationType">
            <summary>
            Gets the type of authentication used by BlogEngine.NET.
            </summary>
        </member>
        <member name="P:BlogEngine.Core.CustomIdentity.IsAuthenticated">
            <summary>
            Gets a value that indicates whether the user has been authenticated.
            </summary>
        </member>
        <member name="P:BlogEngine.Core.CustomIdentity.Name">
            <summary>
            Gets the name of the current user.
            </summary>
        </member>
        <member name="T:BlogEngine.Core.CustomPrincipal">
            <summary>
            Custom IPrincipal class used for authorization.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.CustomPrincipal.IsInRole(System.String)">
            <summary>
            Determines whether the current principal belongs to the specified role.
            </summary>
            <param name="roleName">The name of the role for which to check membership.</param>
            <returns>true if the current principal is a member of the specified role; otherwise, false.</returns>
        </member>
        <member name="M:BlogEngine.Core.CustomPrincipal.#ctor(System.Security.Principal.IIdentity)">
            <summary>
            Creates a new instance using the given IIdentity object.
            </summary>
            <param name="identity"></param>
        </member>
        <member name="P:BlogEngine.Core.CustomPrincipal.Identity">
            <summary>
            Gets the identity of the current principal.
            </summary>
        </member>
        <member name="T:BlogEngine.Core.Right">
            <summary>
            A wrapper class for Rights enum values that allows for providing more information.
            </summary>
            <remarks>
            
            This class needs to be kept in sync with Role creation/editing/deleting.
            
            
            
            </remarks>
        </member>
        <member name="M:BlogEngine.Core.Right.Init(System.Web.HttpApplication)">
            <summary>
            Initializes a module and prepares it to handle requests.
            </summary>
            <param name="context">An <see cref="T:System.Web.HttpApplication"/> that provides access to the methods, properties, and events common to all application objects within an ASP.NET application</param>
        </member>
        <member name="M:BlogEngine.Core.Right.ContextBeginRequest(System.Object,System.EventArgs)">
            <summary>
            Handles the BeginRequest event of the context control.
            </summary>
            <param name="sender">
            The source of the event.
            </param>
            <param name="e">
            The <see cref="T:System.EventArgs"/> instance containing the event data.
            </param>
        </member>
        <member name="M:BlogEngine.Core.Right.Dispose">
            <summary>
            Disposes of the resources (other than memory) used by the module that implements <see cref="T:System.Web.IHttpModule"/>.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Right.RefreshAllRights">
            <summary>
            Method that should be called any time Rights are changed and saved.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Right.GetDefaultRights(System.String)">
            <summary>
            Gets the list of default rights for the given role name.
            </summary>
            <param name="roleName">The role for which we are obtaining rights.</param>
            <returns>If the role is found, a list of the appropriate rights. Otherwise, an empty list of rights.</returns>
        </member>
        <member name="M:BlogEngine.Core.Right.OnRenamingRole(System.String,System.String)">
            <summary>
            Handles updating Role name changes, so Role names tied to Rights stay in sync.
            </summary>
            <param name="oldname">The old Role name.</param>
            <param name="newname">The new Role name.</param>
        </member>
        <member name="M:BlogEngine.Core.Right.OnRoleDeleting(System.String)">
            <summary>
            Handles removing Roles tied to Rights when a Role will be deleted.
            </summary>
            <param name="roleName"></param>
        </member>
        <member name="M:BlogEngine.Core.Right.PrepareRoleName(System.String)">
            <summary>
            Call this method for verifying role names and then trimming the string.
            </summary>
            <param name="roleName"></param>
            <returns></returns>
        </member>
        <member name="M:BlogEngine.Core.Right.GetAllRights">
            <summary>
            Returns an IEnumerable of all of the Rights that exist on BlogEngine.
            </summary>
            <returns></returns>
        </member>
        <member name="M:BlogEngine.Core.Right.GetRightByName(System.String)">
            <summary>
            Returns a Right instance based on its name.
            </summary>
            <param name="rightName"></param>
            <returns></returns>
        </member>
        <member name="M:BlogEngine.Core.Right.GetRightByFlag(BlogEngine.Core.Rights)">
            <summary>
            Returns a Right instance based on the flag.
            </summary>
            <param name="flag"></param>
            <returns></returns>
        </member>
        <member name="M:BlogEngine.Core.Right.GetRights(System.String)">
            <summary>
            Returns an IEnumerable of Rights that are in the given role.
            </summary>
            <param name="roleName"></param>
            <returns></returns>
        </member>
        <member name="M:BlogEngine.Core.Right.GetRights(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Returns an IEnumerable of Rights that are in all of the given roles.
            </summary>
            <param name="roles"></param>
            <returns></returns>
        </member>
        <member name="M:BlogEngine.Core.Right.HasRight(BlogEngine.Core.Rights,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Gets whether or not a Right exists within any of the given roles.
            </summary>
            <param name="right"></param>
            <param name="roles"></param>
            <returns>
            
            Use this method instead of GetRights().Contains() as it'll be
            much faster than having to create a new collection of Right instances each time.
            
            </returns>
        </member>
        <member name="M:BlogEngine.Core.Right.RightExists(System.String)">
            <summary>
            Checks to see if a Right exists by the given name.
            </summary>
            <param name="rightName"></param>
            <returns></returns>
        </member>
        <member name="M:BlogEngine.Core.Right.#ctor(BlogEngine.Core.Rights,System.String)">
            <summary>
            Private constructor for creating a Right instance.
            </summary>
            <param name="Right"></param>
            <param name="RightEnumName"></param>
        </member>
        <member name="M:BlogEngine.Core.Right.AddRole(System.String)">
            <summary>
            Adds a role to the list of roles that have this Right.
            </summary>
            <param name="roleName"></param>
            <returns>True if the role doesn't already exist in the list of roles. Otherwise, false.</returns>
            <remarks>
            
            Use this method specifically to add roles to the internal list. This lets us keep track
            of what's added to it.
            
            </remarks>
        </member>
        <member name="M:BlogEngine.Core.Right.RemoveRole(System.String)">
            <summary>
            Removes a Role from the collection of roles that allow this Right.
            </summary>
            <param name="roleName"></param>
            <returns>Returns true if the role was removed, false otherwise.</returns>
            <remarks>
            
            Use this method specifically to remove roles from the internal list. This lets us keep track
            of what's removed from it.
            
            </remarks>
        </member>
        <member name="M:BlogEngine.Core.Right.ClearRoles">
            <summary>
            Clears all the roles in the roles list. This is only meant to be used during the static RefreshAllRoles method.
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Right.DisplayName">
            <summary>
            Returns a display-friendly version of this Right's name.
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Right.Description">
            <summary>
            Returns the empty string.
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Right.Flag">
            <summary>
            Gets the Right value for this Right instance.
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Right.Name">
            <summary>
            Gets the name of this right.
            </summary>
            <remarks>
            
            This returns the string name of the Flag enum that this instance represents.
            
            This value should be the one that's serialized to the provider's data store as
            it's far less likely to change than the numerical value.
            
            </remarks>
        </member>
        <member name="P:BlogEngine.Core.Right.Roles">
            <summary>
            Gets the Roles that currently have this Right.
            </summary>
            <remarks>
            This returns a read only wrapper around the internal roles list. The Roles list is not allowed
            to be altered anywhere. Changes to the list need to go through the proper channels.
            </remarks>
        </member>
        <member name="T:BlogEngine.Core.Rights">
            <summary>
            Enum that represents rights or permissions that are used through out BlogEngine.
            </summary>
            <remarks>
            
            Each Rights enum value is wrapped by an associated Right instance that contains information about roles/descriptions/etc.
            
            When a Rights value is serialized to persistant storage, the enum's string name should be used in order to prevent
            conflicts with value changes due to new values being added(either through updates or customization).
            
            Also, at the moment this doesn't nearly represent all the current possible actions. This is just a few
            test values to play with.
            
            I'd recommend using a common word pattern when used. Ie: Create/Edit/Delete/Publish as prefixes. The names
            should be very specific to what they allow in order to avoid confusion. For example, don't use a name like
            "ViewPosts". Use something that also specifies the kinds of posts, like ViewPublicPosts, ViewPrivatePosts, or
            ViewUnpublishedPosts.
            
            </remarks>
        </member>
        <member name="F:BlogEngine.Core.Rights.None">
            <summary>
            Represents a user that has no rights or permissions. This flag should not be used in combination with any other flag.
            </summary>
            <remarks>
            
            This value isn't meant for public consumption.
            
            </remarks>
        </member>
        <member name="F:BlogEngine.Core.Rights.ViewDetailedErrorMessages">
            <summary>
            A user is allowed to view exception messages.
            </summary>
        </member>
        <member name="F:BlogEngine.Core.Rights.AccessAdminPages">
            <summary>
            A user is allowed to access administration pages.
            Typically, a blog where self-registration is allowed
            would restrict this right from guest users.
            </summary>
        </member>
        <member name="F:BlogEngine.Core.Rights.AccessAdminSettingsPages">
            <summary>
            A user is allowed to access admin settings pages.
            </summary>
        </member>
        <member name="F:BlogEngine.Core.Rights.ManageWidgets">
            <summary>
            A user is allowed to manage widgets.
            </summary>
        </member>
        <member name="F:BlogEngine.Core.Rights.ViewPublicComments">
            <summary>
            A user is allowed to view comments on a post.
            </summary>
        </member>
        <member name="F:BlogEngine.Core.Rights.ViewUnmoderatedComments">
            <summary>
            A user is allowed to view comments that have not been moderation yet.
            </summary>
        </member>
        <member name="F:BlogEngine.Core.Rights.CreateComments">
            <summary>
            A user is allowed to create and submit comments for posts or pages.
            </summary>
        </member>
        <member name="F:BlogEngine.Core.Rights.ModerateComments">
            <summary>
            User can approve, delete, or mark comments as spam.
            </summary>
        </member>
        <member name="F:BlogEngine.Core.Rights.ViewPublicPosts">
            <summary>
            A user is allowed to view posts that are both published and public.
            </summary>
        </member>
        <member name="F:BlogEngine.Core.Rights.ViewUnpublishedPosts">
            <summary>
            A user is allowed to view unpublished posts.
            </summary>
        </member>
        <member name="F:BlogEngine.Core.Rights.CreateNewPosts">
            <summary>
            A user can create new posts. 
            </summary>
        </member>
        <member name="F:BlogEngine.Core.Rights.EditOwnPosts">
            <summary>
            A user can edit their own posts. 
            </summary>
        </member>
        <member name="F:BlogEngine.Core.Rights.EditOtherUsersPosts">
            <summary>
            A user can edit posts created by other users.
            </summary>
        </member>
        <member name="F:BlogEngine.Core.Rights.DeleteOwnPosts">
            <summary>
            A user can delete their own posts.
            </summary>
        </member>
        <member name="F:BlogEngine.Core.Rights.DeleteOtherUsersPosts">
            <summary>
            A user can delete posts created by other users.
            </summary>
        </member>
        <member name="F:BlogEngine.Core.Rights.PublishOwnPosts">
            <summary>
            A user can set whether or not their own posts are published.
            </summary>
        </member>
        <member name="F:BlogEngine.Core.Rights.PublishOtherUsersPosts">
            <summary>
            A user can set whether or not another user's posts are published.
            </summary>
        </member>
        <member name="F:BlogEngine.Core.Rights.ViewPublicPages">
            <summary>
            A user can view public, published pages.
            </summary>
        </member>
        <member name="F:BlogEngine.Core.Rights.ViewUnpublishedPages">
            <summary>
            A user can view unpublished pages.
            </summary>
        </member>
        <member name="F:BlogEngine.Core.Rights.CreateNewPages">
            <summary>
            A user can create new pages.
            </summary>
        </member>
        <member name="F:BlogEngine.Core.Rights.EditOwnPages">
            <summary>
            A user can edit pages they've created.
            </summary>
        </member>
        <member name="F:BlogEngine.Core.Rights.EditOtherUsersPages">
            <summary>
            A user can edit pages other users have created.
            </summary>
        </member>
        <member name="F:BlogEngine.Core.Rights.DeleteOwnPages">
            <summary>
            A user can delete pages they've created.
            </summary>
        </member>
        <member name="F:BlogEngine.Core.Rights.DeleteOtherUsersPages">
            <summary>
            A user can delete pages other users have created.
            </summary>
        </member>
        <member name="F:BlogEngine.Core.Rights.PublishOwnPages">
            <summary>
            A user can set whether or not their own pages are published.
            </summary>
        </member>
        <member name="F:BlogEngine.Core.Rights.PublishOtherUsersPages">
            <summary>
            A user can set whether or not another user's pages are published.
            </summary>
        </member>
        <member name="F:BlogEngine.Core.Rights.ViewRatingsOnPosts">
            <summary>
            A user can view ratings on posts.
            </summary>
        </member>
        <member name="F:BlogEngine.Core.Rights.SubmitRatingsOnPosts">
            <summary>
            A user can submit ratings on posts.
            </summary>
        </member>
        <member name="F:BlogEngine.Core.Rights.ViewRoles">
            <summary>
            A user can view roles.
            </summary>
        </member>
        <member name="F:BlogEngine.Core.Rights.CreateNewRoles">
            <summary>
            A user can create new roles.
            </summary>
        </member>
        <member name="F:BlogEngine.Core.Rights.EditRoles">
            <summary>
            A user can edit existing roles.
            </summary>
        </member>
        <member name="F:BlogEngine.Core.Rights.DeleteRoles">
            <summary>
            A user can delete existing roles.
            </summary>
        </member>
        <member name="F:BlogEngine.Core.Rights.EditOwnRoles">
            <summary>
            A user is allowed to edit their own roles.
            </summary>
        </member>
        <member name="F:BlogEngine.Core.Rights.EditOtherUsersRoles">
            <summary>
            A user is allowed to edit the roles of other users.
            </summary>
        </member>
        <member name="F:BlogEngine.Core.Rights.CreateNewUsers">
            <summary>
            A user is allowed to register/create a new account. 
            </summary>
        </member>
        <member name="F:BlogEngine.Core.Rights.DeleteUserSelf">
            <summary>
            A user is allowed to delete their own account.
            </summary>
        </member>
        <member name="F:BlogEngine.Core.Rights.DeleteUsersOtherThanSelf">
            <summary>
            A user is allowed to delete accounts they do not own.
            </summary>
        </member>
        <member name="F:BlogEngine.Core.Rights.EditOwnUser">
            <summary>
            A user is allowed to edit their own account information.
            </summary>
        </member>
        <member name="F:BlogEngine.Core.Rights.EditOtherUsers">
            <summary>
            A user is allowed to edit the account information of other users.
            </summary>
        </member>
        <member name="T:BlogEngine.Core.RightDetailsAttribute">
            <summary>
            Attribute used to provide extra information about a Rights enum value.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.RightDetailsAttribute.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:BlogEngine.Core.RightDetailsAttribute.DescriptionResourceLabelKey">
            <summary>
            Key for grabbing a description from a resource file.
            </summary>
        </member>
        <member name="P:BlogEngine.Core.RightDetailsAttribute.NameResourceLabelKey">
            <summary>
            Key for grabbing a name from a resource file.
            </summary>
        </member>
        <member name="P:BlogEngine.Core.RightDetailsAttribute.Category">
            <summary>
            The category a Right is for.
            </summary>
        </member>
        <member name="T:BlogEngine.Core.RightCategory">
            <summary>
            Categories for Rights.
            </summary>
        </member>
        <member name="F:BlogEngine.Core.RightCategory.None">
            <summary>
            No category
            </summary>
        </member>
        <member name="F:BlogEngine.Core.RightCategory.General">
            <summary>
            General category
            </summary>
        </member>
        <member name="F:BlogEngine.Core.RightCategory.Comments">
            <summary>
            Comments category
            </summary>
        </member>
        <member name="F:BlogEngine.Core.RightCategory.Pages">
            <summary>
            Pages category
            </summary>
        </member>
        <member name="F:BlogEngine.Core.RightCategory.Posts">
            <summary>
            Post category
            </summary>
        </member>
        <member name="F:BlogEngine.Core.RightCategory.Users">
            <summary>
            Users category
            </summary>
        </member>
        <member name="F:BlogEngine.Core.RightCategory.Roles">
            <summary>
            Roles
            </summary>
        </member>
        <member name="T:BlogEngine.Core.Security">
            <summary>
            Class to provide a unified area of authentication/authorization checking.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Security.Dispose">
            <summary>
            Disposes of the resources (other than memory) used by the module that implements <see cref="T:System.Web.IHttpModule"/>.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Security.Init(System.Web.HttpApplication)">
            <summary>
            Initializes a module and prepares it to handle requests.
            </summary>
            <param name="context">An <see cref="T:System.Web.HttpApplication"/> that provides access to the methods, properties, and events common to all application objects within an ASP.NET application</param>
        </member>
        <member name="M:BlogEngine.Core.Security.ContextAuthenticateRequest(System.Object,System.EventArgs)">
            <summary>
            Handles the AuthenticateRequest event of the context control.
            </summary>
            <param name="sender">
            The source of the event.
            </param>
            <param name="e">
            The <see cref="T:System.EventArgs"/> instance containing the event data.
            </param>
        </member>
        <member name="M:BlogEngine.Core.Security.SignOut">
            <summary>
            Signs out user out of the current blog instance.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Security.AuthenticateUser(System.String,System.String,System.Boolean)">
            <summary>
            Attempts to sign the user into the current blog instance.
            </summary>
            <param name="username">The user's username.</param>
            <param name="password">The user's password.</param>
            <param name="rememberMe">Whether or not to persist the user's sign-in state.</param>
            <returns>True if the user is successfully authenticated and signed in; false otherwise.</returns>
        </member>
        <member name="M:BlogEngine.Core.Security.CurrentUserRights">
            <summary>
            Returns an IEnumerable of Rights that belong to the ecurrent user.
            </summary>
            <returns></returns>
        </member>
        <member name="M:BlogEngine.Core.Security.DemandUserHasRight(BlogEngine.Core.Rights,System.Boolean)">
            <summary>
            If the current user does not have the requested right, either redirects to the login page,
            or throws a SecurityException.
            </summary>
            <param name="right"></param>
            <param name="redirectToLoginPage">
            If true and user does not have rights, redirects to the login page.
            If false and user does not have rights, throws a security exception.
            </param>
        </member>
        <member name="M:BlogEngine.Core.Security.DemandUserHasRight(BlogEngine.Core.AuthorizationCheck,System.Boolean,BlogEngine.Core.Rights[])">
            <summary>
            If the current user does not have the requested rights, either redirects to the login page,
            or throws a SecurityException.
            </summary>
            <param name="authCheck"></param>
            <param name="redirectIfUnauthorized">
            If true and user does not have rights, redirects to the login page or homepage.
            If false and user does not have rights, throws a security exception.
            </param>
            <param name="rights"></param>
        </member>
        <member name="M:BlogEngine.Core.Security.RedirectForUnauthorizedRequest">
            <summary>
            Redirects unauthenticated users to the login page.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Security.IsAuthorizedTo(BlogEngine.Core.Rights)">
            <summary>
            Returns whether or not the current user has the passed in Right.
            </summary>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:BlogEngine.Core.Security.IsAuthorizedTo(BlogEngine.Core.AuthorizationCheck,System.Collections.Generic.IEnumerable{BlogEngine.Core.Rights})">
            <summary>
            Returns whether the current user passes authorization on the rights based on the given AuthorizationCheck.
            </summary>
            <param name="authCheck"></param>
            <param name="rights"></param>
            <returns></returns>
        </member>
        <member name="M:BlogEngine.Core.Security.IsSystemRole(System.String)">
            <summary>
            Returns whether a role is a System role.
            </summary>
            <param name="roleName">The name of the role.</param>
            <returns>true if the roleName is a system role, otherwiser false</returns>
        </member>
        <member name="M:BlogEngine.Core.Security.IsAuthorizedTo(BlogEngine.Core.AuthorizationCheck,BlogEngine.Core.Rights[])">
            <summary>
            Returns whether the current user passes authorization on the rights based on the given AuthorizationCheck.
            </summary>
            <param name="authCheck"></param>
            <param name="rights"></param>
            <returns></returns>
        </member>
        <member name="M:BlogEngine.Core.Security.GetCurrentUserRoles">
            <summary>
            Helper method that returns the correct roles based on authentication.
            </summary>
            <returns></returns>
        </member>
        <member name="M:BlogEngine.Core.Security.ImpersonateUser(System.String,System.String)">
            <summary>
            Impersonates a user for the duration of the HTTP request.
            </summary>
            <param name="username">The username</param>
            <param name="password">The password</param>
            <returns>True if the credentials are correct and impersonation succeeds</returns>
        </member>
        <member name="P:BlogEngine.Core.Security.FormsAuthCookieName">
            <summary>
            Name of the Forms authentication cookie for the current blog instance.
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Security.CurrentMembershipUser">
            <summary>
            If the current user is authenticated, returns the current MembershipUser. If not, returns null. This is just a shortcut to Membership.GetUser().
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Security.CurrentUser">
            <summary>
            Gets the current user for the current HttpContext.
            </summary>
            <remarks>
            This should always return HttpContext.Current.User. That value and Thread.CurrentPrincipal can't be
            guaranteed to always be the same value, as they can be set independently from one another. Looking
            through the .Net source, the System.Web.Security.Roles class also returns the HttpContext's User.
            </remarks>
        </member>
        <member name="P:BlogEngine.Core.Security.IsAuthenticated">
            <summary>
            Gets whether the current user is logged in.
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Security.IsAdministrator">
            <summary>
            Gets whether the currently logged in user is in the administrator role.
            </summary>
        </member>
        <member name="T:BlogEngine.Core.AuthorizationCheck">
            <summary>
            Enum for setting how rights should be checked for.
            </summary>
        </member>
        <member name="F:BlogEngine.Core.AuthorizationCheck.HasAny">
            <summary>
            A user will be considered authorized if they have any of the given Rights.
            </summary>
        </member>
        <member name="F:BlogEngine.Core.AuthorizationCheck.HasAll">
            <summary>
            A user will be considered authorized if they have all of the given Rights.
            </summary>
        </member>
        <member name="T:BlogEngine.Core.SecuritySiteMapProvider">
            <summary>
            Implementation of the XmlSiteMapProvider that is Rights aware.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.SecuritySiteMapProvider.IsAccessibleToUser(System.Web.HttpContext,System.Web.SiteMapNode)">
            <summary>
            Returns whether the SiteMapNode is accessible to the current user.
            </summary>
        </member>
        <member name="T:BlogEngine.Core.GalleryServer.GalleryFeedContext">
            <summary>
            There are no comments for GalleryFeedContext in the schema.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.GalleryServer.GalleryFeedContext.#ctor(System.Uri)">
            <summary>
            Initialize a new GalleryFeedContext object.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.GalleryServer.GalleryFeedContext.ResolveTypeFromName(System.String)">
            <summary>
            Since the namespace configured for this service reference
            in Visual Studio is different from the one indicated in the
            server schema, use type-mappers to map between the two.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.GalleryServer.GalleryFeedContext.ResolveNameFromType(System.Type)">
            <summary>
            Since the namespace configured for this service reference
            in Visual Studio is different from the one indicated in the
            server schema, use type-mappers to map between the two.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.GalleryServer.GalleryFeedContext.AddToPackages(BlogEngine.Core.GalleryServer.PublishedPackage)">
            <summary>
            There are no comments for Packages in the schema.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.GalleryServer.GalleryFeedContext.AddToScreenshots(BlogEngine.Core.GalleryServer.PublishedScreenshot)">
            <summary>
            There are no comments for Screenshots in the schema.
            </summary>
        </member>
        <member name="P:BlogEngine.Core.GalleryServer.GalleryFeedContext.Packages">
            <summary>
            There are no comments for Packages in the schema.
            </summary>
        </member>
        <member name="P:BlogEngine.Core.GalleryServer.GalleryFeedContext.Screenshots">
            <summary>
            There are no comments for Screenshots in the schema.
            </summary>
        </member>
        <member name="T:BlogEngine.Core.GalleryServer.PublishedPackage">
            <summary>
            There are no comments for Gallery.Infrastructure.FeedModels.PublishedPackage in the schema.
            </summary>
            <KeyProperties>
            Id
            Version
            </KeyProperties>
        </member>
        <member name="M:BlogEngine.Core.GalleryServer.PublishedPackage.CreatePublishedPackage(System.String,System.String,System.Int64,System.Decimal,System.Boolean,System.Boolean,System.Double,System.Int32,System.Int32,System.DateTime,System.DateTime,System.DateTime,System.Double,System.Int32,System.Int32)">
            <summary>
            Create a new PublishedPackage object.
            </summary>
            <param name="ID">Initial value of Id.</param>
            <param name="version">Initial value of Version.</param>
            <param name="packageSize">Initial value of PackageSize.</param>
            <param name="price">Initial value of Price.</param>
            <param name="requireLicenseAcceptance">Initial value of RequireLicenseAcceptance.</param>
            <param name="isLatestVersion">Initial value of IsLatestVersion.</param>
            <param name="versionRating">Initial value of VersionRating.</param>
            <param name="versionRatingsCount">Initial value of VersionRatingsCount.</param>
            <param name="versionDownloadCount">Initial value of VersionDownloadCount.</param>
            <param name="created">Initial value of Created.</param>
            <param name="lastUpdated">Initial value of LastUpdated.</param>
            <param name="published">Initial value of Published.</param>
            <param name="rating">Initial value of Rating.</param>
            <param name="ratingsCount">Initial value of RatingsCount.</param>
            <param name="downloadCount">Initial value of DownloadCount.</param>
        </member>
        <member name="P:BlogEngine.Core.GalleryServer.PublishedPackage.Id">
            <summary>
            There are no comments for Property Id in the schema.
            </summary>
        </member>
        <member name="P:BlogEngine.Core.GalleryServer.PublishedPackage.Version">
            <summary>
            There are no comments for Property Version in the schema.
            </summary>
        </member>
        <member name="P:BlogEngine.Core.GalleryServer.PublishedPackage.Title">
            <summary>
            There are no comments for Property Title in the schema.
            </summary>
        </member>
        <member name="P:BlogEngine.Core.GalleryServer.PublishedPackage.Authors">
            <summary>
            There are no comments for Property Authors in the schema.
            </summary>
        </member>
        <member name="P:BlogEngine.Core.GalleryServer.PublishedPackage.PackageType">
            <summary>
            There are no comments for Property PackageType in the schema.
            </summary>
        </member>
        <member name="P:BlogEngine.Core.GalleryServer.PublishedPackage.Summary">
            <summary>
            There are no comments for Property Summary in the schema.
            </summary>
        </member>
        <member name="P:BlogEngine.Core.GalleryServer.PublishedPackage.Description">
            <summary>
            There are no comments for Property Description in the schema.
            </summary>
        </member>
        <member name="P:BlogEngine.Core.GalleryServer.PublishedPackage.Copyright">
            <summary>
            There are no comments for Property Copyright in the schema.
            </summary>
        </member>
        <member name="P:BlogEngine.Core.GalleryServer.PublishedPackage.PackageHashAlgorithm">
            <summary>
            There are no comments for Property PackageHashAlgorithm in the schema.
            </summary>
        </member>
        <member name="P:BlogEngine.Core.GalleryServer.PublishedPackage.PackageHash">
            <summary>
            There are no comments for Property PackageHash in the schema.
            </summary>
        </member>
        <member name="P:BlogEngine.Core.GalleryServer.PublishedPackage.PackageSize">
            <summary>
            There are no comments for Property PackageSize in the schema.
            </summary>
        </member>
        <member name="P:BlogEngine.Core.GalleryServer.PublishedPackage.Price">
            <summary>
            There are no comments for Property Price in the schema.
            </summary>
        </member>
        <member name="P:BlogEngine.Core.GalleryServer.PublishedPackage.RequireLicenseAcceptance">
            <summary>
            There are no comments for Property RequireLicenseAcceptance in the schema.
            </summary>
        </member>
        <member name="P:BlogEngine.Core.GalleryServer.PublishedPackage.IsLatestVersion">
            <summary>
            There are no comments for Property IsLatestVersion in the schema.
            </summary>
        </member>
        <member name="P:BlogEngine.Core.GalleryServer.PublishedPackage.VersionRating">
            <summary>
            There are no comments for Property VersionRating in the schema.
            </summary>
        </member>
        <member name="P:BlogEngine.Core.GalleryServer.PublishedPackage.VersionRatingsCount">
            <summary>
            There are no comments for Property VersionRatingsCount in the schema.
            </summary>
        </member>
        <member name="P:BlogEngine.Core.GalleryServer.PublishedPackage.VersionDownloadCount">
            <summary>
            There are no comments for Property VersionDownloadCount in the schema.
            </summary>
        </member>
        <member name="P:BlogEngine.Core.GalleryServer.PublishedPackage.Created">
            <summary>
            There are no comments for Property Created in the schema.
            </summary>
        </member>
        <member name="P:BlogEngine.Core.GalleryServer.PublishedPackage.LastUpdated">
            <summary>
            There are no comments for Property LastUpdated in the schema.
            </summary>
        </member>
        <member name="P:BlogEngine.Core.GalleryServer.PublishedPackage.Published">
            <summary>
            There are no comments for Property Published in the schema.
            </summary>
        </member>
        <member name="P:BlogEngine.Core.GalleryServer.PublishedPackage.ExternalPackageUrl">
            <summary>
            There are no comments for Property ExternalPackageUrl in the schema.
            </summary>
        </member>
        <member name="P:BlogEngine.Core.GalleryServer.PublishedPackage.ProjectUrl">
            <summary>
            There are no comments for Property ProjectUrl in the schema.
            </summary>
        </member>
        <member name="P:BlogEngine.Core.GalleryServer.PublishedPackage.LicenseUrl">
            <summary>
            There are no comments for Property LicenseUrl in the schema.
            </summary>
        </member>
        <member name="P:BlogEngine.Core.GalleryServer.PublishedPackage.IconUrl">
            <summary>
            There are no comments for Property IconUrl in the schema.
            </summary>
        </member>
        <member name="P:BlogEngine.Core.GalleryServer.PublishedPackage.Rating">
            <summary>
            There are no comments for Property Rating in the schema.
            </summary>
        </member>
        <member name="P:BlogEngine.Core.GalleryServer.PublishedPackage.RatingsCount">
            <summary>
            There are no comments for Property RatingsCount in the schema.
            </summary>
        </member>
        <member name="P:BlogEngine.Core.GalleryServer.PublishedPackage.DownloadCount">
            <summary>
            There are no comments for Property DownloadCount in the schema.
            </summary>
        </member>
        <member name="P:BlogEngine.Core.GalleryServer.PublishedPackage.Categories">
            <summary>
            There are no comments for Property Categories in the schema.
            </summary>
        </member>
        <member name="P:BlogEngine.Core.GalleryServer.PublishedPackage.Tags">
            <summary>
            There are no comments for Property Tags in the schema.
            </summary>
        </member>
        <member name="P:BlogEngine.Core.GalleryServer.PublishedPackage.Dependencies">
            <summary>
            There are no comments for Property Dependencies in the schema.
            </summary>
        </member>
        <member name="P:BlogEngine.Core.GalleryServer.PublishedPackage.ReportAbuseUrl">
            <summary>
            There are no comments for Property ReportAbuseUrl in the schema.
            </summary>
        </member>
        <member name="P:BlogEngine.Core.GalleryServer.PublishedPackage.GalleryDetailsUrl">
            <summary>
            There are no comments for Property GalleryDetailsUrl in the schema.
            </summary>
        </member>
        <member name="P:BlogEngine.Core.GalleryServer.PublishedPackage.Screenshots">
            <summary>
            There are no comments for Screenshots in the schema.
            </summary>
        </member>
        <member name="T:BlogEngine.Core.GalleryServer.PublishedScreenshot">
            <summary>
            There are no comments for Gallery.Infrastructure.FeedModels.PublishedScreenshot in the schema.
            </summary>
            <KeyProperties>
            Id
            </KeyProperties>
        </member>
        <member name="M:BlogEngine.Core.GalleryServer.PublishedScreenshot.CreatePublishedScreenshot(System.Int32)">
            <summary>
            Create a new PublishedScreenshot object.
            </summary>
            <param name="ID">Initial value of Id.</param>
        </member>
        <member name="P:BlogEngine.Core.GalleryServer.PublishedScreenshot.Id">
            <summary>
            There are no comments for Property Id in the schema.
            </summary>
        </member>
        <member name="P:BlogEngine.Core.GalleryServer.PublishedScreenshot.PublishedPackageId">
            <summary>
            There are no comments for Property PublishedPackageId in the schema.
            </summary>
        </member>
        <member name="P:BlogEngine.Core.GalleryServer.PublishedScreenshot.PublishedPackageVersion">
            <summary>
            There are no comments for Property PublishedPackageVersion in the schema.
            </summary>
        </member>
        <member name="P:BlogEngine.Core.GalleryServer.PublishedScreenshot.ScreenshotUri">
            <summary>
            There are no comments for Property ScreenshotUri in the schema.
            </summary>
        </member>
        <member name="P:BlogEngine.Core.GalleryServer.PublishedScreenshot.Caption">
            <summary>
            There are no comments for Property Caption in the schema.
            </summary>
        </member>
        <member name="T:BlogEngine.Core.ServingLocation">
            <summary>
            The location where the serving takes place
            </summary>
        </member>
        <member name="F:BlogEngine.Core.ServingLocation.None">
            <summary>
                Is used to indicate that a location hasn't been chosen.
            </summary>
        </member>
        <member name="F:BlogEngine.Core.ServingLocation.SinglePost">
            <summary>
                Is used when a single post is served from post.aspx.
            </summary>
        </member>
        <member name="F:BlogEngine.Core.ServingLocation.PostList">
            <summary>
                Is used when multiple posts are served using postlist.ascx.
            </summary>
        </member>
        <member name="F:BlogEngine.Core.ServingLocation.SinglePage">
            <summary>
                Is used when a single page is displayed on page.aspx.
            </summary>
        </member>
        <member name="F:BlogEngine.Core.ServingLocation.Feed">
            <summary>
                Is used when content is served from a feed (RSS or ATOM).
            </summary>
        </member>
        <member name="F:BlogEngine.Core.ServingLocation.Email">
            <summary>
                Is used when content is being sent by e-mail.
            </summary>
        </member>
        <member name="F:BlogEngine.Core.ServingLocation.Other">
            <summary>
                Is used when content is served on a custom location.
            </summary>
        </member>
        <member name="T:BlogEngine.Core.ServingContentBy">
            <summary>
            The criteria by which the content is being served (by tag, category, author, etc)
            </summary>
        </member>
        <member name="F:BlogEngine.Core.ServingContentBy.Unspecified">
            <summary>
                The criteria by which content is being served is unspecified.
            </summary>
        </member>
        <member name="F:BlogEngine.Core.ServingContentBy.AllContent">
            <summary>
                All content is being served.
            </summary>
        </member>
        <member name="F:BlogEngine.Core.ServingContentBy.Tag">
            <summary>
                Content is being served by tag.
            </summary>
        </member>
        <member name="F:BlogEngine.Core.ServingContentBy.Category">
            <summary>
                Content is being served by category.
            </summary>
        </member>
        <member name="F:BlogEngine.Core.ServingContentBy.Author">
            <summary>
                Content is being served by author.
            </summary>
        </member>
        <member name="F:BlogEngine.Core.ServingContentBy.DateRange">
            <summary>
                Content is being served by date range.
            </summary>
        </member>
        <member name="F:BlogEngine.Core.ServingContentBy.Apml">
            <summary>
                Content is being served by APML filtering.
            </summary>
        </member>
        <member name="T:BlogEngine.Core.ServingEventArgs">
            <summary>
            Used when a post is served to the output stream.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.ServingEventArgs.#ctor(System.String,BlogEngine.Core.ServingLocation)">
            <summary>
            Initializes a new instance of the <see cref="T:BlogEngine.Core.ServingEventArgs"/> class. 
                Creates a new instance of the class and applies the specified body and serving location.
            </summary>
            <param name="body">
            The body string.
            </param>
            <param name="location">
            The location.
            </param>
        </member>
        <member name="M:BlogEngine.Core.ServingEventArgs.#ctor(System.String,BlogEngine.Core.ServingLocation,BlogEngine.Core.ServingContentBy)">
            <summary>
            Initializes a new instance of the <see cref="T:BlogEngine.Core.ServingEventArgs"/> class. 
                Creates a new instance of the class and applies the specified body, serving location and serving content by.
            </summary>
            <param name="body">
            The body string.
            </param>
            <param name="location">
            The location.
            </param>
            <param name="contentBy">
            The content By.
            </param>
        </member>
        <member name="P:BlogEngine.Core.ServingEventArgs.Body">
            <summary>
                Gets or sets the body of the post. If you change the Body, 
                then that change will be shown on the web page.
            </summary>
        </member>
        <member name="P:BlogEngine.Core.ServingEventArgs.Cancel">
            <summary>
                Gets or sets a value indicating whether to cancel the serving of the content.
                <remarks>
                    If the serving is cancelled then the item will not be displayed.
                </remarks>
            </summary>
        </member>
        <member name="P:BlogEngine.Core.ServingEventArgs.ContentBy">
            <summary>
                Gets or sets the criteria by which the content is being served (by tag, category, author, etc).
            </summary>
        </member>
        <member name="P:BlogEngine.Core.ServingEventArgs.Location">
            <summary>
                Gets or sets the location where the serving takes place.
            </summary>
        </member>
        <member name="T:BlogEngine.Core.SaveAction">
            <summary>
            The action performed by the save event.
            </summary>
        </member>
        <member name="F:BlogEngine.Core.SaveAction.None">
            <summary>
                Default. Nothing happened.
            </summary>
        </member>
        <member name="F:BlogEngine.Core.SaveAction.Insert">
            <summary>
                It's a new object that has been inserted.
            </summary>
        </member>
        <member name="F:BlogEngine.Core.SaveAction.Update">
            <summary>
                It's an old object that has been updated.
            </summary>
        </member>
        <member name="F:BlogEngine.Core.SaveAction.Delete">
            <summary>
                The object was deleted.
            </summary>
        </member>
        <member name="T:BlogEngine.Core.SavedEventArgs">
            <summary>
            The saved event args.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.SavedEventArgs.#ctor(BlogEngine.Core.SaveAction)">
            <summary>
            Initializes a new instance of the <see cref="T:BlogEngine.Core.SavedEventArgs"/> class.
            </summary>
            <param name="action">
            The action.
            </param>
        </member>
        <member name="P:BlogEngine.Core.SavedEventArgs.Action">
            <summary>
                Gets or sets the action that occured when the object was saved.
            </summary>
        </member>
        <member name="T:BlogEngine.Core.Search">
            <summary>
            Searches the post collection and returns a result based on a search term.
                <remarks>
            It is used for related posts and the in-site search feature.
                </remarks>
            </summary>
        </member>
        <member name="F:BlogEngine.Core.Search._entries">
            <summary>
            The entries.
            </summary>
        </member>
        <member name="F:BlogEngine.Core.Search._stopWords">
            <summary>
            The stop words.
            </summary>
        </member>
        <member name="F:BlogEngine.Core.Search._syncRoot">
            <summary>
            The sync root.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Search.#cctor">
            <summary>
            Initializes static members of the <see cref="T:BlogEngine.Core.Search"/> class.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Search.AddItem(BlogEngine.Core.IPublishable)">
            <summary>
            Adds an IPublishable item to the search entries. 
                That will make it immediately searchable.
            </summary>
            <param name="item">
            The item to add.
            </param>
        </member>
        <member name="M:BlogEngine.Core.Search.ApmlMatches(System.Xml.XmlDocument,System.Int32)">
            <summary>
            The apml matches.
            </summary>
            <param name="apmlFile">
            The apml file.
            </param>
            <param name="maxInterests">
            The max interests.
            </param>
            <returns>
            A list of IPublishable.
            </returns>
        </member>
        <member name="M:BlogEngine.Core.Search.FindRelatedItems(BlogEngine.Core.IPublishable)">
            <summary>
            Returns a list of posts that is related to the specified post.
            </summary>
            <param name="post">The IPublishable post.</param>
            <returns>A list of IPublishable.</returns>
        </member>
        <member name="M:BlogEngine.Core.Search.Hits(System.String,System.Boolean)">
            <summary>
            Searches all the posts and returns a ranked result set.
            </summary>
            <param name="searchTerm">The term to search for</param>
            <param name="includeComments">True to include a post's comments and their authors in search</param>
            <returns>A list of IPublishable.</returns>
        </member>
        <member name="M:BlogEngine.Core.Search.BuildEntries">
            <summary>
            Builds the entries so they can be searched.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Search.BuildResultSet(System.String,System.Boolean)">
            <summary>
            Builds the results set and ranks it.
            </summary>
            <param name="searchTerm">
            The search Term.
            </param>
            <param name="includeComments">
            The include Comments.
            </param>
        </member>
        <member name="M:BlogEngine.Core.Search.CleanContent(System.String,System.Boolean)">
            <summary>
            Removes stop words and HTML from the specified string.
            </summary>
            <param name="content">
            The content.
            </param>
            <param name="removeHtml">
            The remove Html.
            </param>
            <returns>
            The clean content.
            </returns>
        </member>
        <member name="M:BlogEngine.Core.Search.OnIndexBuild">
            <summary>
            Raises the event in a safe way
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Search.OnIndexBuilding">
            <summary>
            Raises the event in a safe way
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Search.OnSearcing(System.String)">
            <summary>
            Raises the event in a safe way
            </summary>
            <param name="searchTerm">
            The search Term.
            </param>
        </member>
        <member name="M:BlogEngine.Core.Search.Page_Saved(System.Object,BlogEngine.Core.SavedEventArgs)">
            <summary>
            Handles the Saved event of the Page control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:BlogEngine.Core.SavedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:BlogEngine.Core.Search.Post_CommentAdded(System.Object,System.EventArgs)">
            <summary>
            Handles the CommentAdded event of the Post control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:BlogEngine.Core.Search.Post_Saved(System.Object,BlogEngine.Core.SavedEventArgs)">
            <summary>
            Handles the Saved event of the Post control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:BlogEngine.Core.SavedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:BlogEngine.Core.Search.ResultToPost(BlogEngine.Core.Result)">
            <summary>
            A converter delegate used for converting Results to Posts.
            </summary>
            <param name="result">The IPublishable result.</param>
            <returns>An IPublishable.</returns>
        </member>
        <member name="M:BlogEngine.Core.Search.SortDictionary(System.Collections.Generic.Dictionary{System.String,System.Single})">
            <summary>
            The sort dictionary.
            </summary>
            <param name="dic">
            The dictionary of string keys with float values.
            </param>
            <returns>
            A dictionary of string keys with float values.
            </returns>
        </member>
        <member name="E:BlogEngine.Core.Search.IndexBuild">
            <summary>
                Occurs after the index has been build.
            </summary>
        </member>
        <member name="E:BlogEngine.Core.Search.IndexBuilding">
            <summary>
                Occurs just before the search index is being build.
            </summary>
        </member>
        <member name="E:BlogEngine.Core.Search.Searching">
            <summary>
                Occurs when a search is performed. (The search term is the sender).
            </summary>
        </member>
        <member name="T:BlogEngine.Core.Entry">
            <summary>
            A search optimized post object cleansed from HTML and stop words.
            </summary>
        </member>
        <member name="F:BlogEngine.Core.Entry.Content">
            <summary>
                The content of the post cleansed for stop words and HTML
            </summary>
        </member>
        <member name="F:BlogEngine.Core.Entry.Item">
            <summary>
                The post object reference
            </summary>
        </member>
        <member name="F:BlogEngine.Core.Entry.Title">
            <summary>
                The title of the post cleansed for stop words
            </summary>
        </member>
        <member name="T:BlogEngine.Core.Result">
            <summary>
            A result is a search result which contains a post and its ranking.
            </summary>
        </member>
        <member name="F:BlogEngine.Core.Result.Item">
            <summary>
                The post of the result.
            </summary>
        </member>
        <member name="F:BlogEngine.Core.Result.Rank">
            <summary>
                The rank of the post based on the search term. The higher the rank, the higher the post is in the result set.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Result.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:BlogEngine.Core.Result.CompareTo(BlogEngine.Core.Result)">
            <summary>
            Compares the current object with another object of the same type.
            </summary>
            <param name="other">
            An object to compare with this object.
            </param>
            <returns>
            A 32-bit signed integer that indicates the relative order of the objects being compared. The return value 
                has the following meanings: Value Meaning Less than zero This object is less than the other parameter.Zero 
                This object is equal to other. Greater than zero This object is greater than other.
            </returns>
        </member>
        <member name="T:BlogEngine.Core.SyndicationFormat">
            <summary>
            Represents common types of syndication formats.
            </summary>
        </member>
        <member name="F:BlogEngine.Core.SyndicationFormat.None">
            <summary>
                No syndication format specified.
            </summary>
        </member>
        <member name="F:BlogEngine.Core.SyndicationFormat.Atom">
            <summary>
                Indicates that a feed conforms to the Atom syndication format.
            </summary>
        </member>
        <member name="F:BlogEngine.Core.SyndicationFormat.Rss">
            <summary>
                Indicates that a feed conforms to the RSS syndication format.
            </summary>
        </member>
        <member name="T:BlogEngine.Core.Web.Controls.ExtensionAttribute">
            <summary>
            All extensions must decorate the class with this attribute.
                It is used for reflection.
                <remarks>
            When using this attribute, you must make sure
                    to have a default constructor. It will be used to create
                    an instance of the extension through reflection.
                </remarks>
            </summary>
        </member>
        <member name="F:BlogEngine.Core.Web.Controls.ExtensionAttribute.author">
            <summary>
            The author.
            </summary>
        </member>
        <member name="F:BlogEngine.Core.Web.Controls.ExtensionAttribute.description">
            <summary>
            The description.
            </summary>
        </member>
        <member name="F:BlogEngine.Core.Web.Controls.ExtensionAttribute.version">
            <summary>
            The version.
            </summary>
        </member>
        <member name="F:BlogEngine.Core.Web.Controls.ExtensionAttribute.priority">
            <summary>
            The priority.
            </summary>
        </member>
        <member name="F:BlogEngine.Core.Web.Controls.ExtensionAttribute.subBlogEnabled">
            <summary>
            Enabled in sub-blog.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Web.Controls.ExtensionAttribute.#ctor(System.String,System.String,System.String,System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:BlogEngine.Core.Web.Controls.ExtensionAttribute"/> class. 
            Creates an instance of the attribute and assigns a description.
            </summary>
            <param name="description">
            The description.
            </param>
            <param name="version">
            The version.
            </param>
            <param name="author">
            The author.
            </param>
            <param name="priority">
            The priority.
            </param>
            <param name="subBlogEnabled">The sub-blog enabled.</param>
        </member>
        <member name="P:BlogEngine.Core.Web.Controls.ExtensionAttribute.Author">
            <summary>
            Gets the author of the extension
            </summary>
            <value>The author.</value>
        </member>
        <member name="P:BlogEngine.Core.Web.Controls.ExtensionAttribute.Description">
            <summary>
            Gets the description of the extension.
            </summary>
            <value>The description.</value>
        </member>
        <member name="P:BlogEngine.Core.Web.Controls.ExtensionAttribute.Priority">
            <summary>
            Gets the priority of the extension
            This determins in what order extensions instantiated
            and in what order they will respond to events
            </summary>
            <value>The priority.</value>
        </member>
        <member name="P:BlogEngine.Core.Web.Controls.ExtensionAttribute.SubBlogEnabled">
            <summary>
            This determins if extension settings should
            be available for sub-blogs. Some extensions
            can be application-wide, others on blog level
            </summary>
            <value>True if enabled.</value>
        </member>
        <member name="P:BlogEngine.Core.Web.Controls.ExtensionAttribute.Version">
            <summary>
                Gets the version number of the extension
            </summary>
        </member>
        <member name="T:BlogEngine.Core.Web.Controls.SortedExtension">
            <summary>
            Helper class for sorting extensions by priority
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Web.Controls.SortedExtension.#ctor(System.Int32,System.String,System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:BlogEngine.Core.Web.Controls.SortedExtension"/> class.
            </summary>
            <param name="priority">The extension priority.</param>
            <param name="name">The extension name.</param>
            <param name="type">The extension type.</param>
            <param name="subBlogEnabled">The sub-blog enabled.</param>
        </member>
        <member name="P:BlogEngine.Core.Web.Controls.SortedExtension.Name">
            <summary>
                Gets or sets the name of the extension
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Web.Controls.SortedExtension.Priority">
            <summary>
                Gets or sets the order in which extensions are sorted and respond to events
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Web.Controls.SortedExtension.SubBlogEnabled">
            <summary>
                Gets or sets if extension settings valid for sub-blogs
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Web.Controls.SortedExtension.Type">
            <summary>
                Gets or sets the type of the extension
            </summary>
        </member>
        <member name="T:BlogEngine.Core.Web.Controls.CommentViewBase">
            <summary>
            Inherit from this class when you are building the
                commentview.ascx user control in your custom theme.
            </summary>
            <remarks>
            The class exposes a lot of functionality to the custom
                comment control in the theme folder.
            </remarks>
        </member>
        <member name="F:BlogEngine.Core.Web.Controls.CommentViewBase.FlagImage">
            <summary>
            The flag image.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Web.Controls.CommentViewBase.RenderComment">
            <summary>
            The comment will be processed when invoked, rather than waiting
            for the Load event to occur.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Web.Controls.CommentViewBase.Gravatar(System.Int32)">
            <summary>
            Displays the Gravatar image that matches the specified email.
            </summary>
            <param name="size">
            The image size.
            </param>
            <returns>
            The gravatar.
            </returns>
        </member>
        <member name="M:BlogEngine.Core.Web.Controls.CommentViewBase.ResolveLinks(System.String)">
            <summary>
            Examines the comment body for any links and turns them
                automatically into one that can be clicked.
            </summary>
            <param name="body">
            The body string.
            </param>
            <returns>
            The resolve links.
            </returns>
        </member>
        <member name="M:BlogEngine.Core.Web.Controls.CommentViewBase.FindCountry(System.String)">
            <summary>
            Finds country.
            </summary>
            <param name="isoCode">
            The iso code.
            </param>
            <returns>
            The find country.
            </returns>
        </member>
        <member name="P:BlogEngine.Core.Web.Controls.CommentViewBase.Comment">
            <summary>
                Gets or sets the Comment.
            </summary>
            <value>The comment.</value>
        </member>
        <member name="P:BlogEngine.Core.Web.Controls.CommentViewBase.Post">
            <summary>
                Gets or sets the Post from which the comment belongs.
            </summary>
            <value>The Post object.</value>
        </member>
        <member name="P:BlogEngine.Core.Web.Controls.CommentViewBase.Text">
            <summary>
                Gets the text of the comment.
            </summary>
            <value>The comment text.</value>
        </member>
        <member name="P:BlogEngine.Core.Web.Controls.CommentViewBase.AdminLinks">
            <summary>
                Gets a delete link to visitors that are authenticated
                using the default membership provider.
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Web.Controls.CommentViewBase.Flag">
            <summary>
                Gets the flag of the country from which the comment was written.
                <remarks>
                    If the country hasn't been resolved from the authors IP address or
                    the flag does not exist for that country, nothing is displayed.
                </remarks>
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Web.Controls.CommentViewBase.ReplyToLink">
            <summary>
                Gets a link that lets a user reply to a specific comment
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Web.Controls.CommentViewBase.IsOdd">
            <summary>
            For styling, indicates if the comment is odd or even.
            </summary>
        </member>
        <member name="T:BlogEngine.Core.Web.Controls.PageMenu">
            <summary>
            The PageMenu class.
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Web.Controls.PageMenu.Home">
            <summary>
            Home label.
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Web.Controls.PageMenu.Contact">
            <summary>
            Contact label.
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Web.Controls.PageMenu.Archive">
            <summary>
            Archive label.
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Web.Controls.PageMenu.Logon">
            <summary>
            Logon label.
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Web.Controls.PageMenu.Logoff">
            <summary>
            Logoff label.
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Web.Controls.PageMenu.Html">
            <summary>
            The HTML for the control to display on the page.
            </summary>
        </member>
        <member name="T:BlogEngine.Core.Web.Controls.PageSiteMap">
            <summary>
            A site map provider for the Pages in BlogEngine.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Web.Controls.PageSiteMap.FindSiteMapNode(System.String)">
            <summary>
            When overridden in a derived class, retrieves a <see cref="T:System.Web.SiteMapNode"></see> object that represents the page at the specified URL.
            </summary>
            <param name="rawUrl">
            A URL that identifies the page for which to retrieve a <see cref="T:System.Web.SiteMapNode"></see>.
            </param>
            <returns>
            A <see cref="T:System.Web.SiteMapNode"></see> that represents the page identified by rawURL; otherwise, null, if no corresponding <see cref="T:System.Web.SiteMapNode"></see> is found or if security trimming is enabled and the <see cref="T:System.Web.SiteMapNode"></see> cannot be returned for the current user.
            </returns>
        </member>
        <member name="M:BlogEngine.Core.Web.Controls.PageSiteMap.GetChildNodes(System.Web.SiteMapNode)">
            <summary>
            When overridden in a derived class, retrieves the child nodes of a specific <see cref="T:System.Web.SiteMapNode"></see>.
            </summary>
            <param name="node">
            The <see cref="T:System.Web.SiteMapNode"></see> for which to retrieve all child nodes.
            </param>
            <returns>
            A read-only <see cref="T:System.Web.SiteMapNodeCollection"></see> that contains the immediate child nodes of the specified <see cref="T:System.Web.SiteMapNode"></see>; otherwise, null or an empty collection, if no child nodes exist.
            </returns>
        </member>
        <member name="M:BlogEngine.Core.Web.Controls.PageSiteMap.GetParentNode(System.Web.SiteMapNode)">
            <summary>
            When overridden in a derived class, retrieves the parent node of a specific <see cref="T:System.Web.SiteMapNode"></see> object.
            </summary>
            <param name="node">
            The <see cref="T:System.Web.SiteMapNode"></see> for which to retrieve the parent node.
            </param>
            <returns>
            A <see cref="T:System.Web.SiteMapNode"></see> that represents the parent of node; otherwise, null, if the <see cref="T:System.Web.SiteMapNode"></see> has no parent or security trimming is enabled and the parent node is not accessible to the current user.
            </returns>
        </member>
        <member name="M:BlogEngine.Core.Web.Controls.PageSiteMap.GetRootNodeCore">
            <summary>
            When overidden in a derived class, retrieves the root node of all the nodes that are currently managed by the current provider.
            </summary>
            <returns>
            A <see cref="T:System.Web.SiteMapNode"></see> that represents the root node of the set of nodes that the current provider manages.
            </returns>
        </member>
        <member name="T:BlogEngine.Core.Web.HttpHandlers.OpmlHandler">
            <summary>
            The opml handler.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Web.HttpHandlers.OpmlHandler.ProcessRequest(System.Web.HttpContext)">
            <summary>
            Enables processing of HTTP Web requests by a custom HttpHandler that 
                implements the <see cref="T:System.Web.IHttpHandler"></see> interface.
            </summary>
            <param name="context">
            An <see cref="T:System.Web.HttpContext"></see> 
                object that provides references to the intrinsic server objects 
                (for example, Request, Response, Session, and Server) used to service HTTP requests.
            </param>
        </member>
        <member name="P:BlogEngine.Core.Web.HttpHandlers.OpmlHandler.IsReusable">
            <summary>
                Gets a value indicating whether another request can use the <see cref = "T:System.Web.IHttpHandler"></see> instance.
            </summary>
            <value></value>
            <returns>true if the <see cref = "T:System.Web.IHttpHandler"></see> instance is reusable; otherwise, false.</returns>
        </member>
        <member name="T:BlogEngine.Core.Web.HttpHandlers.RatingHandler">
            <summary>
            Receives and records all ratings comming in from the rating control.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Web.HttpHandlers.RatingHandler.ProcessRequest(System.Web.HttpContext)">
            <summary>
            Enables processing of HTTP Web requests by a custom HttpHandler that 
                implements the <see cref="T:System.Web.IHttpHandler"></see> interface.
            </summary>
            <param name="context">
            An <see cref="T:System.Web.HttpContext"></see> 
                object that provides references to the intrinsic server objects 
                (for example, Request, Response, Session, and Server) used to service HTTP requests.
            </param>
        </member>
        <member name="M:BlogEngine.Core.Web.HttpHandlers.RatingHandler.HasRated(System.String)">
            <summary>
            Determines whether the specified post id has rated.
            </summary>
            <param name="postId">The post id.</param>
            <returns>
                <c>true</c> if the specified post id has rated; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:BlogEngine.Core.Web.HttpHandlers.RatingHandler.SetCookie(System.String,System.Web.HttpContext)">
            <summary>
            Sets the cookie.
            </summary>
            <param name="id">The cookie id.</param>
            <param name="context">The context.</param>
        </member>
        <member name="P:BlogEngine.Core.Web.HttpHandlers.RatingHandler.IsReusable">
            <summary>
                Gets a value indicating whether another request can use the <see cref = "T:System.Web.IHttpHandler"></see> instance.
            </summary>
            <value></value>
            <returns>true if the <see cref = "T:System.Web.IHttpHandler"></see> instance is reusable; otherwise, false.</returns>
        </member>
        <member name="T:BlogEngine.Core.Web.HttpHandlers.FileHandler">
            <summary>
            The FileHandler serves all files that is uploaded from
                the admin pages except for images.
            </summary>
            <remarks>
            By using a HttpHandler to serve files, it is very easy
                to add the capability to stop bandwidth leeching or
                to create a statistics analysis feature upon it.
            </remarks>
        </member>
        <member name="M:BlogEngine.Core.Web.HttpHandlers.FileHandler.ProcessRequest(System.Web.HttpContext)">
            <summary>
            Enables processing of HTTP Web requests by a custom HttpHandler that 
                implements the <see cref="T:System.Web.IHttpHandler"></see> interface.
            </summary>
            <param name="context">
            An <see cref="T:System.Web.HttpContext"></see> 
                object that provides references to the intrinsic server objects 
                (for example, Request, Response, Session, and Server) used to service HTTP requests.
            </param>
        </member>
        <member name="M:BlogEngine.Core.Web.HttpHandlers.FileHandler.OnBadRequest(System.String)">
            <summary>
            Called when [bad request].
            </summary>
            <param name="file">The file name.</param>
        </member>
        <member name="M:BlogEngine.Core.Web.HttpHandlers.FileHandler.OnServed(System.String)">
            <summary>
            Called when [served].
            </summary>
            <param name="file">The file name.</param>
        </member>
        <member name="M:BlogEngine.Core.Web.HttpHandlers.FileHandler.OnServing(System.String)">
            <summary>
            Called when [serving].
            </summary>
            <param name="file">The file name.</param>
        </member>
        <member name="M:BlogEngine.Core.Web.HttpHandlers.FileHandler.SetContentType(System.Web.HttpContext,System.String)">
            <summary>
            Sets the content type depending on the filename's extension.
            </summary>
            <param name="context">
            The context.
            </param>
            <param name="fileName">
            The file Name.
            </param>
        </member>
        <member name="E:BlogEngine.Core.Web.HttpHandlers.FileHandler.BadRequest">
            <summary>
                Occurs when the requested file does not exist;
            </summary>
        </member>
        <member name="E:BlogEngine.Core.Web.HttpHandlers.FileHandler.Served">
            <summary>
                Occurs when a file is served;
            </summary>
        </member>
        <member name="E:BlogEngine.Core.Web.HttpHandlers.FileHandler.Serving">
            <summary>
                Occurs when the requested file does not exist;
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Web.HttpHandlers.FileHandler.IsReusable">
            <summary>
                Gets a value indicating whether another request can use the <see cref = "T:System.Web.IHttpHandler"></see> instance.
            </summary>
            <value></value>
            <returns>true if the <see cref = "T:System.Web.IHttpHandler"></see> instance is reusable; otherwise, false.</returns>
        </member>
        <member name="T:BlogEngine.Core.Web.HttpHandlers.ImageHandler">
            <summary>
            The ImageHanlder serves all images that is uploaded from
                the admin pages.
            </summary>
            <remarks>
            By using a HttpHandler to serve images, it is very easy
                to add the capability to stop bandwidth leeching or
                to create a statistics analysis feature upon it.
            </remarks>
        </member>
        <member name="M:BlogEngine.Core.Web.HttpHandlers.ImageHandler.ProcessRequest(System.Web.HttpContext)">
            <summary>
            Enables processing of HTTP Web requests by a custom HttpHandler that 
                implements the <see cref="T:System.Web.IHttpHandler"></see> interface.
            </summary>
            <param name="context">
            An <see cref="T:System.Web.HttpContext"></see> object 
                that provides references to the intrinsic server objects 
                (for example, Request, Response, Session, and Server) used to service HTTP requests.
            </param>
        </member>
        <member name="M:BlogEngine.Core.Web.HttpHandlers.ImageHandler.OnBadRequest(System.String)">
            <summary>
            Called when [bad request].
            </summary>
            <param name="file">The file name.</param>
        </member>
        <member name="M:BlogEngine.Core.Web.HttpHandlers.ImageHandler.OnServed(System.String)">
            <summary>
            Called when [served].
            </summary>
            <param name="file">The file name.</param>
        </member>
        <member name="M:BlogEngine.Core.Web.HttpHandlers.ImageHandler.OnServing(System.String)">
            <summary>
            Called when [serving].
            </summary>
            <param name="file">The file name.</param>
        </member>
        <member name="E:BlogEngine.Core.Web.HttpHandlers.ImageHandler.BadRequest">
            <summary>
                Occurs when the requested file does not exist.
            </summary>
        </member>
        <member name="E:BlogEngine.Core.Web.HttpHandlers.ImageHandler.Served">
            <summary>
                Occurs when a file is served.
            </summary>
        </member>
        <member name="E:BlogEngine.Core.Web.HttpHandlers.ImageHandler.Serving">
            <summary>
                Occurs before the requested image is served.
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Web.HttpHandlers.ImageHandler.IsReusable">
            <summary>
                Gets a value indicating whether another request can use the <see cref = "T:System.Web.IHttpHandler"></see> instance.
            </summary>
            <value></value>
            <returns>true if the <see cref = "T:System.Web.IHttpHandler"></see> instance is reusable; otherwise, false.</returns>
        </member>
        <member name="T:BlogEngine.Core.Web.HttpHandlers.OpenSearchHandler">
            <summary>
            Displays the open search XML provider as
                descriped at http://opensearch.a9.com/
            </summary>
            <remarks>
            The OpenSearch document needs to be linked to from the 
                HTML head tag. This link will be added automatically.
            </remarks>
        </member>
        <member name="M:BlogEngine.Core.Web.HttpHandlers.OpenSearchHandler.ProcessRequest(System.Web.HttpContext)">
            <summary>
            Enables processing of HTTP Web requests by a custom HttpHandler that implements the <see cref="T:System.Web.IHttpHandler"></see> interface.
            </summary>
            <param name="context">
            An <see cref="T:System.Web.HttpContext"></see> object that provides references to the intrinsic server objects (for example, Request, Response, Session, and Server) used to service HTTP requests.
            </param>
        </member>
        <member name="P:BlogEngine.Core.Web.HttpHandlers.OpenSearchHandler.IsReusable">
            <summary>
                Gets a value indicating whether another request can use the <see cref = "T:System.Web.IHttpHandler"></see> instance.
            </summary>
            <value></value>
            <returns>true if the <see cref = "T:System.Web.IHttpHandler"></see> instance is reusable; otherwise, false.</returns>
        </member>
        <member name="T:BlogEngine.Core.Web.HttpHandlers.PingbackHandler">
            <summary>
            Recieves pingbacks from other blogs and websites, and 
                registers them as a comment.
            </summary>
        </member>
        <member name="F:BlogEngine.Core.Web.HttpHandlers.PingbackHandler.Success">
            <summary>
            The success.
            </summary>
        </member>
        <member name="F:BlogEngine.Core.Web.HttpHandlers.PingbackHandler.RegexHtml">
            <summary>
            The regex html.
            </summary>
        </member>
        <member name="F:BlogEngine.Core.Web.HttpHandlers.PingbackHandler.RegexTitle">
            <summary>
            The regex title.
            </summary>
        </member>
        <member name="F:BlogEngine.Core.Web.HttpHandlers.PingbackHandler.containsHtml">
            <summary>
            Whether contains html.
            </summary>
        </member>
        <member name="F:BlogEngine.Core.Web.HttpHandlers.PingbackHandler.sourceHasLink">
            <summary>
            Whether source has link.
            </summary>
        </member>
        <member name="F:BlogEngine.Core.Web.HttpHandlers.PingbackHandler.title">
            <summary>
            The title.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Web.HttpHandlers.PingbackHandler.OnSpammed(System.String)">
            <summary>
            Called when [spammed].
            </summary>
            <param name="url">The URL string.</param>
        </member>
        <member name="M:BlogEngine.Core.Web.HttpHandlers.PingbackHandler.ProcessRequest(System.Web.HttpContext)">
            <summary>
            Enables processing of HTTP Web requests by a custom HttpHandler that 
                implements the <see cref="T:System.Web.IHttpHandler"></see> interface.
            </summary>
            <param name="context">
            An <see cref="T:System.Web.HttpContext"></see> 
                object that provides references to the intrinsic server objects 
                (for example, Request, Response, Session, and Server) used to service HTTP requests.
            </param>
        </member>
        <member name="M:BlogEngine.Core.Web.HttpHandlers.PingbackHandler.OnAccepted(System.String)">
            <summary>
            Called when [accepted].
            </summary>
            <param name="url">The URL string.</param>
        </member>
        <member name="M:BlogEngine.Core.Web.HttpHandlers.PingbackHandler.OnReceived(System.ComponentModel.CancelEventArgs)">
            <summary>
            Raises the <see cref="E:BlogEngine.Core.Web.HttpHandlers.PingbackHandler.Received"/> event.
            </summary>
            <param name="e">The <see cref="T:System.ComponentModel.CancelEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:BlogEngine.Core.Web.HttpHandlers.PingbackHandler.OnRejected(System.String)">
            <summary>
            Called when [rejected].
            </summary>
            <param name="url">The URL string.</param>
        </member>
        <member name="M:BlogEngine.Core.Web.HttpHandlers.PingbackHandler.GetDomain(System.String)">
            <summary>
            Parse the source URL to get the domain.
                It is used to fill the Author property of the comment.
            </summary>
            <param name="sourceUrl">
            The source Url.
            </param>
            <returns>
            The get domain.
            </returns>
        </member>
        <member name="M:BlogEngine.Core.Web.HttpHandlers.PingbackHandler.GetPostByUrl(System.String)">
            <summary>
            Retrieve the post that belongs to the target URL.
            </summary>
            <param name="url">The url string.</param>
            <returns>The post from the url.</returns>
        </member>
        <member name="M:BlogEngine.Core.Web.HttpHandlers.PingbackHandler.IsFirstPingBack(BlogEngine.Core.Post,System.String)">
            <summary>
            Checks to see if the source has already pinged the target.
                If it has, there is no reason to add it again.
            </summary>
            <param name="post">
            The post to check.
            </param>
            <param name="sourceUrl">
            The source Url.
            </param>
            <returns>
            The is first ping back.
            </returns>
        </member>
        <member name="M:BlogEngine.Core.Web.HttpHandlers.PingbackHandler.ParseRequest(System.Web.HttpContext)">
            <summary>
            Retrieves the content of the input stream
                and return it as plain text.
            </summary>
            <param name="context">
            The context.
            </param>
            <returns>
            The parse request.
            </returns>
        </member>
        <member name="M:BlogEngine.Core.Web.HttpHandlers.PingbackHandler.RetrieveXmlDocument(System.Web.HttpContext)">
            <summary>
            The retrieve xml document.
            </summary>
            <param name="context">
            The context.
            </param>
            <returns>
            An Xml Document.
            </returns>
        </member>
        <member name="M:BlogEngine.Core.Web.HttpHandlers.PingbackHandler.SendError(System.Web.HttpContext,System.Int32,System.String)">
            <summary>
            The send error.
            </summary>
            <param name="context">
            The context.
            </param>
            <param name="code">
            The code number.
            </param>
            <param name="message">
            The message.
            </param>
        </member>
        <member name="M:BlogEngine.Core.Web.HttpHandlers.PingbackHandler.AddComment(System.String,BlogEngine.Core.Post)">
            <summary>
            Insert the pingback as a comment on the post.
            </summary>
            <param name="sourceUrl">
            The source Url.
            </param>
            <param name="post">
            The post to add the comment to.
            </param>
        </member>
        <member name="M:BlogEngine.Core.Web.HttpHandlers.PingbackHandler.ExamineSourcePage(System.String,System.String)">
            <summary>
            Parse the HTML of the source page.
            </summary>
            <param name="sourceUrl">
            The source Url.
            </param>
            <param name="targetUrl">
            The target Url.
            </param>
        </member>
        <member name="E:BlogEngine.Core.Web.HttpHandlers.PingbackHandler.Accepted">
            <summary>
                Occurs when a pingback is accepted as valid and added as a comment.
            </summary>
        </member>
        <member name="E:BlogEngine.Core.Web.HttpHandlers.PingbackHandler.Received">
            <summary>
                Occurs when a hit is made to the trackback.axd handler.
            </summary>
        </member>
        <member name="E:BlogEngine.Core.Web.HttpHandlers.PingbackHandler.Rejected">
            <summary>
                Occurs when a pingback request is rejected because the sending
                website already made a trackback or pingback to the specific page.
            </summary>
        </member>
        <member name="E:BlogEngine.Core.Web.HttpHandlers.PingbackHandler.Spammed">
            <summary>
                Occurs when the request comes from a spammer.
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Web.HttpHandlers.PingbackHandler.IsReusable">
            <summary>
                Gets a value indicating whether another request can use the <see cref = "T:System.Web.IHttpHandler"></see> instance.
            </summary>
            <value></value>
            <returns>true if the <see cref = "T:System.Web.IHttpHandler"></see> instance is reusable; otherwise, false.</returns>
        </member>
        <member name="T:BlogEngine.Core.Web.HttpHandlers.ResourceHandler">
            <summary>
            Removes whitespace in all stylesheets added to the 
                header of the HTML document in site.master.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Web.HttpHandlers.ResourceHandler.ProcessRequest(System.Web.HttpContext)">
            <summary>
            Enables processing of HTTP Web requests by a custom 
                HttpHandler that implements the <see cref="T:System.Web.IHttpHandler"></see> interface.
            </summary>
            <param name="context">
            An <see cref="T:System.Web.HttpContext"></see> object that provides 
                references to the intrinsic server objects 
                (for example, Request, Response, Session, and Server) used to service HTTP requests.
            </param>
        </member>
        <member name="M:BlogEngine.Core.Web.HttpHandlers.ResourceHandler.GetScriptPath(System.Globalization.CultureInfo)">
            <summary>
            Returns the script path used to load resources on a page. 
            Resource script needs to use CURRENT INSTANCE relative root
            to support child-blog widgets, unlike other site-wide scripts
            </summary>
            <param name="cultureInfo"></param>
            <returns></returns>
        </member>
        <member name="M:BlogEngine.Core.Web.HttpHandlers.ResourceHandler.SetHeaders(System.Int32,System.Web.HttpContext)">
            <summary>
            This will make the browser and server keep the output
                in its cache and thereby improve performance.
            </summary>
            <param name="hash">
            The hash number.
            </param>
            <param name="context">
            The context.
            </param>
        </member>
        <member name="P:BlogEngine.Core.Web.HttpHandlers.ResourceHandler.IsReusable">
            <summary>
                Gets a value indicating whether another request can use the <see cref = "T:System.Web.IHttpHandler"></see> instance.
            </summary>
            <value></value>
            <returns>true if the <see cref = "T:System.Web.IHttpHandler"></see> instance is reusable; otherwise, false.</returns>
        </member>
        <member name="T:BlogEngine.Core.Web.HttpHandlers.RsdHandler">
            <summary>
            RSD (Really Simple Discoverability) Handler
                http://cyber.law.harvard.edu/blogs/gems/tech/rsd.html
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Web.HttpHandlers.RsdHandler.ProcessRequest(System.Web.HttpContext)">
            <summary>
            Enables processing of HTTP Web requests by a custom HttpHandler that implements the <see cref="T:System.Web.IHttpHandler"/> interface.
            </summary>
            <param name="context">An <see cref="T:System.Web.HttpContext"/> object that provides references to the intrinsic server objects (for example, Request, Response, Session, and Server) used to service HTTP requests.</param>
        </member>
        <member name="P:BlogEngine.Core.Web.HttpHandlers.RsdHandler.IsReusable">
            <summary>
            Gets a value indicating whether another request can use the <see cref="T:System.Web.IHttpHandler"/> instance.
            </summary>
            <value></value>
            <returns>true if the <see cref="T:System.Web.IHttpHandler"/> instance is reusable; otherwise, false.
            </returns>
        </member>
        <member name="T:BlogEngine.Core.Web.HttpHandlers.SiteMap">
            <summary>
            A blog sitemap suitable for Google Sitemap as well as
                other big search engines such as MSN/Live, Yahoo and Ask.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Web.HttpHandlers.SiteMap.ProcessRequest(System.Web.HttpContext)">
            <summary>
            Enables processing of HTTP Web requests by a custom HttpHandler that 
                implements the <see cref="T:System.Web.IHttpHandler"></see> interface.
            </summary>
            <param name="context">
            An <see cref="T:System.Web.HttpContext"></see> 
                object that provides references to the intrinsic server objects 
                (for example, Request, Response, Session, and Server) used to service HTTP requests.
            </param>
        </member>
        <member name="P:BlogEngine.Core.Web.HttpHandlers.SiteMap.IsReusable">
            <summary>
                Gets a value indicating whether another request can use the <see cref = "T:System.Web.IHttpHandler"></see> instance.
            </summary>
            <value></value>
            <returns>true if the <see cref = "T:System.Web.IHttpHandler"></see> instance is reusable; otherwise, false.</returns>
        </member>
        <member name="T:BlogEngine.Core.Providers.BlogProviderSection">
            <summary>
            A configuration section for web.config.
            </summary>
            <remarks>
            In the config section you can specify the provider you 
                want to use for BlogEngine.NET.
            </remarks>
        </member>
        <member name="P:BlogEngine.Core.Providers.BlogProviderSection.DefaultProvider">
            <summary>
                Gets or sets the name of the default provider
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Providers.BlogProviderSection.FileStoreProvider">
            <summary>
            Gets or sets the name of the file storage provider, defaults to the XmlBlogProvider if one is not specified
            </summary>
            <remarks>
            This  attribute is not required, however allows for specifying different providers for various operations
            </remarks>
        </member>
        <member name="P:BlogEngine.Core.Providers.BlogProviderSection.Providers">
            <summary>
                Gets a collection of registered providers.
            </summary>
        </member>
        <member name="T:BlogEngine.Core.Providers.BlogService">
            <summary>
            The proxy class for communication between
                the business objects and the providers.
            </summary>
        </member>
        <member name="F:BlogEngine.Core.Providers.BlogService.TheLock">
            <summary>
            The lock object.
            </summary>
        </member>
        <member name="F:BlogEngine.Core.Providers.BlogService._provider">
            <summary>
            The provider. Don't access this directly. Access it through the property accessor.
            </summary>
        </member>
        <member name="F:BlogEngine.Core.Providers.BlogService._fileStorageProvider">
            <summary>
            the file storage provider. Don't access this directly. Access it the property accessor
            </summary>
        </member>
        <member name="F:BlogEngine.Core.Providers.BlogService._providers">
            <summary>
            The providers.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Providers.BlogService.DeleteBlogRoll(BlogEngine.Core.BlogRollItem)">
            <summary>
            Deletes the specified BlogRoll from the current provider.
            </summary>
            <param name="blogRoll">
            The blog Roll.
            </param>
        </member>
        <member name="M:BlogEngine.Core.Providers.BlogService.DeleteBlog(BlogEngine.Core.Blog)">
            <summary>
            Deletes the specified Blog from the current provider.
            </summary>
            <param name="blog">
            The blog.
            </param>
        </member>
        <member name="M:BlogEngine.Core.Providers.BlogService.DeleteBlogStorageContainer(BlogEngine.Core.Blog)">
            <summary>
            Deletes the storage container for the specified Blog from the current provider.
            </summary>
            <param name="blog">
            The blog.
            </param>
        </member>
        <member name="M:BlogEngine.Core.Providers.BlogService.DeleteCategory(BlogEngine.Core.Category)">
            <summary>
            Deletes the specified Category from the current provider.
            </summary>
            <param name="category">
            The category.
            </param>
        </member>
        <member name="M:BlogEngine.Core.Providers.BlogService.DeletePage(BlogEngine.Core.Page)">
            <summary>
            Deletes the specified Page from the current provider.
            </summary>
            <param name="page">
            The page to delete.
            </param>
        </member>
        <member name="M:BlogEngine.Core.Providers.BlogService.DeletePost(BlogEngine.Core.Post)">
            <summary>
            Deletes the specified Post from the current provider.
            </summary>
            <param name="post">
            The post to delete.
            </param>
        </member>
        <member name="M:BlogEngine.Core.Providers.BlogService.DeleteProfile(BlogEngine.Core.AuthorProfile)">
            <summary>
            Deletes the specified Page from the current provider.
            </summary>
            <param name="profile">
            The profile to delete.
            </param>
        </member>
        <member name="M:BlogEngine.Core.Providers.BlogService.FillBlogRolls">
            <summary>
            Returns a list of all BlogRolls in the current provider.
            </summary>
            <returns>
            A list of BlogRollItem.
            </returns>
        </member>
        <member name="M:BlogEngine.Core.Providers.BlogService.FillCategories(BlogEngine.Core.Blog)">
            <summary>
            The fill categories.
            </summary>
            <returns>
            A list of Category.
            </returns>
        </member>
        <member name="M:BlogEngine.Core.Providers.BlogService.FillPages">
            <summary>
            The fill pages.
            </summary>
            <returns>
            A list of Page.
            </returns>
        </member>
        <member name="M:BlogEngine.Core.Providers.BlogService.FillPosts">
            <summary>
            The fill posts.
            </summary>
            <returns>
            A list of Post.
            </returns>
        </member>
        <member name="M:BlogEngine.Core.Providers.BlogService.FillBlogs">
            <summary>
            The fill blogs.
            </summary>
            <returns>
            A list of Blogs.
            </returns>
        </member>
        <member name="M:BlogEngine.Core.Providers.BlogService.FillProfiles">
            <summary>
            The fill profiles.
            </summary>
            <returns>
            A list of AuthorProfile.
            </returns>
        </member>
        <member name="M:BlogEngine.Core.Providers.BlogService.FillReferrers">
            <summary>
            Returns a list of all Referrers in the current provider.
            </summary>
            <returns>
            A list of Referrer.
            </returns>
        </member>
        <member name="M:BlogEngine.Core.Providers.BlogService.FillRights">
            <summary>
            Returns a dictionary representing rights and the roles that allow them.
            </summary>
            <returns>
            
            The key must be a string of the name of the Rights enum of the represented Right.
            The value must be an IEnumerable of strings that includes only the role names of
            roles the right represents.
            
            Inheritors do not need to worry about verifying that the keys and values are valid.
            This is handled in the Right class.
            
            </returns>
        </member>
        <member name="M:BlogEngine.Core.Providers.BlogService.InsertBlogRoll(BlogEngine.Core.BlogRollItem)">
            <summary>
            Persists a new BlogRoll in the current provider.
            </summary>
            <param name="blogRoll">
            The blog Roll.
            </param>
        </member>
        <member name="M:BlogEngine.Core.Providers.BlogService.InsertBlog(BlogEngine.Core.Blog)">
            <summary>
            Persists a new Blog in the current provider.
            </summary>
            <param name="blog">
            The blog.
            </param>
        </member>
        <member name="M:BlogEngine.Core.Providers.BlogService.InsertCategory(BlogEngine.Core.Category)">
            <summary>
            Persists a new Category in the current provider.
            </summary>
            <param name="category">
            The category.
            </param>
        </member>
        <member name="M:BlogEngine.Core.Providers.BlogService.InsertPage(BlogEngine.Core.Page)">
            <summary>
            Persists a new Page in the current provider.
            </summary>
            <param name="page">
            The page to insert.
            </param>
        </member>
        <member name="M:BlogEngine.Core.Providers.BlogService.InsertPost(BlogEngine.Core.Post)">
            <summary>
            Persists a new Post in the current provider.
            </summary>
            <param name="post">
            The post to insert.
            </param>
        </member>
        <member name="M:BlogEngine.Core.Providers.BlogService.InsertProfile(BlogEngine.Core.AuthorProfile)">
            <summary>
            Persists a new Page in the current provider.
            </summary>
            <param name="profile">
            The profile to insert.
            </param>
        </member>
        <member name="M:BlogEngine.Core.Providers.BlogService.InsertReferrer(BlogEngine.Core.Referrer)">
            <summary>
            Persists a new Referrer in the current provider.
            </summary>
            <param name="referrer">
            The referrer to insert.
            </param>
        </member>
        <member name="M:BlogEngine.Core.Providers.BlogService.LoadFromDataStore(BlogEngine.Core.DataStore.ExtensionType,System.String)">
            <summary>
            Loads settings from data storage
            </summary>
            <param name="extensionType">
            Extension Type
            </param>
            <param name="extensionId">
            Extension ID
            </param>
            <returns>
            Settings as stream
            </returns>
        </member>
        <member name="M:BlogEngine.Core.Providers.BlogService.LoadPingServices">
            <summary>
            Loads the ping services.
            </summary>
            <returns>A StringCollection.</returns>
        </member>
        <member name="M:BlogEngine.Core.Providers.BlogService.LoadSettings(BlogEngine.Core.Blog)">
            <summary>
            Loads the settings from the provider and returns
            them in a StringDictionary for the BlogSettings class to use.
            </summary>
            <returns>A StringDictionary.</returns>
        </member>
        <member name="M:BlogEngine.Core.Providers.BlogService.LoadStopWords">
            <summary>
            Loads the stop words from the data store.
            </summary>
            <returns>A StringCollection.</returns>
        </member>
        <member name="M:BlogEngine.Core.Providers.BlogService.RemoveFromDataStore(BlogEngine.Core.DataStore.ExtensionType,System.String)">
            <summary>
            Removes object from data store
            </summary>
            <param name="extensionType">
            Extension Type
            </param>
            <param name="extensionId">
            Extension Id
            </param>
        </member>
        <member name="M:BlogEngine.Core.Providers.BlogService.SavePingServices(System.Collections.Specialized.StringCollection)">
            <summary>
            Saves the ping services.
            </summary>
            <param name="services">
            The services.
            </param>
        </member>
        <member name="M:BlogEngine.Core.Providers.BlogService.SaveRights">
            <summary>
            Saves all of the current BlogEngine rights to the provider.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Providers.BlogService.SaveSettings(System.Collections.Specialized.StringDictionary)">
            <summary>
            Save the settings to the current provider.
            </summary>
            <param name="settings">
            The settings.
            </param>
        </member>
        <member name="M:BlogEngine.Core.Providers.BlogService.SaveToDataStore(BlogEngine.Core.DataStore.ExtensionType,System.String,System.Object)">
            <summary>
            Saves settings to data store
            </summary>
            <param name="extensionType">
            Extension Type
            </param>
            <param name="extensionId">
            Extensio ID
            </param>
            <param name="settings">
            Settings object
            </param>
        </member>
        <member name="M:BlogEngine.Core.Providers.BlogService.SelectBlogRoll(System.Guid)">
            <summary>
            Returns a BlogRoll based on the specified id.
            </summary>
            <param name="id">The BlogRoll id.</param>
            <returns>A BlogRollItem.</returns>
        </member>
        <member name="M:BlogEngine.Core.Providers.BlogService.SelectBlog(System.Guid)">
            <summary>
            Returns a Blog based on the specified id.
            </summary>
            <param name="id">The Blog id.</param>
            <returns>A Blog.</returns>
        </member>
        <member name="M:BlogEngine.Core.Providers.BlogService.SelectCategory(System.Guid)">
            <summary>
            Returns a Category based on the specified id.
            </summary>
            <param name="id">The Category id.</param>
            <returns>A Category.</returns>
        </member>
        <member name="M:BlogEngine.Core.Providers.BlogService.SelectPage(System.Guid)">
            <summary>
            Returns a Page based on the specified id.
            </summary>
            <param name="id">The Page id.</param>
            <returns>A Page object.</returns>
        </member>
        <member name="M:BlogEngine.Core.Providers.BlogService.SelectPost(System.Guid)">
            <summary>
            Returns a Post based on the specified id.
            </summary>
            <param name="id">The post id.</param>
            <returns>A Post object.</returns>
        </member>
        <member name="M:BlogEngine.Core.Providers.BlogService.SelectProfile(System.String)">
            <summary>
            Returns a Page based on the specified id.
            </summary>
            <param name="id">The AuthorProfile id.</param>
            <returns>An AuthorProfile.</returns>
        </member>
        <member name="M:BlogEngine.Core.Providers.BlogService.SelectReferrer(System.Guid)">
            <summary>
            Returns a Referrer based on the specified id.
            </summary>
            <param name="id">The Referrer Id.</param>
            <returns>A Referrer.</returns>
        </member>
        <member name="M:BlogEngine.Core.Providers.BlogService.SetupBlogFromExistingBlog(BlogEngine.Core.Blog,BlogEngine.Core.Blog)">
            <summary>
            Sets up the required storage files/tables for a new Blog instance, from an existing blog instance.
            </summary>
            <param name="existingBlog">The existing blog instance to base the new blog instance off of.</param>
            <param name="newBlog">The new blog instance.</param>
            <returns>A boolean indicating if the setup process was successful.</returns>
        </member>
        <member name="M:BlogEngine.Core.Providers.BlogService.SetupNewBlog(BlogEngine.Core.Blog,System.String,System.String,System.String)">
            <summary>
            Setup new blog
            </summary>
            <param name="newBlog">New blog</param>
            <param name="userName">User name</param>
            <param name="email">Email</param>
            <param name="password">Password</param>
            <returns>True if successful</returns>
        </member>
        <member name="M:BlogEngine.Core.Providers.BlogService.UpdateBlogRoll(BlogEngine.Core.BlogRollItem)">
            <summary>
            Updates an exsiting BlogRoll.
            </summary>
            <param name="blogRoll">
            The blog Roll.
            </param>
        </member>
        <member name="M:BlogEngine.Core.Providers.BlogService.UpdateBlog(BlogEngine.Core.Blog)">
            <summary>
            Updates an exsiting Blog.
            </summary>
            <param name="blog">
            The blog.
            </param>
        </member>
        <member name="M:BlogEngine.Core.Providers.BlogService.UpdateCategory(BlogEngine.Core.Category)">
            <summary>
            Updates an exsiting Category.
            </summary>
            <param name="category">
            The category.
            </param>
        </member>
        <member name="M:BlogEngine.Core.Providers.BlogService.UpdatePage(BlogEngine.Core.Page)">
            <summary>
            Updates an exsiting Page.
            </summary>
            <param name="page">
            The page to update.
            </param>
        </member>
        <member name="M:BlogEngine.Core.Providers.BlogService.UpdatePost(BlogEngine.Core.Post)">
            <summary>
            Updates an exsiting Post.
            </summary>
            <param name="post">
            The post to update.
            </param>
        </member>
        <member name="M:BlogEngine.Core.Providers.BlogService.UpdateProfile(BlogEngine.Core.AuthorProfile)">
            <summary>
            Updates an exsiting Page.
            </summary>
            <param name="profile">
            The profile to update.
            </param>
        </member>
        <member name="M:BlogEngine.Core.Providers.BlogService.UpdateReferrer(BlogEngine.Core.Referrer)">
            <summary>
            Updates an existing Referrer.
            </summary>
            <param name="referrer">
            The referrer to update.
            </param>
        </member>
        <member name="M:BlogEngine.Core.Providers.BlogService.CreateDirectory(System.String)">
            <summary>
            Creates a directory at a specific path
            </summary>
            <param name="VirtualPath">The virtual path to be created</param>
            <returns>the new Directory object created</returns>
            <remarks>
            Virtual path is the path starting from the /files/ containers
            The entity is created against the current blog id
            </remarks>
        </member>
        <member name="M:BlogEngine.Core.Providers.BlogService.DeleteDirectory(System.String)">
            <summary>
            Deletes a spefic directory from a virtual path
            </summary>
            <param name="VirtualPath">The path to delete</param>
            <remarks>
            Virtual path is the path starting from the /files/ containers
            The entity is queried against to current blog id
            </remarks>
        </member>
        <member name="M:BlogEngine.Core.Providers.BlogService.DeleteDirectory(BlogEngine.Core.FileSystem.Directory)">
            <summary>
            Deletes a directory by passing in the Directory object
            </summary>
            <param name="DirectoryObj">the DirectoryObj </param>
        </member>
        <member name="M:BlogEngine.Core.Providers.BlogService.DirectoryExists(System.String)">
            <summary>
            Returns wether or not the specific directory by virtual path exists
            </summary>
            <param name="VirtualPath">The virtual path to query</param>
            <returns>boolean</returns>
        </member>
        <member name="M:BlogEngine.Core.Providers.BlogService.GetDirectory(System.String)">
            <summary>
            gets a directory by the virtual path
            </summary>
            <param name="VirtualPath">the virtual path</param>
            <returns>the directory object or null for no directory found</returns>
        </member>
        <member name="M:BlogEngine.Core.Providers.BlogService.GetDirectory(BlogEngine.Core.FileSystem.Directory,System.String[])">
            <summary>
            gets a directory by a basedirectory and a string array of sub path tree
            </summary>
            <param name="BaseDirectory">the base directory object</param>
            <param name="SubPath">the params of sub path</param>
            <returns>the directory found, or null for no directory found</returns>
        </member>
        <member name="M:BlogEngine.Core.Providers.BlogService.GetDirectories(BlogEngine.Core.FileSystem.Directory)">
            <summary>
            gets all the directories underneath a base directory. Only searches one level.
            </summary>
            <param name="BaseDirectory">the base directory</param>
            <returns>collection of Directory objects</returns>
        </member>
        <member name="M:BlogEngine.Core.Providers.BlogService.GetFiles(BlogEngine.Core.FileSystem.Directory)">
            <summary>
            gets all the files in a directory, only searches one level
            </summary>
            <param name="BaseDirectory">the base directory</param>
            <returns>collection of File objects</returns>
        </member>
        <member name="M:BlogEngine.Core.Providers.BlogService.GetFile(System.String)">
            <summary>
            gets a specific file by virtual path
            </summary>
            <param name="VirtualPath">the virtual path of the file</param>
            <returns></returns>
        </member>
        <member name="M:BlogEngine.Core.Providers.BlogService.FileExists(System.String)">
            <summary>
            boolean wether a file exists by its virtual path
            </summary>
            <param name="VirtualPath">the virtual path</param>
            <returns>boolean</returns>
        </member>
        <member name="M:BlogEngine.Core.Providers.BlogService.DeleteFile(System.String)">
            <summary>
            deletes a file by virtual path
            </summary>
            <param name="VirtualPath">virtual path</param>
        </member>
        <member name="M:BlogEngine.Core.Providers.BlogService.UploadFile(System.Byte[],System.String,BlogEngine.Core.FileSystem.Directory)">
            <summary>
            uploads a file to the provider container
            </summary>
            <param name="FileBinary">file contents as byte array</param>
            <param name="FileName">the file name</param>
            <param name="BaseDirectory">directory object that is the owner</param>
            <returns>the new file object</returns>
        </member>
        <member name="M:BlogEngine.Core.Providers.BlogService.UploadFile(System.Byte[],System.String,BlogEngine.Core.FileSystem.Directory,System.Boolean)">
            <summary>
            uploads a file to the provider container
            </summary>
            <param name="FileBinary">the contents of the file as a byte array</param>
            <param name="FileName">the file name</param>
            <param name="BaseDirectory">the directory object that is the owner</param>
            <param name="Overwrite">boolean wether to overwrite the file if it exists.</param>
            <returns>the new file object</returns>
        </member>
        <member name="M:BlogEngine.Core.Providers.BlogService.UploadFile(System.IO.Stream,System.String,BlogEngine.Core.FileSystem.Directory)">
            <summary>
            uploads a file to the provider container
            </summary>
            <param name="FileStream">the file stream of the file being uploaded</param>
            <param name="FileName">the file name</param>
            <param name="BaseDirectory">the directory object that is the owner</param>
            <returns>the new file object</returns>
        </member>
        <member name="M:BlogEngine.Core.Providers.BlogService.UploadFile(System.IO.Stream,System.String,BlogEngine.Core.FileSystem.Directory,System.Boolean)">
            <summary>
            uploads a file to the provider container
            </summary>
            <param name="FileStream">the file stream of the file being uploaded</param>
            <param name="FileName">the file name</param>
            <param name="BaseDirectory">the directory object that is the owner</param>
            <param name="Overwrite">boolean wether to overwrite the file if it exists.</param>
            <returns>the new file object</returns>
        </member>
        <member name="M:BlogEngine.Core.Providers.BlogService.GetFileContents(BlogEngine.Core.FileSystem.File)">
            <summary>
            gets the file contents via Lazy load, however in the DbProvider the Contents are loaded when the initial object is created to cut down on DbReads
            </summary>
            <param name="BaseFile">the baseFile object to fill</param>
            <returns>the original file object</returns>
        </member>
        <member name="M:BlogEngine.Core.Providers.BlogService.InsertPackage(BlogEngine.Core.Packaging.InstalledPackage)">
            <summary>
            Save installed gallery package
            </summary>
            <param name="package">Installed package</param>
        </member>
        <member name="M:BlogEngine.Core.Providers.BlogService.InsertPackageFiles(System.Collections.Generic.List{BlogEngine.Core.Packaging.PackageFile})">
            <summary>
            Save package files
            </summary>
            <param name="packageFiles">List of package files</param>
        </member>
        <member name="M:BlogEngine.Core.Providers.BlogService.InstalledFromGalleryPackages">
            <summary>
            Packages installed from online gallery
            </summary>
            <returns></returns>
        </member>
        <member name="M:BlogEngine.Core.Providers.BlogService.InstalledFromGalleryPackageFiles(System.String)">
            <summary>
            Log of files installed by gallery package
            </summary>
            <param name="packageId">Package ID</param>
            <returns>List of files</returns>
        </member>
        <member name="M:BlogEngine.Core.Providers.BlogService.DeletePackage(System.String)">
            <summary>
            Delete all installed by package files from application
            </summary>
            <param name="packageId">Package ID</param>
        </member>
        <member name="M:BlogEngine.Core.Providers.BlogService.SaveQuickNote(BlogEngine.Core.Notes.QuickNote)">
            <summary>
            Saves a QuickNote.
            </summary>
            <param name="note">The QuickNote to save.</param>
        </member>
        <member name="M:BlogEngine.Core.Providers.BlogService.SaveQuickSetting(BlogEngine.Core.Notes.QuickSetting)">
            <summary>
            Saves a QuickSetting.
            </summary>
            <param name="setting">The QuickSetting to save.</param>
        </member>
        <member name="M:BlogEngine.Core.Providers.BlogService.FillQuickNotes(System.String)">
            <summary>
            Returns a list of QuickNotes belonging to the given user.
            </summary>
            <param name="userId">The user whose QuickNotes we're retrieving.</param>
            <returns>A list of the user's QuickNotes.</returns>
        </member>
        <member name="M:BlogEngine.Core.Providers.BlogService.FillQuickSettings(System.String)">
            <summary>
            Returns a list of QuickSettings belonging to the given user.
            </summary>
            <param name="userId">The user whose QuickSettings we're retrieving.</param>
            <returns>A list of the user's QuickSettings.</returns>
        </member>
        <member name="M:BlogEngine.Core.Providers.BlogService.DeleteQuickNote(System.Guid)">
            <summary>
            Deletes the specified QuickNote.
            </summary>
            <param name="noteId">The QuickNote to delete.</param>
        </member>
        <member name="M:BlogEngine.Core.Providers.BlogService.LoadProviders">
            <summary>
            Load the providers from the web.config.
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Providers.BlogService.FileSystemProvider">
            <summary>
                gets the current FileSystem provider
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Providers.BlogService.FileSystemProviders">
            <summary>
                Gets a collection of FileSystem providers that are defined in Web.config.
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Providers.BlogService.Provider">
            <summary>
                Gets the current provider.
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Providers.BlogService.Providers">
            <summary>
                Gets a collection of all registered providers.
            </summary>
        </member>
        <member name="T:BlogEngine.Core.BlogSettings">
            <summary>
            Represents the configured settings for the blog engine.
            </summary>
        </member>
        <member name="F:BlogEngine.Core.BlogSettings.DefaultThemeCookieName">
            <summary>
                The default theme cookie name.
            </summary>
        </member>
        <member name="F:BlogEngine.Core.BlogSettings.blogSettingsSingleton">
            <summary>
                The blog settings singleton.
            </summary>
            <remarks>
            This should be created immediately instead of lazyloaded. It'll reduce the number of null checks that occur
            due to heavy reliance on calls to BlogSettings.Instance.
            </remarks>
        </member>
        <member name="F:BlogEngine.Core.BlogSettings.configuredTheme">
            <summary>
                The configured theme.
            </summary>
        </member>
        <member name="F:BlogEngine.Core.BlogSettings.numberOfRecentPosts">
            <summary>
                The number of recent posts.
            </summary>
        </member>
        <member name="F:BlogEngine.Core.BlogSettings.commentsPerPage">
            <summary>
                The number of comments per page.
            </summary>
        </member>
        <member name="F:BlogEngine.Core.BlogSettings.enableHttpCompression">
            <summary>
                The enable http compression.
            </summary>
        </member>
        <member name="F:BlogEngine.Core.BlogSettings.enablePasswordResets">
            <summary>
                Whether passwords can be reset.
            </summary>
        </member>
        <member name="F:BlogEngine.Core.BlogSettings.SyncRoot">
            <summary>
            The sync root.
            </summary>
        </member>
        <member name="F:BlogEngine.Core.BlogSettings.remoteDownloadTimeout">
            <summary>
            The timeout in milliseconds for a remote download. Default is 30 seconds.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.BlogSettings.#ctor">
            <summary>
                Prevents a default instance of the <see cref="T:BlogEngine.Core.BlogSettings"/> class from being created. 
                Initializes a new instance of the <see cref="T:BlogEngine.Core.BlogSettings"/> class.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.BlogSettings.#ctor(BlogEngine.Core.Blog)">
            <summary>
            
            </summary>
            <param name="blog"></param>
        </member>
        <member name="M:BlogEngine.Core.BlogSettings.GetInstanceSettings(BlogEngine.Core.Blog)">
            <summary>
            Returns the settings for the requested blog instance.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.BlogSettings.IsThemeRazor(System.String)">
            <summary>
            Determines if themeName is a razor theme.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.BlogSettings.GetThemeWithAdjustments(System.String)">
            <summary>
            Takes into account factors such as if there is a theme override of if
            the theme is a Razor theme and returns the actual theme folder name
            for the current HTTP request.
            </summary>
        </member>
        <member name="F:BlogEngine.Core.BlogSettings.themeCookieName">
            <summary>
                The theme cookie name.
            </summary>
        </member>
        <member name="F:BlogEngine.Core.BlogSettings.version">
            <summary>
                The version.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.BlogSettings.Version">
            <summary>
            Returns the BlogEngine.NET version information.
            </summary>
            <value>
            The BlogEngine.NET major, minor, revision, and build numbers.
            </value>
            <remarks>
            The current version is determined by extracting the build version of the BlogEngine.Core assembly.
            </remarks>
            <returns>
            The version.
            </returns>
        </member>
        <member name="M:BlogEngine.Core.BlogSettings.Load(BlogEngine.Core.Blog)">
            <summary>
            Initializes the singleton instance of the <see cref="T:BlogEngine.Core.BlogSettings"/> class.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.BlogSettings.OnChanged">
            <summary>
            Occurs when the settings have been changed.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.BlogSettings.Save">
            <summary>
            Saves the settings to disk.
            </summary>
        </member>
        <member name="E:BlogEngine.Core.BlogSettings.Changed">
            <summary>
                Occurs when [changed].
            </summary>
        </member>
        <member name="P:BlogEngine.Core.BlogSettings.Instance">
            <summary>
                Gets the singleton instance of the <see cref="T:BlogEngine.Core.BlogSettings"/> class.
            </summary>
            <value>A singleton instance of the <see cref="T:BlogEngine.Core.BlogSettings"/> class.</value>
            <remarks>
            </remarks>
        </member>
        <member name="P:BlogEngine.Core.BlogSettings.IsRazorTheme">
            <summary>
            Gets whether Theme is a razor theme.
            </summary>
        </member>
        <member name="P:BlogEngine.Core.BlogSettings.Description">
            <summary>
                Gets or sets the description of the blog.
            </summary>
            <value>A brief synopsis of the blog content.</value>
            <remarks>
                This value is also used for the description meta tag.
            </remarks>
        </member>
        <member name="P:BlogEngine.Core.BlogSettings.EnableHttpCompression">
            <summary>
                Gets or sets a value indicating if HTTP compression is enabled.
            </summary>
            <value><b>true</b> if compression is enabled, otherwise returns <b>false</b>.</value>
        </member>
        <member name="P:BlogEngine.Core.BlogSettings.EnableReferrerTracking">
            <summary>
                Gets or sets a value indicating if referral tracking is enabled.
            </summary>
            <value><b>true</b> if referral tracking is enabled, otherwise returns <b>false</b>.</value>
        </member>
        <member name="P:BlogEngine.Core.BlogSettings.NumberOfReferrerDays">
            <summary>
                Gets or sets a value indicating the number of days that referrer information should be stored.
            </summary>
        </member>
        <member name="P:BlogEngine.Core.BlogSettings.EnableRelatedPosts">
            <summary>
                Gets or sets a value indicating if related posts are displayed.
            </summary>
            <value><b>true</b> if related posts are displayed, otherwise returns <b>false</b>.</value>
        </member>
        <member name="P:BlogEngine.Core.BlogSettings.AlternateFeedUrl">
            <summary>
                Gets or sets the FeedBurner user name.
            </summary>
        </member>
        <member name="P:BlogEngine.Core.BlogSettings.FeedAuthor">
            <summary>
            RSS feed author
            </summary>
        </member>
        <member name="P:BlogEngine.Core.BlogSettings.TimeStampPostLinks">
            <summary>
                Gets or sets whether or not to time stamp post links.
            </summary>
        </member>
        <member name="P:BlogEngine.Core.BlogSettings.Name">
            <summary>
                Gets or sets the name of the blog.
            </summary>
            <value>The title of the blog.</value>
        </member>
        <member name="P:BlogEngine.Core.BlogSettings.NumberOfRecentPosts">
            <summary>
                Gets or sets the default number of recent posts to display.
            </summary>
            <value>The number of recent posts to display.</value>
        </member>
        <member name="P:BlogEngine.Core.BlogSettings.NumberOfRecentComments">
            <summary>
                Gets or sets the default number of recent posts to display.
            </summary>
            <value>The number of recent posts to display.</value>
        </member>
        <member name="P:BlogEngine.Core.BlogSettings.PostsPerPage">
            <summary>
                Gets or sets the number of posts to show an each page.
            </summary>
            <value>The number of posts to show an each page.</value>
        </member>
        <member name="P:BlogEngine.Core.BlogSettings.ShowLivePreview">
            <summary>
                Gets or sets a value indicating if live preview of post is displayed.
            </summary>
            <value><b>true</b> if live previews are displayed, otherwise returns <b>false</b>.</value>
        </member>
        <member name="P:BlogEngine.Core.BlogSettings.EnableRating">
            <summary>
                Gets or sets a value indicating if live preview of post is displayed.
            </summary>
            <value><b>true</b> if live previews are displayed, otherwise returns <b>false</b>.</value>
        </member>
        <member name="P:BlogEngine.Core.BlogSettings.ShowDescriptionInPostList">
            <summary>
                Gets or sets a value indicating if the full post is displayed in lists or only the description/excerpt.
            </summary>
        </member>
        <member name="P:BlogEngine.Core.BlogSettings.DescriptionCharacters">
            <summary>
                Gets or sets a value indicating how many characters should be shown of the description
            </summary>
        </member>
        <member name="P:BlogEngine.Core.BlogSettings.ShowDescriptionInPostListForPostsByTagOrCategory">
            <summary>
                Gets or sets a value indicating if the full post is displayed in lists by tag/category or only the description/excerpt.
            </summary>
        </member>
        <member name="P:BlogEngine.Core.BlogSettings.DescriptionCharactersForPostsByTagOrCategory">
            <summary>
                Gets or sets a value indicating how many characters should be shown of the description when posts are shown by tag or category.
            </summary>
        </member>
        <member name="P:BlogEngine.Core.BlogSettings.EnableEnclosures">
            <summary>
                Enable enclosures for RSS feeds
            </summary>
        </member>
        <member name="P:BlogEngine.Core.BlogSettings.SyndicationFormat">
            <summary>
                Gets or sets the default syndication format used by the blog.
            </summary>
            <value>The default syndication format used by the blog.</value>
            <remarks>
                If no value is specified, blog defaults to using RSS 2.0 format.
            </remarks>
            <seealso cref="T:BlogEngine.Core.SyndicationFormat"/>
        </member>
        <member name="P:BlogEngine.Core.BlogSettings.ThemeCookieName">
            <summary>
                Gets or sets the name of the cookie that can override
                the selected theme.
            </summary>
            <value>The name of the cookie that is checked while determining the theme.</value>
            <remarks>
                The default value is "theme".
            </remarks>
        </member>
        <member name="P:BlogEngine.Core.BlogSettings.Theme">
            <summary>
                Gets or sets the current theme applied to the blog.
                Default theme can be overridden in the query string
                or cookie to let users select different theme
            </summary>
            <value>The configured theme for the blog.</value>
        </member>
        <member name="P:BlogEngine.Core.BlogSettings.MobileTheme">
            <summary>
                Gets or sets the mobile theme.
            </summary>
            <value>The mobile theme.</value>
        </member>
        <member name="P:BlogEngine.Core.BlogSettings.RemoveWhitespaceInStyleSheets">
            <summary>
                DO NOT USE: 
                This setting is depricated, EnableOptimization includes both bundling and minification
            </summary>
            <value><b>true</b> if whitespace is removed, otherwise returns <b>false</b>.</value>
        </member>
        <member name="P:BlogEngine.Core.BlogSettings.EnableOptimization">
            <summary>
                Gets or sets a value indicating if scripts and styles should be bundled and minified
            </summary>
            <value><b>true</b> if whitespace is removed, otherwise returns <b>false</b>.</value>
        </member>
        <member name="P:BlogEngine.Core.BlogSettings.CompressWebResource">
            <summary>
                Gets or sets a value indicating whether to compress WebResource.axd
            </summary>
            <value><c>true</c> if [compress web resource]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:BlogEngine.Core.BlogSettings.UseBlogNameInPageTitles">
            <summary>
                Gets or sets a value indicating if whitespace in stylesheets should be removed
            </summary>
            <value><b>true</b> if whitespace is removed, otherwise returns <b>false</b>.</value>
        </member>
        <member name="P:BlogEngine.Core.BlogSettings.RequireSslMetaWeblogApi">
            <summary>
                Gets or sets a value indicating whether [require SSL for MetaWeblogAPI connections].
            </summary>
        </member>
        <member name="P:BlogEngine.Core.BlogSettings.EnableOpenSearch">
            <summary>
                Gets or sets a value indicating if whitespace in stylesheets should be removed
            </summary>
            <value><b>true</b> if whitespace is removed, otherwise returns <b>false</b>.</value>
        </member>
        <member name="P:BlogEngine.Core.BlogSettings.TrackingScript">
            <summary>
                Gets or sets the tracking script used to collect visitor data.
            </summary>
        </member>
        <member name="P:BlogEngine.Core.BlogSettings.DisplayCommentsOnRecentPosts">
            <summary>
                Gets or sets a value indicating if whitespace in stylesheets should be removed
            </summary>
            <value><b>true</b> if whitespace is removed, otherwise returns <b>false</b>.</value>
        </member>
        <member name="P:BlogEngine.Core.BlogSettings.DisplayRatingsOnRecentPosts">
            <summary>
                Gets or sets a value indicating if whitespace in stylesheets should be removed
            </summary>
            <value><b>true</b> if whitespace is removed, otherwise returns <b>false</b>.</value>
        </member>
        <member name="P:BlogEngine.Core.BlogSettings.ShowPostNavigation">
            <summary>
                Gets or sets a value indicating whether or not to show the post navigation.
            </summary>
            <value><c>true</c> if [show post navigation]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:BlogEngine.Core.BlogSettings.EnablePasswordReset">
            <summary>
                Gets or sets a value indicating whether or not to enable password resets.
            </summary>
            <value><c>true</c> if [enable self registration]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:BlogEngine.Core.BlogSettings.EnableSelfRegistration">
            <summary>
                Gets or sets a value indicating whether or not to enable self registration.
            </summary>
            <value><c>true</c> if [enable self registration]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:BlogEngine.Core.BlogSettings.SelfRegistrationInitialRole">
            <summary>
                Gets or sets the initial role assigned to users who self register.
            </summary>
            <value>The role name.</value>
        </member>
        <member name="P:BlogEngine.Core.BlogSettings.CreateBlogOnSelfRegistration">
            <summary>
            If we need to create blog for self-registered user
            (instead of just add user to existing blog)
            </summary>
        </member>
        <member name="P:BlogEngine.Core.BlogSettings.HandleWwwSubdomain">
            <summary>
                Gets or sets how to handle the www subdomain of the url (for SEO purposes).
            </summary>
        </member>
        <member name="P:BlogEngine.Core.BlogSettings.EnablePingBackSend">
            <summary>
                Gets or sets a value indicating whether [enable ping back send].
            </summary>
            <value><c>true</c> if [enable ping back send]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:BlogEngine.Core.BlogSettings.EnablePingBackReceive">
            <summary>
                Gets or sets a value indicating whether [enable ping back receive].
            </summary>
            <value>
                <c>true</c> if [enable ping back receive]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:BlogEngine.Core.BlogSettings.EnableTrackBackSend">
            <summary>
                Gets or sets a value indicating whether [enable track back send].
            </summary>
            <value>
                <c>true</c> if [enable track back send]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:BlogEngine.Core.BlogSettings.EnableTrackBackReceive">
            <summary>
                Gets or sets a value indicating whether [enable track back receive].
            </summary>
            <value>
                <c>true</c> if [enable track back receive]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:BlogEngine.Core.BlogSettings.ThumbnailServiceApi">
            <summary>
            API provided by thumbnail service provider
            </summary>
        </member>
        <member name="P:BlogEngine.Core.BlogSettings.EnableErrorLogging">
            <summary>
                Gets or sets a value indicating whether unhandled errors are logged.
            </summary>
            <value>
                <c>true</c> if unhandled errors are to be logged otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:BlogEngine.Core.BlogSettings.Email">
            <summary>
                Gets or sets the e-mail address notifications are sent to.
            </summary>
            <value>The e-mail address notifications are sent to.</value>
        </member>
        <member name="P:BlogEngine.Core.BlogSettings.SendMailOnComment">
            <summary>
                Gets or sets a value indicating if an enail is sent when a comment is added to a post.
            </summary>
            <value><b>true</b> if email notification of new comments is enabled, otherwise returns <b>false</b>.</value>
        </member>
        <member name="P:BlogEngine.Core.BlogSettings.SmtpPassword">
            <summary>
                Gets or sets the password used to connect to the SMTP server.
            </summary>
            <value>The password used to connect to the SMTP server.</value>
        </member>
        <member name="P:BlogEngine.Core.BlogSettings.SmtpServer">
            <summary>
                Gets or sets the DNS name or IP address of the SMTP server used to send notification emails.
            </summary>
            <value>The DNS name or IP address of the SMTP server used to send notification emails.</value>
        </member>
        <member name="P:BlogEngine.Core.BlogSettings.SmtpServerPort">
            <summary>
                Gets or sets the DNS name or IP address of the SMTP server used to send notification emails.
            </summary>
            <value>The DNS name or IP address of the SMTP server used to send notification emails.</value>
        </member>
        <member name="P:BlogEngine.Core.BlogSettings.SmtpUserName">
            <summary>
                Gets or sets the user name used to connect to the SMTP server.
            </summary>
            <value>The user name used to connect to the SMTP server.</value>
        </member>
        <member name="P:BlogEngine.Core.BlogSettings.EnableSsl">
            <summary>
                Gets or sets a value indicating if SSL is enabled for sending e-mails
            </summary>
        </member>
        <member name="P:BlogEngine.Core.BlogSettings.EmailSubjectPrefix">
            <summary>
                Gets or sets the email subject prefix.
            </summary>
            <value>The email subject prefix.</value>
        </member>
        <member name="P:BlogEngine.Core.BlogSettings.DaysCommentsAreEnabled">
            <summary>
                Gets or sets the number of days that a post accepts comments.
            </summary>
            <value>The number of days that a post accepts comments.</value>
            <remarks>
                After this time period has expired, comments on a post are disabled.
            </remarks>
        </member>
        <member name="P:BlogEngine.Core.BlogSettings.EnableCountryInComments">
            <summary>
                Gets or sets a value indicating if dispay of the country of commenter is enabled.
            </summary>
            <value><b>true</b> if commenter country display is enabled, otherwise returns <b>false</b>.</value>
        </member>
        <member name="P:BlogEngine.Core.BlogSettings.EnableWebsiteInComments">
            <summary>
                Gets or sets a value indicating if display of the website of commenter is enabled
            </summary>
        </member>
        <member name="P:BlogEngine.Core.BlogSettings.IsCoCommentEnabled">
            <summary>
                Gets or sets a value indicating if CoComment support is enabled.
            </summary>
            <value><b>true</b> if CoComment support is enabled, otherwise returns <b>false</b>.</value>
        </member>
        <member name="P:BlogEngine.Core.BlogSettings.IsCommentsEnabled">
            <summary>
                Gets or sets a value indicating if comments are enabled for posts.
            </summary>
            <value><b>true</b> if comments can be made against a post, otherwise returns <b>false</b>.</value>
        </member>
        <member name="P:BlogEngine.Core.BlogSettings.EnableCommentsModeration">
            <summary>
                Gets or sets a value indicating if comments moderation is used for posts.
            </summary>
            <value><b>true</b> if comments are moderated for posts, otherwise returns <b>false</b>.</value>
        </member>
        <member name="P:BlogEngine.Core.BlogSettings.Avatar">
            <summary>
                Gets or sets a value indicating if Gravatars are enabled or not.
            </summary>
            <value><b>true</b> if Gravatars are enabled, otherwise returns <b>false</b>.</value>
        </member>
        <member name="P:BlogEngine.Core.BlogSettings.IsCommentNestingEnabled">
            <summary>
                Gets or sets a value indicated if comments should be displayed as nested.
            </summary>
            <value><b>true</b> if comments should be displayed as nested, <b>false</b> for flat comments.</value>
        </member>
        <member name="P:BlogEngine.Core.BlogSettings.TrustAuthenticatedUsers">
            <summary>
                If true comments from authenticated users always approved
            </summary>
        </member>
        <member name="P:BlogEngine.Core.BlogSettings.DisqusWebsiteName">
            <summary>
                Short website name that used to identify Disqus account
            </summary>
        </member>
        <member name="P:BlogEngine.Core.BlogSettings.DisqusDevMode">
            <summary>
                Development mode to test disqus on local host
            </summary>
        </member>
        <member name="P:BlogEngine.Core.BlogSettings.DisqusAddCommentsToPages">
            <summary>
                Allow also to add comments to the pages
            </summary>
        </member>
        <member name="P:BlogEngine.Core.BlogSettings.CommentWhiteListCount">
            <summary>
                Number of comments approved to add user to white list
            </summary>
        </member>
        <member name="P:BlogEngine.Core.BlogSettings.CommentBlackListCount">
            <summary>
                Number of comments approved to add user to white list
            </summary>
        </member>
        <member name="P:BlogEngine.Core.BlogSettings.AddIpToWhitelistFilterOnApproval">
            <summary>
                Automatically add IP address to white list filter when comment is approved.
            </summary>
        </member>
        <member name="P:BlogEngine.Core.BlogSettings.AddIpToBlacklistFilterOnRejection">
            <summary>
                Automatically add IP address to black list filter when comment is rejected.
            </summary>
        </member>
        <member name="P:BlogEngine.Core.BlogSettings.BlockAuthorOnCommentDelete">
            <summary>
                Automatically add author to Block list when comment is deleted.
            </summary>
        </member>
        <member name="P:BlogEngine.Core.BlogSettings.SecurityValidationKey">
            <summary>
                Gets or sets the security validation key.
            </summary>
            <value>The security validation key.</value>
        </member>
        <member name="P:BlogEngine.Core.BlogSettings.CommentsPerPage">
            <summary>
                Number of comments per page displayed in the comments admin section
            </summary>
        </member>
        <member name="P:BlogEngine.Core.BlogSettings.ModerationType">
            <summary>
                Gets or sets a value indicating type of moderation
            </summary>
        </member>
        <member name="P:BlogEngine.Core.BlogSettings.CommentReportMistakes">
            <summary>
                Enables to report mistakes back to service
            </summary>
        </member>
        <member name="P:BlogEngine.Core.BlogSettings.BlogrollMaxLength">
            <summary>
                Gets or sets the maximum number of characters that are displayed from a blog-roll retrieved post.
            </summary>
            <value>The maximum number of characters to display.</value>
        </member>
        <member name="P:BlogEngine.Core.BlogSettings.BlogrollUpdateMinutes">
            <summary>
                Gets or sets the number of minutes to wait before polling blog-roll sources for changes.
            </summary>
            <value>The number of minutes to wait before polling blog-roll sources for changes.</value>
        </member>
        <member name="P:BlogEngine.Core.BlogSettings.BlogrollVisiblePosts">
            <summary>
                Gets or sets the number of posts to display from a blog-roll source.
            </summary>
            <value>The number of posts to display from a blog-roll source.</value>
        </member>
        <member name="P:BlogEngine.Core.BlogSettings.EnableCommentSearch">
            <summary>
                Gets or sets a value indicating if search of post comments is enabled.
            </summary>
            <value><b>true</b> if post comments can be searched, otherwise returns <b>false</b>.</value>
        </member>
        <member name="P:BlogEngine.Core.BlogSettings.ShowIncludeCommentsOption">
            <summary>
                If yes, checkbox for include comments in search added to UI
            </summary>
        </member>
        <member name="P:BlogEngine.Core.BlogSettings.SearchButtonText">
            <summary>
                Gets or sets the search button text to be displayed.
            </summary>
            <value>The search button text to be displayed.</value>
        </member>
        <member name="P:BlogEngine.Core.BlogSettings.SearchCommentLabelText">
            <summary>
                Gets or sets the search comment label text to display.
            </summary>
            <value>The search comment label text to display.</value>
        </member>
        <member name="P:BlogEngine.Core.BlogSettings.SearchDefaultText">
            <summary>
                Gets or sets the default search text to display.
            </summary>
            <value>The default search text to display.</value>
        </member>
        <member name="P:BlogEngine.Core.BlogSettings.Endorsement">
            <summary>
                Gets or sets the URI of a web log that the author of this web log is promoting.
            </summary>
            <value>The <see cref="T:System.Uri"/> of a web log that the author of this web log is promoting.</value>
        </member>
        <member name="P:BlogEngine.Core.BlogSettings.PostsPerFeed">
            <summary>
                Gets or sets the maximum number of characters that are displayed from a blog-roll retrieved post.
            </summary>
            <value>The maximum number of characters to display.</value>
        </member>
        <member name="P:BlogEngine.Core.BlogSettings.AuthorName">
            <summary>
                Gets or sets the name of the author of this blog.
            </summary>
            <value>The name of the author of this blog.</value>
        </member>
        <member name="P:BlogEngine.Core.BlogSettings.Language">
            <summary>
                Gets or sets the language this blog is written in.
            </summary>
            <value>The language this blog is written in.</value>
            <remarks>
                Recommended best practice for the values of the Language element is defined by RFC 1766 [RFC1766] which includes a two-letter Language Code (taken from the ISO 639 standard [ISO639]), 
                followed optionally, by a two-letter Country Code (taken from the ISO 3166 standard [ISO3166]).
            </remarks>
            <example>
                en-US
            </example>
        </member>
        <member name="P:BlogEngine.Core.BlogSettings.GeocodingLatitude">
            <summary>
                Gets or sets the latitude component of the geocoding position for this blog.
            </summary>
            <value>The latitude value.</value>
        </member>
        <member name="P:BlogEngine.Core.BlogSettings.GeocodingLongitude">
            <summary>
                Gets or sets the longitude component of the geocoding position for this blog.
            </summary>
            <value>The longitude value.</value>
        </member>
        <member name="P:BlogEngine.Core.BlogSettings.ContactFormMessage">
            <summary>
                Gets or sets the name of the author of this blog.
            </summary>
            <value>The name of the author of this blog.</value>
        </member>
        <member name="P:BlogEngine.Core.BlogSettings.ContactThankMessage">
            <summary>
                Gets or sets the name of the author of this blog.
            </summary>
            <value>The name of the author of this blog.</value>
        </member>
        <member name="P:BlogEngine.Core.BlogSettings.HtmlHeader">
            <summary>
                Gets or sets the name of the author of this blog.
            </summary>
            <value>The name of the author of this blog.</value>
        </member>
        <member name="P:BlogEngine.Core.BlogSettings.Culture">
            <summary>
                Gets or sets the name of the author of this blog.
            </summary>
            <value>The name of the author of this blog.</value>
        </member>
        <member name="P:BlogEngine.Core.BlogSettings.Timezone">
            <summary>
                Gets or sets the maximum number of characters that are displayed from a blog-roll retrieved post.
            </summary>
            <value>The maximum number of characters to display.</value>
        </member>
        <member name="P:BlogEngine.Core.BlogSettings.EnableContactAttachments">
            <summary>
                Gets or sets whether or not to allow visitors to send attachments via the contact form.
            </summary>
        </member>
        <member name="P:BlogEngine.Core.BlogSettings.EnableRecaptchaOnContactForm">
            <summary>
                Gets or sets whether or not to use Recaptcha on the contact form.
            </summary>
        </member>
        <member name="P:BlogEngine.Core.BlogSettings.EnableQuickNotes">
            <summary>
                Gets or sets a value indicating if QuickNotes module is enabled
            </summary>
            <value><b>true</b> if QuickNotes is enabled, otherwise returns <b>false</b>.</value>
        </member>
        <member name="P:BlogEngine.Core.BlogSettings.RemoveExtensionsFromUrls">
            <summary>
                Gets or sets a value indicating if extensions (.aspx) should be removed from URLs
            </summary>
            <value><b>true</b> if should be removed, otherwise returns <b>false</b>.</value>
        </member>
        <member name="P:BlogEngine.Core.BlogSettings.RedirectToRemoveFileExtension">
            <summary>
                Gets or sets a value indicating if incoming requests containing extensions (.aspx) should be redirected to a URL with the extension removed.
            </summary>
            <value><b>true</b> if should be redirected, otherwise returns <b>false</b>.</value>
        </member>
        <member name="P:BlogEngine.Core.BlogSettings.AllowServerToDownloadRemoteFiles">
            <summary>
            Gets or sets whether this application's handlers should be able to download and cache files hosted on other servers.
            </summary>
            <remarks>
            
            Allowing the server's various handlers(Such as JavaScriptHandler and CssHandler) could potentially allow a an attacker
            to tie up the server by continuously requesting files of excess file size, or from servers that take forever to time out.
            
            This is false by default.
            
            </remarks>
        </member>
        <member name="P:BlogEngine.Core.BlogSettings.RemoteFileDownloadTimeout">
            <summary>
            Gets or sets the maximum length of time in milliseconds the server should spend downloading remote files. The default value is 30000.
            </summary>
            <remarks>
            
            If the limit is set to something below 0, the defaultRemoteDownloadTimeout will be used instead.
            0 is an acceptable value, users should use this value to indicate "unlimited time".
            </remarks>
        </member>
        <member name="P:BlogEngine.Core.BlogSettings.RemoteMaxFileSize">
            <summary>
            Gets or sets the maximum allowed file size in bytes that BlogEngine can download from a remote server. Defaults to 512k.
            </summary>
            <remarks>
            
            Set this value to 0 for unlimited file size.
            
            </remarks>
        </member>
        <member name="P:BlogEngine.Core.BlogSettings.GalleryFeedUrl">
            <summary>
            Gallery server feed URL
            </summary>
        </member>
        <member name="T:BlogEngine.Core.BlogSettings.Moderation">
            <summary>
            Type of comment moderation
            </summary>
        </member>
        <member name="F:BlogEngine.Core.BlogSettings.Moderation.Manual">
            <summary>
                Comments moderated manually
            </summary>
        </member>
        <member name="F:BlogEngine.Core.BlogSettings.Moderation.Auto">
            <summary>
                Comments moderated by filters
            </summary>
        </member>
        <member name="F:BlogEngine.Core.BlogSettings.Moderation.Disqus">
            <summary>
                Moderated by Disqus
            </summary>
        </member>
        <member name="T:BlogEngine.Core.Comment">
            <summary>
            Represents a comment to a blog post.
            </summary>
        </member>
        <member name="T:BlogEngine.Core.IPublishable">
            <summary>
            An interface implemented by the classed that can be published.
                <remarks>
            To implemnet this interface means that the class can be searched
                    from the search page and that it can be syndicated in RSS and ATOM.
                </remarks>
            </summary>
        </member>
        <member name="M:BlogEngine.Core.IPublishable.OnServing(BlogEngine.Core.ServingEventArgs)">
            <summary>
            Raises the <see cref="E:Serving"/> event.
            </summary>
            <param name="eventArgs">The <see cref="T:BlogEngine.Core.ServingEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="P:BlogEngine.Core.IPublishable.AbsoluteLink">
            <summary>
                Gets the absolute link.
            </summary>
            <value>The absolute link.</value>
        </member>
        <member name="P:BlogEngine.Core.IPublishable.Author">
            <summary>
                Gets the author.
            </summary>
            <value>The author.</value>
        </member>
        <member name="P:BlogEngine.Core.IPublishable.Categories">
            <summary>
                Gets the categories.
            </summary>
            <value>The categories.</value>
        </member>
        <member name="P:BlogEngine.Core.IPublishable.Content">
            <summary>
                Gets the content.
            </summary>
            <value>The content.</value>
        </member>
        <member name="P:BlogEngine.Core.IPublishable.DateCreated">
            <summary>
                Gets the date created.
            </summary>
            <value>The date created.</value>
        </member>
        <member name="P:BlogEngine.Core.IPublishable.DateModified">
            <summary>
                Gets the date modified.
            </summary>
            <value>The date modified.</value>
        </member>
        <member name="P:BlogEngine.Core.IPublishable.Description">
            <summary>
                Gets the description.
            </summary>
            <value>The description.</value>
        </member>
        <member name="P:BlogEngine.Core.IPublishable.Id">
            <summary>
                Gets the id.
            </summary>
            <value>The published item id.</value>
        </member>
        <member name="P:BlogEngine.Core.IPublishable.BlogId">
            <summary>
                Gets the blog instance ID.
            </summary>
            <value>The blog instance ID containing the publishable.</value>
        </member>
        <member name="P:BlogEngine.Core.IPublishable.Blog">
            <summary>
                Gets the blog instance.
            </summary>
            <value>The blog instance containing the publishable.</value>
        </member>
        <member name="P:BlogEngine.Core.IPublishable.IsPublished">
            <summary>
                Gets a value indicating whether or not this item is published.
            </summary>
        </member>
        <member name="P:BlogEngine.Core.IPublishable.RelativeLink">
            <summary>
                Gets the relative link.
            </summary>
            <value>The relative link.</value>
        </member>
        <member name="P:BlogEngine.Core.IPublishable.RelativeOrAbsoluteLink">
            <summary>
                Returns a relative link if possible if the hostname of this blog instance matches the
                hostname of the site aggregation blog.  If the hostname is different, then the
                absolute link is returned.
            </summary>
            <value>The relative link.</value>
        </member>
        <member name="P:BlogEngine.Core.IPublishable.Title">
            <summary>
                Gets the title of the object
            </summary>
        </member>
        <member name="P:BlogEngine.Core.IPublishable.IsVisible">
            <summary>
                Gets a value indicating whether or not this item should be shown.
            </summary>
        </member>
        <member name="P:BlogEngine.Core.IPublishable.IsVisibleToPublic">
            <summary>
                Gets a value indicating whether or not this item is visible to the public.
            </summary>
        </member>
        <member name="F:BlogEngine.Core.Comment.comments">
            <summary>
            The comments.
            </summary>
        </member>
        <member name="F:BlogEngine.Core.Comment.dateCreated">
            <summary>
            The date created.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Comment.OnServing(BlogEngine.Core.Comment,BlogEngine.Core.ServingEventArgs)">
            <summary>
            Called when [serving].
            </summary>
            <param name="comment">The comment.</param>
            <param name="arg">The <see cref="T:BlogEngine.Core.ServingEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:BlogEngine.Core.Comment.OnSpamAttack">
            <summary>
            Called when [spam attack].
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Comment.CompareTo(BlogEngine.Core.Comment)">
            <summary>
            Compares the current object with another object of the same type.
            </summary>
            <param name="other">
            An object to compare with this object.
            </param>
            <returns>
            A 32-bit signed integer that indicates the relative order of the 
                objects being compared. The return value has the following meanings: 
                Value Meaning Less than zero This object is less than the other parameter.
                Zero This object is equal to other. Greater than zero This object is greater than other.
            </returns>
        </member>
        <member name="M:BlogEngine.Core.Comment.OnServing(BlogEngine.Core.ServingEventArgs)">
            <summary>
            Raises the <see cref="E:BlogEngine.Core.Comment.Serving"/> event.
            </summary>
            <param name="eventArgs">The <see cref="T:BlogEngine.Core.ServingEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:BlogEngine.Core.Comment.OnApproved(BlogEngine.Core.Comment)">
            <summary>
            Called when [approved].
            </summary>
            <param name="comment">The comment.</param>
        </member>
        <member name="M:BlogEngine.Core.Comment.OnApproving(BlogEngine.Core.Comment,System.ComponentModel.CancelEventArgs)">
            <summary>
            Called when [approving].
            </summary>
            <param name="comment">The comment.</param>
            <param name="e">The <see cref="T:System.ComponentModel.CancelEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:BlogEngine.Core.Comment.OnDisapproved(BlogEngine.Core.Comment)">
            <summary>
            Called when [disapproved].
            </summary>
            <param name="comment">The comment.</param>
        </member>
        <member name="M:BlogEngine.Core.Comment.OnDisapproving(BlogEngine.Core.Comment,System.ComponentModel.CancelEventArgs)">
            <summary>
            Called when [disapproving].
            </summary>
            <param name="comment">The comment.</param>
            <param name="e">The <see cref="T:System.ComponentModel.CancelEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="E:BlogEngine.Core.Comment.Approved">
            <summary>
                Occurs after a comment is approved by the comment moderator.
            </summary>
        </member>
        <member name="E:BlogEngine.Core.Comment.Approving">
            <summary>
                Occurs just before a comment is approved by the comment moderator.
            </summary>
        </member>
        <member name="E:BlogEngine.Core.Comment.Disapproved">
            <summary>
                Occurs after a comment is disapproved by the comment moderator.
            </summary>
        </member>
        <member name="E:BlogEngine.Core.Comment.Disapproving">
            <summary>
                Occurs just before a comment is disapproved by the comment moderator.
            </summary>
        </member>
        <member name="E:BlogEngine.Core.Comment.Serving">
            <summary>
                Occurs when the post is being served to the output stream.
            </summary>
        </member>
        <member name="E:BlogEngine.Core.Comment.SpamAttack">
            <summary>
                Occurs when the page is being attacked by robot spam.
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Comment.AbsoluteLink">
            <summary>
                Gets the absolute link.
            </summary>
            <value>The absolute link.</value>
        </member>
        <member name="P:BlogEngine.Core.Comment.Author">
            <summary>
                Gets or sets the author.
            </summary>
            <value>The author.</value>
        </member>
        <member name="P:BlogEngine.Core.Comment.Avatar">
            <summary>
                Gets or sets the Avatar of the comment.
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Comment.Comments">
            <summary>
                Gets a list of Comments.
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Comment.Content">
            <summary>
                Gets or sets the content.
            </summary>
            <value>The content.</value>
        </member>
        <member name="P:BlogEngine.Core.Comment.Country">
            <summary>
                Gets or sets the country.
            </summary>
            <value>The country.</value>
        </member>
        <member name="P:BlogEngine.Core.Comment.DateCreated">
            <summary>
                Gets or sets when the comment was created.
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Comment.Description">
            <summary>
                Gets the description. Returns always string.empty.
            </summary>
            <value>The description.</value>
        </member>
        <member name="P:BlogEngine.Core.Comment.Email">
            <summary>
                Gets or sets the email.
            </summary>
            <value>The email.</value>
        </member>
        <member name="P:BlogEngine.Core.Comment.IP">
            <summary>
                Gets or sets the IP address.
            </summary>
            <value>The IP address.</value>
        </member>
        <member name="P:BlogEngine.Core.Comment.Id">
            <summary>
                Gets or sets the Id of the comment.
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Comment.IsApproved">
            <summary>
                Gets or sets a value indicating whether the Comment is approved.
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Comment.IsSpam">
            <summary>
                Indicate if comment is spam
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Comment.IsDeleted">
            <summary>
                indicate if comment is deleted
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Comment.IsPublished">
            <summary>
                Gets a value indicating whether or not this comment has been published
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Comment.IsVisible">
            <summary>
                Gets a value indicating whether or not this comment should be shown
            </summary>
            <value></value>
        </member>
        <member name="P:BlogEngine.Core.Comment.IsVisibleToPublic">
            <summary>
                Gets a value indicating whether or not this comment is visible to visitors not logged into the blog.
            </summary>
            <value></value>
        </member>
        <member name="P:BlogEngine.Core.Comment.ModeratedBy">
            <summary>
               Gets or sets process that approved or rejected comment
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Comment.Parent">
            <summary>
            Gets or sets the parent.
            </summary>
            <value>The parent.</value>
        </member>
        <member name="P:BlogEngine.Core.Comment.BlogId">
            <summary>
                Gets or sets the Blog instance this object is under.
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Comment.Blog">
            <summary>
                Gets the Blog instance this object is under.
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Comment.ParentId">
            <summary>
                Gets or sets the Id of the parent comment.
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Comment.RelativeLink">
            <summary>
                Gets the relative link of the comment.
            </summary>
            <value>The relative link.</value>
        </member>
        <member name="P:BlogEngine.Core.Comment.RelativeOrAbsoluteLink">
            <summary>
                Returns a relative link if possible if the hostname of this blog instance matches the
                hostname of the site aggregation blog.  If the hostname is different, then the
                absolute link is returned.
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Comment.Teaser">
            <summary>
                Gets abbreviated content
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Comment.IsPingbackOrTrackback">
            <summary>
            Pingbacks and trackbacks are identified by email
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Comment.Title">
            <summary>
                Gets the title of the object
            </summary>
            <value></value>
        </member>
        <member name="P:BlogEngine.Core.Comment.Website">
            <summary>
                Gets or sets the website.
            </summary>
            <value>The website.</value>
        </member>
        <member name="P:BlogEngine.Core.Comment.BlogEngine#Core#IPublishable#Categories">
            <summary>
            Gets Categories.
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Comment.BlogEngine#Core#IPublishable#DateModified">
            <summary>
            Gets DateModified.
            </summary>
        </member>
        <member name="T:BlogEngine.Core.Web.Controls.BlogBasePage">
            <summary>
            All pages in the custom themes as well as pre-defined pages in the root
                must inherit from this class.
            </summary>
            <remarks>
            The class is responsible for assigning the theme to all
                derived pages as well as adding RSS, RSD, tracking script
                and a whole lot more.
            </remarks>
        </member>
        <member name="M:BlogEngine.Core.Web.Controls.BlogBasePage.AddGenericLink(System.String,System.String,System.String)">
            <summary>
            Adds the generic link to the header.
            </summary>
            <param name="relation">
            The relation string.
            </param>
            <param name="title">
            The title string.
            </param>
            <param name="href">
            The href string.
            </param>
        </member>
        <member name="M:BlogEngine.Core.Web.Controls.BlogBasePage.AddGenericLink(System.String,System.String,System.String,System.String)">
            <summary>
            Adds the generic link to the header.
            </summary>
            <param name="type">
            The type string.
            </param>
            <param name="relation">
            The relation string.
            </param>
            <param name="title">
            The title string.
            </param>
            <param name="href">
            The href string.
            </param>
        </member>
        <member name="M:BlogEngine.Core.Web.Controls.BlogBasePage.AddDefaultLanguages">
            <summary>
            Adds the default stylesheet language
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Web.Controls.BlogBasePage.AddMetaContentType">
            <summary>
            Adds the content-type meta tag to the header.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Web.Controls.BlogBasePage.AddMetaTag(System.String,System.String)">
            <summary>
            Add a meta tag to the page's header.
            </summary>
            <param name="name">
            The tag name.
            </param>
            <param name="value">
            The tag value.
            </param>
        </member>
        <member name="M:BlogEngine.Core.Web.Controls.BlogBasePage.OnError(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Web.UI.TemplateControl.Error"></see> event.
            </summary>
            <param name="e">
            An <see cref="T:System.EventArgs"></see> that contains the event data.
            </param>
        </member>
        <member name="M:BlogEngine.Core.Web.Controls.BlogBasePage.OnLoad(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Web.UI.Control.Load"/> event.
            Adds links and javascript to the HTML header tag.
            </summary>
            <param name="e">The <see cref="T:System.EventArgs"/> object that contains the event data.</param>
        </member>
        <member name="M:BlogEngine.Core.Web.Controls.BlogBasePage.OnPreInit(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Web.UI.Page.PreInit"/> event at the beginning of page initialization.
            Assignes the selected theme to the pages.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:BlogEngine.Core.Web.Controls.BlogBasePage.OnPreRenderComplete(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Web.UI.Page.PreRenderComplete"></see> event after 
                the <see cref="M:System.Web.UI.Page.OnPreRenderComplete(System.EventArgs)"></see> event and before the page is rendered.
            </summary>
            <param name="e">
            An <see cref="T:System.EventArgs"></see> that contains the event data.
            </param>
        </member>
        <member name="M:BlogEngine.Core.Web.Controls.BlogBasePage.Render(System.Web.UI.HtmlTextWriter)">
            <summary>
            Initializes the <see cref="T:System.Web.UI.HtmlTextWriter"></see> object and calls on the child
                controls of the <see cref="T:System.Web.UI.Page"></see> to render.
            </summary>
            <param name="writer">
            The <see cref="T:System.Web.UI.HtmlTextWriter"></see> that receives the page content.
            </param>
        </member>
        <member name="T:BlogEngine.Core.Web.Controls.PostViewBase">
            <summary>
            The PostView.ascx that is located in the themes folder
                has to inherit from this class.
                <remarks>
            It provides the basic functionaly needed to display a post.
                </remarks>
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Web.Controls.PostViewBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:BlogEngine.Core.Web.Controls.PostViewBase"/> class.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Web.Controls.PostViewBase.CategoryLinks(System.String)">
            <summary>
            Displays the Post's categories seperated by the specified string.
            </summary>
            <param name="separator">
            The separator.
            </param>
            <returns>
            The category links.
            </returns>
        </member>
        <member name="M:BlogEngine.Core.Web.Controls.PostViewBase.OnInit(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Web.UI.Control.Init"/> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> object that contains the event data.</param>
        </member>
        <member name="M:BlogEngine.Core.Web.Controls.PostViewBase.OnLoad(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Web.UI.Control.Load"/> event.
            </summary>
            <param name="e">The <see cref="T:System.EventArgs"/> object that contains the event data.</param>
            <remarks>
            Lets process our .Body content and build up our controls collection
            inside the 'BodyContent' placeholder.
            User controls are insterted into the blog in the following format..
            [UserControl:~/path/usercontrol.ascx]
            TODO : Expose user control parameters.
            </remarks>
        </member>
        <member name="M:BlogEngine.Core.Web.Controls.PostViewBase.TagLinks(System.String)">
            <summary>
            Displays the Post's tags seperated by the specified string.
            </summary>
            <param name="separator">
            The separator.
            </param>
            <returns>
            The tag links.
            </returns>
        </member>
        <member name="P:BlogEngine.Core.Web.Controls.PostViewBase.Body">
            <summary>
                Gets the body of the post. Important: use this instead of Post.Content.
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Web.Controls.PostViewBase.CommentFeed">
            <summary>
                Gets the comment feed link.
            </summary>
            <value>The comment feed.</value>
        </member>
        <member name="P:BlogEngine.Core.Web.Controls.PostViewBase.ContentBy">
            <summary>
                Gets or sets the criteria by which the content is being served (by tag, category, author, etc).
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Web.Controls.PostViewBase.DescriptionCharacters">
            <summary>
                Gets or sets a value indicating how many characters should be shown of the description.
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Web.Controls.PostViewBase.Index">
            <summary>
                Gets or sets the index of the post in a list of posts displayed
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Web.Controls.PostViewBase.Location">
            <summary>
                Gets or sets the location where the serving takes place.
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Web.Controls.PostViewBase.Post">
            <summary>
                Gets or sets the Post object that is displayed through the PostView.ascx control.
            </summary>
            <value>The Post object that has to be displayed.</value>
            <remarks>
            
            This was being stored to ViewState, though I can't see any reason why. Storing this
            locally should improve performance.
            
            </remarks>
        </member>
        <member name="P:BlogEngine.Core.Web.Controls.PostViewBase.ShowExcerpt">
            <summary>
                Gets or sets a value indicating whether or not to show the entire post or just the excerpt/description.
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Web.Controls.PostViewBase.AdminLinks">
            <summary>
                Gets an Edit and Delete link to any authenticated user.
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Web.Controls.PostViewBase.Rating">
            <summary>
                Gets the rating.
            Enable visitors to rate the post.
            </summary>
        </member>
        <member name="T:BlogEngine.Core.Page">
            <summary>
            A page is much like a post, but is not part of the
                blog chronology and is more static in nature.
                <remarks>
            Pages can be used for "About" pages or other static
                    information.
                </remarks>
            </summary>
        </member>
        <member name="F:BlogEngine.Core.Page.SyncRoot">
            <summary>
            The _ sync root.
            </summary>
        </member>
        <member name="F:BlogEngine.Core.Page.pages">
            <summary>
            The pages that not deleted.
            </summary>
        </member>
        <member name="F:BlogEngine.Core.Page.deletedpages">
            <summary>
            The deleted pages.
            </summary>
        </member>
        <member name="F:BlogEngine.Core.Page.content">
            <summary>
            The _ content.
            </summary>
        </member>
        <member name="F:BlogEngine.Core.Page.description">
            <summary>
            The _ description.
            </summary>
        </member>
        <member name="F:BlogEngine.Core.Page.keywords">
            <summary>
            The _ keywords.
            </summary>
        </member>
        <member name="F:BlogEngine.Core.Page.parent">
            <summary>
            The _ parent.
            </summary>
        </member>
        <member name="F:BlogEngine.Core.Page.showInList">
            <summary>
            The _ show in list.
            </summary>
        </member>
        <member name="F:BlogEngine.Core.Page.slug">
            <summary>
            The _ slug.
            </summary>
        </member>
        <member name="F:BlogEngine.Core.Page.title">
            <summary>
            The _ title.
            </summary>
        </member>
        <member name="F:BlogEngine.Core.Page.frontPage">
            <summary>
            The front page.
            </summary>
        </member>
        <member name="F:BlogEngine.Core.Page.isPublished">
            <summary>
            The published.
            </summary>
        </member>
        <member name="F:BlogEngine.Core.Page.isDeleted">
            <summary>
            The deleted.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Page.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:BlogEngine.Core.Page"/> class. 
                The contructor sets default values.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Page.CanPublish">
            <summary>
            Gets whether the current user can publish this page.
            </summary>
            <returns></returns>
        </member>
        <member name="M:BlogEngine.Core.Page.GetFrontPage">
            <summary>
            Returns the front page if any is available.
            </summary>
            <returns>The front Page.</returns>
        </member>
        <member name="M:BlogEngine.Core.Page.GetPage(System.Guid)">
            <summary>
            Returns a page based on the specified id.
            </summary>
            <param name="id">The page id.</param>
            <returns>The Page requested.</returns>
        </member>
        <member name="M:BlogEngine.Core.Page.OnServing(BlogEngine.Core.Page,BlogEngine.Core.ServingEventArgs)">
            <summary>
            Called when [serving].
            </summary>
            <param name="page">The page being served.</param>
            <param name="arg">The <see cref="T:BlogEngine.Core.ServingEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:BlogEngine.Core.Page.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="M:BlogEngine.Core.Page.OnServing(BlogEngine.Core.ServingEventArgs)">
            <summary>
            Raises the Serving event
            </summary>
            <param name="eventArgs">
            The event Args.
            </param>
        </member>
        <member name="M:BlogEngine.Core.Page.DataDelete">
            <summary>
            Deletes the page from the current BlogProvider.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Page.Purge">
            <summary>
            Deletes the Page from the current BlogProvider.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Page.Restore">
            <summary>
            Restores the deleted page.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Page.DataInsert">
            <summary>
            Inserts a new page to current BlogProvider.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Page.DataSelect(System.Guid)">
            <summary>
            Retrieves a page form the BlogProvider
            based on the specified id.
            </summary>
            <param name="id">The page id.</param>
            <returns>The Page requested.</returns>
        </member>
        <member name="M:BlogEngine.Core.Page.DataUpdate">
            <summary>
            Updates the object in its data store.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Page.ValidationRules">
            <summary>
            Validates the properties on the Page.
            </summary>
        </member>
        <member name="E:BlogEngine.Core.Page.Serving">
            <summary>
                Occurs when the page is being served to the output stream.
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Page.Pages">
            <summary>
                Gets an unsorted list of all pages excluding deleted.
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Page.DeletedPages">
            <summary>
                Gets an unsorted list of deleted pages.
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Page.AbsoluteLink">
            <summary>
                Gets the absolute link to the page.
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Page.Content">
            <summary>
                Gets or sets the Description or the object.
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Page.Description">
            <summary>
                Gets or sets the Description or the object.
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Page.IsFrontPage">
            <summary>
                Gets or sets a value indicating whether or not this page should be displayed on the front page.
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Page.HasChildPages">
            <summary>
            Gets a value indicating whether the has child pages.
            </summary>
            Does this page have child pages
        </member>
        <member name="P:BlogEngine.Core.Page.HasParentPage">
            <summary>
            Gets a value indicating whether the has parent page.
            </summary>
            Does this page have a parent page?
        </member>
        <member name="P:BlogEngine.Core.Page.Keywords">
            <summary>
                Gets or sets the Keywords or the object.
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Page.Parent">
            <summary>
                Gets or sets the parent of the Page. It is used to construct the 
                hierachy of the pages.
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Page.IsPublished">
            <summary>
                Gets or sets a value indicating whether or not this page should be published.
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Page.IsDeleted">
            <summary>
                Gets or sets a value indicating whether or not this page is deleted.
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Page.RelativeLink">
            <summary>
                Gets a relative-to-the-site-root path to the page.
                Only for in-site use.
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Page.RelativeOrAbsoluteLink">
            <summary>
                Returns a relative link if possible if the hostname of this blog instance matches the
                hostname of the site aggregation blog.  If the hostname is different, then the
                absolute link is returned.
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Page.ShowInList">
            <summary>
                Gets or sets a value indicating whether or not this page should be in the sitemap list.
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Page.Slug">
            <summary>
                Gets or sets the Slug of the Page.
                A Slug is the relative URL used by the pages.
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Page.Title">
            <summary>
                Gets or sets the Title or the object.
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Page.IsVisible">
            <summary>
                Gets a value indicating whether or not this page should be shown
            </summary>
            <value></value>
        </member>
        <member name="P:BlogEngine.Core.Page.IsVisibleToPublic">
            <summary>
                Gets a value indicating whether or not this page is visible to visitors not logged into the blog.
            </summary>
            <value></value>
        </member>
        <member name="P:BlogEngine.Core.Page.BlogEngine#Core#IPublishable#Author">
            <summary>
            Gets Author.
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Page.CurrentUserOwns">
            <summary>
            Gets whether or not the current user owns this page.
            </summary>
            <returns></returns>
        </member>
        <member name="P:BlogEngine.Core.Page.CanUserDelete">
            <summary>
            Gets whether the current user can delete this page.
            </summary>
            <returns></returns>
        </member>
        <member name="P:BlogEngine.Core.Page.CanUserEdit">
            <summary>
            Gets whether the current user can edit this page.
            </summary>
            <returns></returns>
        </member>
        <member name="P:BlogEngine.Core.Page.BlogEngine#Core#IPublishable#Categories">
            <summary>
            Gets Categories.
            </summary>
            <remarks>
            
            10/21/10
            This was returning null. I'm not sure what the purpose of that is. An IEnumerable should return
            an empty collection rather than null to indicate that there's nothing there.
            
            </remarks>
        </member>
        <member name="T:BlogEngine.Core.Ping.Pingback">
            <summary>
            Sends pingbacks to website that the blog links to.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Ping.Pingback.Send(System.Uri,System.Uri)">
            <summary>
            Sends pingbacks to the targetUrl.
            </summary>
            <param name="sourceUrl">
            The source Url.
            </param>
            <param name="targetUrl">
            The target Url.
            </param>
        </member>
        <member name="M:BlogEngine.Core.Ping.Pingback.AddXmlToRequest(System.Uri,System.Uri,System.Net.HttpWebRequest)">
            <summary>
            Adds the XML to web request. The XML is the standard
                XML used by RPC-XML requests.
            </summary>
            <param name="sourceUrl">
            The source Url.
            </param>
            <param name="targetUrl">
            The target Url.
            </param>
            <param name="webreqPing">
            The webreq Ping.
            </param>
        </member>
        <member name="M:BlogEngine.Core.Ping.Pingback.OnSending(System.Uri)">
            <summary>
            Called when [sending].
            </summary>
            <param name="url">The URL Uri.</param>
        </member>
        <member name="M:BlogEngine.Core.Ping.Pingback.OnSent(System.Uri)">
            <summary>
            Called when [sent].
            </summary>
            <param name="url">The URL Uri.</param>
        </member>
        <member name="E:BlogEngine.Core.Ping.Pingback.Sending">
            <summary>
                Occurs just before a pingback is sent.
            </summary>
        </member>
        <member name="E:BlogEngine.Core.Ping.Pingback.Sent">
            <summary>
                Occurs when a pingback has been sent
            </summary>
        </member>
        <member name="T:BlogEngine.Core.Ping.PingService">
            <summary>
            Pings various blog ping services.
                <remarks>
            Whenever a post is created or updated, it is important
                    to notify the ping services so that they have the latest
                    updated posts from the blog.
                </remarks>
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Ping.PingService.Send(System.Uri)">
            <summary>
            Sends a ping to various ping services asynchronously.
            </summary>
            <param name="url">
            The url Uri.
            </param>
        </member>
        <member name="M:BlogEngine.Core.Ping.PingService.AddXmlToRequest(System.Net.HttpWebRequest,System.Uri)">
            <summary>
            Adds the XML to web request. The XML is the standard
                XML used by RPC-XML requests.
            </summary>
            <param name="request">
            The request.
            </param>
            <param name="url">
            The url Uri.
            </param>
        </member>
        <member name="M:BlogEngine.Core.Ping.PingService.Execute(System.String,System.Uri)">
            <summary>
            Creates a web request and invokes the response asynchronous.
            </summary>
            <param name="service">
            The service.
            </param>
            <param name="url">
            The url Uri.
            </param>
        </member>
        <member name="T:BlogEngine.Core.Post">
            <summary>
            A post is an entry on the blog - a blog post.
            </summary>
        </member>
        <member name="F:BlogEngine.Core.Post.SyncRoot">
            <summary>
            The sync root.
            </summary>
        </member>
        <member name="F:BlogEngine.Core.Post.categories">
            <summary>
            The categories.
            </summary>
        </member>
        <member name="F:BlogEngine.Core.Post.allcomments">
            <summary>
            All comments, including deleted
            </summary>
        </member>
        <member name="F:BlogEngine.Core.Post.notificationEmails">
            <summary>
            The notification emails.
            </summary>
        </member>
        <member name="F:BlogEngine.Core.Post.tags">
            <summary>
            The post tags.
            </summary>
        </member>
        <member name="F:BlogEngine.Core.Post.posts">
            <summary>
            The posts.
            </summary>
        </member>
        <member name="F:BlogEngine.Core.Post.deletedposts">
            <summary>
            The deleted posts.
            </summary>
        </member>
        <member name="F:BlogEngine.Core.Post.author">
            <summary>
                The author.
            </summary>
        </member>
        <member name="F:BlogEngine.Core.Post.content">
            <summary>
                The content.
            </summary>
        </member>
        <member name="F:BlogEngine.Core.Post.description">
            <summary>
                The description.
            </summary>
        </member>
        <member name="F:BlogEngine.Core.Post.hasCommentsEnabled">
            <summary>
                Whether the post is comments enabled.
            </summary>
        </member>
        <member name="F:BlogEngine.Core.Post.nestedComments">
            <summary>
                The nested comments.
            </summary>
        </member>
        <member name="F:BlogEngine.Core.Post.isPublished">
            <summary>
                Whether the post is published.
            </summary>
        </member>
        <member name="F:BlogEngine.Core.Post.isDeleted">
            <summary>
                Whether the post is deleted.
            </summary>
        </member>
        <member name="F:BlogEngine.Core.Post.raters">
            <summary>
                The raters.
            </summary>
        </member>
        <member name="F:BlogEngine.Core.Post.rating">
            <summary>
                The rating.
            </summary>
        </member>
        <member name="F:BlogEngine.Core.Post.slug">
            <summary>
                The slug of the post.
            </summary>
        </member>
        <member name="F:BlogEngine.Core.Post.title">
            <summary>
                The title.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Post.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:BlogEngine.Core.Post"/> class. 
                The default contstructor assign default values.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Post.CanPublish(System.String)">
            <summary>
            Gets whether the current user can publish this post.
            </summary>
            <param name="author">The author of the post without needing to assign it to the Author property.</param>
            <returns></returns>
        </member>
        <member name="M:BlogEngine.Core.Post.GetPost(System.Guid)">
            <summary>
            Returns a post based on the specified id.
            </summary>
            <param name="id">
            The post id.
            </param>
            <returns>
            The selected post.
            </returns>
        </member>
        <member name="M:BlogEngine.Core.Post.GetPostsByAuthor(System.String)">
            <summary>
            Returns all posts written by the specified author.
            </summary>
            <param name="author">
            The author.
            </param>
            <returns>
            A list of Post.
            </returns>
        </member>
        <member name="M:BlogEngine.Core.Post.GetBlogByAuthor(System.String)">
            <summary>
            Get blog by author
            </summary>
            <param name="author">Post author</param>
            <returns>Blog if author wrote any posts there</returns>
        </member>
        <member name="M:BlogEngine.Core.Post.GetPostsByCategory(System.Guid)">
            <summary>
            Returns all posts in the specified category
            </summary>
            <param name="categoryId">
            The category Id.
            </param>
            <returns>
            A list of Post.
            </returns>
        </member>
        <member name="M:BlogEngine.Core.Post.GetPostsByCategory(BlogEngine.Core.Category)">
            <summary>
            Returns all posts in the specified category
            </summary>
            <param name="cat">Category objuect</param>
            <returns>A list of posts</returns>
        </member>
        <member name="M:BlogEngine.Core.Post.GetPostsByDate(System.DateTime,System.DateTime)">
            <summary>
            Returns all posts published between the two dates.
            </summary>
            <param name="dateFrom">
            The date From.
            </param>
            <param name="dateTo">
            The date To.
            </param>
            <returns>
            A list of Post.
            </returns>
        </member>
        <member name="M:BlogEngine.Core.Post.GetPostsByTag(System.String)">
            <summary>
            Returns all posts tagged with the specified tag.
            </summary>
            <param name="tag">
            The tag of the post.
            </param>
            <returns>
            A list of Post.
            </returns>
        </member>
        <member name="M:BlogEngine.Core.Post.IsTitleUnique(System.String)">
            <summary>
            Checks to see if the specified title has already been used
                by another post.
                <remarks>
            Titles must be unique because the title is part of the URL.
                </remarks>
            </summary>
            <param name="title">
            The title.
            </param>
            <returns>
            The is title unique.
            </returns>
        </member>
        <member name="M:BlogEngine.Core.Post.OnServing(BlogEngine.Core.Post,BlogEngine.Core.ServingEventArgs)">
            <summary>
            Called when [serving].
            </summary>
            <param name="post">
            The post being served.
            </param>
            <param name="arg">
            The <see cref="T:BlogEngine.Core.ServingEventArgs"/> instance containing the event data.
            </param>
        </member>
        <member name="M:BlogEngine.Core.Post.Reload">
            <summary>
            Force reload of all posts
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Post.Import">
            <summary>
            Imports Post (without all standard saving routines
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Post.MarkOld">
            <summary>
            Marks the object as being an clean,
                which means not dirty.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Post.Rate(System.Int32)">
            <summary>
            Adds a rating to the post.
            </summary>
            <param name="newRating">
            The rating.
            </param>
        </member>
        <member name="M:BlogEngine.Core.Post.GetUniqueSlug(System.String,System.Guid)">
            <summary>
            Check if slug is unique and if not generate it
            </summary>
            <param name="slug">Post slug</param>
            <param name="postId">Post id</param>
            <returns>Slug that is unique across blogs</returns>
        </member>
        <member name="M:BlogEngine.Core.Post.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="M:BlogEngine.Core.Post.AddComment(BlogEngine.Core.Comment)">
            <summary>
            Adds a comment to the collection and saves the post.
            </summary>
            <param name="comment">
            The comment to add to the post.
            </param>
        </member>
        <member name="M:BlogEngine.Core.Post.ApproveAllComments">
            <summary>
            Approves all the comments in a post.  Included to save time on the approval process.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Post.ApproveComment(BlogEngine.Core.Comment)">
            <summary>
            Approves a Comment for publication.
            </summary>
            <param name="comment">
            The Comment to approve
            </param>
        </member>
        <member name="M:BlogEngine.Core.Post.DisapproveComment(BlogEngine.Core.Comment)">
            <summary>
            Disapproves a Comment as Spam.
            </summary>
            <param name="comment">
            The Comment to approve
            </param>
        </member>
        <member name="M:BlogEngine.Core.Post.ImportComment(BlogEngine.Core.Comment)">
            <summary>
            Imports a comment to comment collection.  Does not
                notify user or run extension events.
            </summary>
            <param name="comment">
            The comment to add to the post.
            </param>
        </member>
        <member name="M:BlogEngine.Core.Post.UpdateComment(BlogEngine.Core.Comment)">
            <summary>
            Updates a comment in the collection and saves the post.
            </summary>
            <param name="comment">
            The comment to update in the post.
            </param>
        </member>
        <member name="M:BlogEngine.Core.Post.RemoveComment(BlogEngine.Core.Comment)">
            <summary>
            Removes a comment from the collection and saves the post.
            </summary>
            <param name="comment">
            The comment to remove from the post.
            </param>
        </member>
        <member name="M:BlogEngine.Core.Post.PurgeComment(BlogEngine.Core.Comment)">
            <summary>
            Removes comment from the post
            </summary>
            <param name="comment">Comment</param>
        </member>
        <member name="M:BlogEngine.Core.Post.RestoreComment(BlogEngine.Core.Comment)">
            <summary>
            Restores comment from recycle bin
            </summary>
            <param name="comment">Comment</param>
        </member>
        <member name="M:BlogEngine.Core.Post.CompareTo(BlogEngine.Core.Post)">
            <summary>
            Compares the current object with another object of the same type.
            </summary>
            <param name="other">
            An object to compare with this object.
            </param>
            <returns>
            A 32-bit signed integer that indicates the relative order of the 
                objects being compared. The return value has the following meanings: 
                Value Meaning Less than zero This object is less than the other parameter.Zero 
                This object is equal to other. Greater than zero This object is greater than other.
            </returns>
        </member>
        <member name="M:BlogEngine.Core.Post.OnServing(BlogEngine.Core.ServingEventArgs)">
            <summary>
            Raises the Serving event
            </summary>
            <param name="eventArgs">
            The event Args.
            </param>
        </member>
        <member name="M:BlogEngine.Core.Post.DataDelete">
            <summary>
            Deletes the Post from the current BlogProvider.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Post.Purge">
            <summary>
            Deletes the Post from the current BlogProvider.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Post.Restore">
            <summary>
            Restores the deleted posts.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Post.DataInsert">
            <summary>
            Inserts a new post to the current BlogProvider.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Post.DataSelect(System.Guid)">
            <summary>
            Returns a Post based on the specified id.
            </summary>
            <param name="id">
            The post id.
            </param>
            <returns>
            The selected Post.
            </returns>
        </member>
        <member name="M:BlogEngine.Core.Post.DataUpdate">
            <summary>
            Updates the Post.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Post.OnAddingComment(BlogEngine.Core.Comment,System.ComponentModel.CancelEventArgs)">
            <summary>
            Called when [adding comment].
            </summary>
            <param name="comment">
            The comment.
            </param>
            <param name="e">
            The <see cref="T:System.ComponentModel.CancelEventArgs"/> instance containing the event data.
            </param>
        </member>
        <member name="M:BlogEngine.Core.Post.OnCommentAdded(BlogEngine.Core.Comment)">
            <summary>
            Called when [comment added].
            </summary>
            <param name="comment">
            The comment.
            </param>
        </member>
        <member name="M:BlogEngine.Core.Post.OnCommentRemoved(BlogEngine.Core.Comment)">
            <summary>
            Called when [comment removed].
            </summary>
            <param name="comment">
            The comment.
            </param>
        </member>
        <member name="M:BlogEngine.Core.Post.OnCommentPurged(BlogEngine.Core.Comment)">
            <summary>
            Called when [comment purged].
            </summary>
            <param name="comment">
            The comment.
            </param>
        </member>
        <member name="M:BlogEngine.Core.Post.OnCommentRestored(BlogEngine.Core.Comment)">
            <summary>
            Called when [comment restored].
            </summary>
            <param name="comment">
            The comment.
            </param>
        </member>
        <member name="M:BlogEngine.Core.Post.OnCommentUpdated(BlogEngine.Core.Comment)">
            <summary>
            Called when [comment updated].
            </summary>
            <param name="comment">
            The comment.
            </param>
        </member>
        <member name="M:BlogEngine.Core.Post.OnRated(BlogEngine.Core.Post)">
            <summary>
            Called when [rated].
            </summary>
            <param name="post">
            The rated post.
            </param>
        </member>
        <member name="M:BlogEngine.Core.Post.OnRemovingComment(BlogEngine.Core.Comment,System.ComponentModel.CancelEventArgs)">
            <summary>
            Called when [removing comment].
            </summary>
            <param name="comment">
            The comment.
            </param>
            <param name="e">
            The <see cref="T:System.ComponentModel.CancelEventArgs"/> instance containing the event data.
            </param>
        </member>
        <member name="M:BlogEngine.Core.Post.OnPurgingComment(BlogEngine.Core.Comment,System.ComponentModel.CancelEventArgs)">
            <summary>
            Called when [purging comment].
            </summary>
            <param name="comment">
            The comment.
            </param>
            <param name="e">
            The <see cref="T:System.ComponentModel.CancelEventArgs"/> instance containing the event data.
            </param>
        </member>
        <member name="M:BlogEngine.Core.Post.OnRestoringComment(BlogEngine.Core.Comment,System.ComponentModel.CancelEventArgs)">
            <summary>
            Called when [restoring comment].
            </summary>
            <param name="comment">
            The comment.
            </param>
            <param name="e">
            The <see cref="T:System.ComponentModel.CancelEventArgs"/> instance containing the event data.
            </param>
        </member>
        <member name="M:BlogEngine.Core.Post.OnUpdatingComment(BlogEngine.Core.Comment,System.ComponentModel.CancelEventArgs)">
            <summary>
            Called when [updating comment].
            </summary>
            <param name="comment">
            The comment.
            </param>
            <param name="e">
            The <see cref="T:System.ComponentModel.CancelEventArgs"/> instance containing the event data.
            </param>
        </member>
        <member name="M:BlogEngine.Core.Post.ValidationRules">
            <summary>
            Validates the Post instance.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Post.AddRelations(System.Collections.Generic.List{BlogEngine.Core.Post})">
            <summary>
            Sets the Previous and Next properties to all posts.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Post.CreateNestedComments">
            <summary>
            Nests comments based on Id and ParentId
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Post.ResetNestedComments">
            <summary>
            Clears all nesting of comments
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Post.SendNotifications(BlogEngine.Core.Comment)">
            <summary>
            Sends a notification to all visitors  that has registered
                to retrieve notifications for the specific post.
            </summary>
            <param name="comment">
            The comment.
            </param>
        </member>
        <member name="M:BlogEngine.Core.Post.IsUniqueSlug(System.String,System.Guid)">
            <summary>
            Check if post slug is unique accross all blogs
            </summary>
            <param name="slug">Post slug</param>
            <param name="postId">Post id</param>
            <returns>True if unique</returns>
        </member>
        <member name="E:BlogEngine.Core.Post.AddingComment">
            <summary>
                Occurs before a new comment is added.
            </summary>
        </member>
        <member name="E:BlogEngine.Core.Post.CommentAdded">
            <summary>
                Occurs when a comment is added.
            </summary>
        </member>
        <member name="E:BlogEngine.Core.Post.CommentRemoved">
            <summary>
                Occurs when a comment has been removed.
            </summary>
        </member>
        <member name="E:BlogEngine.Core.Post.CommentPurged">
            <summary>
                Occurs when a comment has been purged.
            </summary>
        </member>
        <member name="E:BlogEngine.Core.Post.CommentRestored">
            <summary>
                Occurs when a comment has been restored.
            </summary>
        </member>
        <member name="E:BlogEngine.Core.Post.CommentUpdated">
            <summary>
                Occurs when a comment is updated.
            </summary>
        </member>
        <member name="E:BlogEngine.Core.Post.Rated">
            <summary>
                Occurs when a visitor rates the post.
            </summary>
        </member>
        <member name="E:BlogEngine.Core.Post.RemovingComment">
            <summary>
                Occurs before comment is removed.
            </summary>
        </member>
        <member name="E:BlogEngine.Core.Post.PurgingComment">
            <summary>
                Occurs before comment is purged.
            </summary>
        </member>
        <member name="E:BlogEngine.Core.Post.RestoringComment">
            <summary>
                Occurs before comment is restored.
            </summary>
        </member>
        <member name="E:BlogEngine.Core.Post.Serving">
            <summary>
                Occurs when the post is being served to the output stream.
            </summary>
        </member>
        <member name="E:BlogEngine.Core.Post.UpdatingComment">
            <summary>
                Occurs before a new comment is updated.
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Post.Posts">
            <summary>
                Gets a sorted collection of all undeleted posts in the blog.
                Sorted by date.
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Post.AllBlogPosts">
            <summary>
                Gets a sorted collection of all undeleted posts across all blogs.
                Sorted by date.
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Post.ApplicablePosts">
            <summary>
                Gets a sorted collection of all undeleted posts, taking into account the
                current blog instance's Site Aggregation status in determining if posts
                from just the current instance or all instances should be returned.
                Sorted by date.
            </summary>
            <remarks>
                This logic could be put into the normal 'Posts' property, however
                there are times when a Site Aggregation blog instance may just need
                its own posts.  So ApplicablePosts can be called when data across
                all blog instances may be needed, and Posts can be called when data
                for just the current blog instance is needed.
            </remarks>
        </member>
        <member name="P:BlogEngine.Core.Post.DeletedPosts">
            <summary>
                Gets a sorted collection of all deleted posts in the blog.
                Sorted by date.
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Post.Author">
            <summary>
                Gets or sets the Author or the post.
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Post.AuthorProfile">
            <summary>
                Gets AuthorProfile.
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Post.Categories">
            <summary>
                Gets an unsorted List of categories.
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Post.Content">
            <summary>
                Gets or sets the Content or the post.
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Post.Description">
            <summary>
                Gets or sets the Description or the post.
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Post.IsChanged">
            <summary>
                Gets if the Post have been changed.
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Post.Next">
            <summary>
                Gets the next post relative to this one based on time.
                <remarks>
                    If this post is the newest, then it returns null.
                </remarks>
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Post.NotificationEmails">
            <summary>
                Gets a collection of email addresses that is signed up for 
                comment notification on the specific post.
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Post.PermaLink">
            <summary>
                Gets the absolute permanent link to the post.
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Post.Previous">
            <summary>
                Gets the previous post relative to this one based on time.
                <remarks>
                    If this post is the oldest, then it returns null.
                </remarks>
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Post.IsPublished">
            <summary>
                Gets or sets a value indicating whether or not the post is published.
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Post.IsDeleted">
            <summary>
                Gets or sets a value indicating whether or not the post is deleted.
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Post.Raters">
            <summary>
                Gets or sets the number of raters or the object.
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Post.Rating">
            <summary>
                Gets or sets the rating or the post.
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Post.AbsoluteLink">
            <summary>
                Gets the absolute link to the post.
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Post.RelativeLink">
            <summary>
                Gets a relative-to-the-site-root path to the post.
                Only for in-site use.
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Post.RelativeOrAbsoluteLink">
            <summary>
                Returns a relative link if possible if the hostname of this blog instance matches the
                hostname of the site aggregation blog.  If the hostname is different, then the
                absolute link is returned.
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Post.Slug">
            <summary>
                Gets or sets the Slug of the Post.
                A Slug is the relative URL used by the posts.
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Post.Tags">
            <summary>
                Gets an unsorted collection of tags.
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Post.Title">
            <summary>
                Gets or sets the Title or the post.
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Post.TrackbackLink">
            <summary>
                Gets the trackback link to the post.
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Post.IsVisible">
            <summary>
                Gets a value indicating whether or not the post is visible or not.
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Post.IsVisibleToPublic">
            <summary>
                Gets a value indicating whether a post is available to visitors not logged into the blog.
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Post.Comments">
            <summary>
                Gets a Collection of All Comments for the post
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Post.AllComments">
            <summary>
                Gets a Collection of All Comments for the post
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Post.ApprovedComments">
            <summary>
                Gets a collection of Approved comments for the post sorted by date.
                When moderation is enabled, unapproved comments go to pending.
                Whith moderation off, they shown as approved.
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Post.NotApprovedComments">
            <summary>
                Gets a collection of comments waiting for approval for the post, sorted by date
                excluding comments rejected as spam
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Post.Pingbacks">
            <summary>
                Gets a collection of pingbacks and trackbacks for the post, sorted by date
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Post.SpamComments">
            <summary>
                Gets a collection of comments marked as spam for the post, sorted by date.
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Post.DeletedComments">
            <summary>
                Gets a collection of comments marked as deleted for the post, sorted by date.
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Post.NestedComments">
            <summary>
                Gets a collection of the comments that are nested as replies
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Post.HasCommentsEnabled">
            <summary>
                Gets or sets a value indicating whether this instance has comments enabled.
            </summary>
            <value>
                <c>true</c> if this instance has comments enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:BlogEngine.Core.Post.CurrentUserOwns">
            <summary>
            Gets whether or not the current user owns this post.
            </summary>
            <returns></returns>
        </member>
        <member name="P:BlogEngine.Core.Post.CanUserDelete">
            <summary>
            Gets whether the current user can delete this post.
            </summary>
            <returns></returns>
        </member>
        <member name="P:BlogEngine.Core.Post.CanUserEdit">
            <summary>
            Gets whether the current user can edit this post.
            </summary>
            <returns></returns>
        </member>
        <member name="T:BlogEngine.Core.StateList`1">
            <summary>
            A generic collection with the ability to 
                check if it has been changed.
            </summary>
            <typeparam name="T">
            The type of the list elements.
            </typeparam>
        </member>
        <member name="F:BlogEngine.Core.StateList`1.hasCode">
            <summary>
            Has code int.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.StateList`1.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"></see> is equal to the current <see cref="T:System.Object"></see>.
            </summary>
            <param name="obj">
            The <see cref="T:System.Object"></see> to compare with the current <see cref="T:System.Object"></see>.
            </param>
            <returns>
            true if the specified <see cref="T:System.Object"></see> is equal to the current <see cref="T:System.Object"></see>; otherwise, false.
            </returns>
        </member>
        <member name="M:BlogEngine.Core.StateList`1.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. <see cref="M:System.Object.GetHashCode"></see> is suitable for use in hashing algorithms and data structures like a hash table.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="M:BlogEngine.Core.StateList`1.MarkOld">
            <summary>
            Marks the object as being clean, 
                which means not changed.
            </summary>
        </member>
        <member name="P:BlogEngine.Core.StateList`1.IsChanged">
            <summary>
                Gets a value indicating whether this object's data has been changed.
            </summary>
            <returns>A value indicating if this object's data has been changed.</returns>
        </member>
        <member name="T:BlogEngine.Core.Utils">
            <summary>
            Utilities for the entire solution to use.
            </summary>
        </member>
        <member name="F:BlogEngine.Core.Utils.ForceMainThemeCookieName">
            <summary>
            The cookie name for forcing the main theme on a mobile device.
            </summary>
        </member>
        <member name="F:BlogEngine.Core.Utils.FilesFolder">
            <summary>
            The folder name where files are stored in the XmlFileSystemProvider.
            </summary>
            <value>"files"</value>
        </member>
        <member name="F:BlogEngine.Core.Utils.Pattern">
            <summary>
            The pattern.
            </summary>
        </member>
        <member name="F:BlogEngine.Core.Utils.applicationRelativeWebRoot">
            <summary>
            The application's relative web root.
            </summary>
        </member>
        <member name="F:BlogEngine.Core.Utils.HrefRegex">
            <summary>
            The href regex.
            </summary>
        </member>
        <member name="F:BlogEngine.Core.Utils.RegexBetweenTags">
            <summary>
            The regex between tags.
            </summary>
        </member>
        <member name="F:BlogEngine.Core.Utils.RegexLineBreaks">
            <summary>
            The regex line breaks.
            </summary>
        </member>
        <member name="F:BlogEngine.Core.Utils.RegexMobile">
            <summary>
            The regex mobile.
            </summary>
        </member>
        <member name="F:BlogEngine.Core.Utils.RegexStripHtml">
            <summary>
            The regex strip html.
            </summary>
        </member>
        <member name="F:BlogEngine.Core.Utils.isMono">
            <summary>
                Boolean for returning whether or not BlogEngine is currently running on Mono.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Utils.ShouldForceMainTheme(System.Web.HttpRequest)">
            <summary>
            Returns whether the main theme should be forced for the current mobile device.
            </summary>
            <param name="request">The request.</param>
            <returns>
            A <see cref="T:System.Boolean"/> instance.
            </returns>
        </member>
        <member name="M:BlogEngine.Core.Utils.ParseEnum``1(System.String,``0)">
            <summary>
            Parse the string representation of an enum field to a strongly typed enum value.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Utils.FormatIdentifierForDisplay(System.String)">
            <summary>
            Format's an identifier (e.g. variable, enum field value) for display purposes,
            by adding a space before each capital letter.  A value like EditOwnUser becomes
            "Edit Own User".  If multiple capital letters are in identifier, these letters
            will be treated as one word (e.g. XMLEditor becomes "XML Editor", not
            "X M L Editor").
            </summary>
            <param name="fieldName">An identifier ready to be formatted for display.</param>
            <returns>The identifier for display purposes.</returns>
            <remarks>Credit: http://stackoverflow.com/questions/3103730</remarks>
        </member>
        <member name="M:BlogEngine.Core.Utils.SelectListItemByValue(System.Web.UI.WebControls.ListControl,System.String)">
            <summary>
            Selects a listitem by value, case insensitively.
            </summary>
            <param name="control">The ListControl</param>
            <param name="value">The value to select</param>
            <returns>The ListItem found and selected</returns>
        </member>
        <member name="M:BlogEngine.Core.Utils.ConvertToJson(System.Object)">
            <summary>
            Converts an object to its JSON representation.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:BlogEngine.Core.Utils.AddJavaScriptInclude(System.Web.UI.Page,System.String,System.Boolean,System.Boolean)">
            <summary>
            Adds a JavaScript reference to the HTML head tag.
            </summary>
            <param name="page">
            The page to add the JavaScript include to.
            </param>
            <param name="url">
            The url string.
            </param>
            <param name="placeInBottom">
            The place In Bottom.
            </param>
            <param name="addDeferAttribute">
            The add Defer Attribute.
            </param>
        </member>
        <member name="M:BlogEngine.Core.Utils.CodeAssemblies">
            <summary>
            This method returns all code assemblies in app_code
                If app_code has subdirectories for c#, vb.net etc
                Each one will come back as a separate assembly
                So we can support extensions in multiple languages
            </summary>
            <returns>
            List of code assemblies
            </returns>
        </member>
        <member name="M:BlogEngine.Core.Utils.ConvertToAbsolute(System.Uri)">
            <summary>
            Converts a relative URL to an absolute one.
            </summary>
            <param name="relativeUri">
            The relative Uri.
            </param>
            <returns>
            The absolute Uri.
            </returns>
        </member>
        <member name="M:BlogEngine.Core.Utils.ConvertToAbsolute(System.String)">
            <summary>
            Converts a relative URL to an absolute one.
            </summary>
            <param name="relativeUri">
            The relative Uri.
            </param>
            <returns>
            The absolute Uri.
            </returns>
        </member>
        <member name="M:BlogEngine.Core.Utils.DownloadWebPage(System.Uri)">
            <summary>
            Downloads a web page from the Internet and returns the HTML as a string. .
            </summary>
            <param name="url">
            The URL to download from.
            </param>
            <returns>
            The HTML or null if the URL isn't valid.
            </returns>
        </member>
        <member name="M:BlogEngine.Core.Utils.ExtractFileNameFromPath(System.String)">
            <summary>
            Extract file name from given physical server path
            </summary>
            <param name="path">
            The Server path.
            </param>
            <returns>
            The File Name.
            </returns>
        </member>
        <member name="M:BlogEngine.Core.Utils.FindLinks(System.String,System.String)">
            <summary>
            Finds semantic links in a given HTML document.
            </summary>
            <param name="type">
            The type of link. Could be foaf, apml or sioc.
            </param>
            <param name="html">
            The HTML to look through.
            </param>
            <returns>
            A list of Uri.
            </returns>
        </member>
        <member name="M:BlogEngine.Core.Utils.ConvertPublishablePathsToAbsolute(System.String,BlogEngine.Core.IPublishable)">
            <summary>
            Converts all the relative paths in the specified content to absolute.
            </summary>
            <param name="content">
            The content.
            </param>
            <param name="publishable">
            The publishable.
            </param>
        </member>
        <member name="M:BlogEngine.Core.Utils.FindSemanticDocuments(System.Uri,System.String)">
            <summary>
            Finds the semantic documents from a URL based on the type.
            </summary>
            <param name="url">
            The URL of the semantic document or a document containing semantic links.
            </param>
            <param name="type">
            The type. Could be "foaf", "apml" or "sioc".
            </param>
            <returns>
            A dictionary of the semantic documents. The dictionary is empty if no documents were found.
            </returns>
        </member>
        <member name="M:BlogEngine.Core.Utils.GetDefaultCulture">
            <summary>
            Returns the default culture.  This is either the culture specified in the blog settings,
                or the default culture installed with the operating system.
            </summary>
            <returns>
            The default culture.
            </returns>
        </member>
        <member name="M:BlogEngine.Core.Utils.GetSubDomain(System.Uri)">
            <summary>
            Gets the sub domain.
            </summary>
            <param name="url">
            The URL to get the sub domain from.
            </param>
            <returns>
            The sub domain.
            </returns>
        </member>
        <member name="M:BlogEngine.Core.Utils.HashPassword(System.String)">
            <summary>
            Encrypts a string using the SHA256 algorithm.
            </summary>
            <param name="plainMessage">
            The plain Message.
            </param>
            <returns>
            The hash password.
            </returns>
        </member>
        <member name="F:BlogEngine.Core.Utils.BodyRegex">
            <summary>
            The body regex.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Utils.InjectUserControls(System.Web.UI.Control,System.String)">
            <summary>
            Injects any user controls if one is referenced in the text.
            </summary>
            <param name="containerControl">The control that the user controls will be injected in to.</param>
            <param name="content">The string to parse for user controls.</param>
        </member>
        <member name="M:BlogEngine.Core.Utils.GetUserEmail(System.String)">
            <summary>
            Email address by user name
            </summary>
            <param name="userName">User name</param>
            <returns>Email Address</returns>
        </member>
        <member name="M:BlogEngine.Core.Utils.IsEmailValid(System.String)">
            <summary>
            Validates an email address.
            </summary>
            <param name="email"></param>
            <returns></returns>
        </member>
        <member name="M:BlogEngine.Core.Utils.IsHostnameValid(System.String)">
            <summary>
            Validates a host name.
            </summary>
            <param name="hostname"></param>
            <returns></returns>
        </member>
        <member name="M:BlogEngine.Core.Utils.IsIpV4AddressValid(System.String)">
            <summary>
            Validates an IPv4 address.
            </summary>
            <param name="address"></param>
            <returns></returns>
        </member>
        <member name="M:BlogEngine.Core.Utils.IsIpV6AddressValid(System.String)">
            <summary>
            Validates an IPv6 address.
            </summary>
            <param name="address"></param>
            <returns></returns>
        </member>
        <member name="M:BlogEngine.Core.Utils.LoadExtensions">
            <summary>
            Run through all code assemblies and creates object
                instance for types marked with extension attribute
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Utils.Log(System.Object)">
            <summary>
            Sends a message to any subscribed log listeners.
            </summary>
            <param name="message">
            The message to be logged.
            </param>
        </member>
        <member name="M:BlogEngine.Core.Utils.Log(System.String,System.Object[])">
            <summary>
            Sends a message to any subscribed log listeners.
            </summary>
            <param name="format">A format string</param>
            <param name="args">Arguments to replace in the format string</param>
        </member>
        <member name="M:BlogEngine.Core.Utils.Log(System.String,System.Exception)">
            <summary>
            Sends a message to any subscribed log listeners.
            </summary>
            <param name="methodName"></param>
            <param name="ex"></param>
        </member>
        <member name="M:BlogEngine.Core.Utils.RandomPassword">
            <summary>
            Generates random password for password reset
            </summary>
            <returns>
            Random password
            </returns>
        </member>
        <member name="M:BlogEngine.Core.Utils.RemoveHtmlWhitespace(System.String)">
            <summary>
            Removes the HTML whitespace.
            </summary>
            <param name="html">
            The HTML to remove the whitespace from.
            </param>
            <returns>
            The html with the whitespace removed.
            </returns>
        </member>
        <member name="M:BlogEngine.Core.Utils.RenderControl(System.Web.UI.Control)">
            <summary>
            Renders a control to a string.
            </summary>
            <param name="control"></param>
            <returns></returns>
        </member>
        <member name="M:BlogEngine.Core.Utils.RemoveIllegalCharacters(System.String)">
            <summary>
            Strips all illegal characters from the specified title.
            </summary>
            <param name="text">
            The text to strip.
            </param>
            <returns>
            The remove illegal characters.
            </returns>
        </member>
        <member name="M:BlogEngine.Core.Utils.SendMailMessage(System.Net.Mail.MailMessage,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Sends a MailMessage object using the SMTP settings.
            </summary>
            <param name="message">
            The message.
            </param>
            <param name="smtpServer">SMTP server</param>
            <param name="smtpServerPort">SMTP server port</param>
            <param name="smtpUserName">User name</param>
            <param name="smtpPassword">Password</param>
            <param name="enableSsl">Enable SSL</param>
            <returns>
            Error message, if any.
            </returns>
        </member>
        <member name="M:BlogEngine.Core.Utils.SendMailMessageAsync(System.Net.Mail.MailMessage)">
            <summary>
            Sends the mail message asynchronously in another thread.
            </summary>
            <param name="message">
            The message to send.
            </param>
        </member>
        <member name="M:BlogEngine.Core.Utils.SetConditionalGetHeaders(System.DateTime)">
            <summary>
            Writes ETag and Last-Modified headers and sets the conditional get headers.
            </summary>
            <param name="date">
            The date for the headers.
            </param>
            <returns>
            The set conditional get headers.
            </returns>
        </member>
        <member name="M:BlogEngine.Core.Utils.StringIsNullOrWhitespace(System.String)">
            <summary>
            Returns whether a string is null, empty, or whitespace. Same implementation as in String.IsNullOrWhitespace in .Net 4.0
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:BlogEngine.Core.Utils.StripHtml(System.String)">
            <summary>
            Strips all HTML tags from the specified string.
            </summary>
            <param name="html">
            The string containing HTML
            </param>
            <returns>
            A string without HTML tags
            </returns>
        </member>
        <member name="M:BlogEngine.Core.Utils.Translate(System.String)">
            <summary>
            Translates the specified string using the resource files.
            </summary>
            <param name="text">
            The text to translate.
            </param>
            <returns>
            The translate.
            </returns>
        </member>
        <member name="M:BlogEngine.Core.Utils.Translate(System.String,System.String)">
            <summary>
            Translates the specified string using the resource files.  If a translation
                is not found, defaultValue will be returned.
            </summary>
            <param name="text">
            The text to translate.
            </param>
            <param name="defaultValue">
            The default Value.
            </param>
            <returns>
            The translate.
            </returns>
        </member>
        <member name="M:BlogEngine.Core.Utils.Translate(System.String,System.String,System.Globalization.CultureInfo)">
            <summary>
            Translates the specified string using the resource files and specified culture.
                If a translation is not found, defaultValue will be returned.
            </summary>
            <param name="text">
            The text to translate.
            </param>
            <param name="defaultValue">
            The default Value.
            </param>
            <param name="culture">
            The culture.
            </param>
            <returns>
            The translate.
            </returns>
        </member>
        <member name="M:BlogEngine.Core.Utils.CanWrite(System.String,System.String)">
            <summary>
            Helper method to quickly check if directory or file is writable
            </summary>
            <param name="url">Physical path</param>
            <param name="file">Optional File name</param>
            <returns>True if application can write file/directory</returns>
        </member>
        <member name="M:BlogEngine.Core.Utils.CopyDirectoryContents(System.IO.DirectoryInfo,System.IO.DirectoryInfo)">
            <summary>
            Recursively copies the contents of the source directory to the target directory, 
            without exclusions.
            </summary>
            <param name="source">The source directory.</param>
            <param name="target">The target directory.</param>
        </member>
        <member name="M:BlogEngine.Core.Utils.CopyDirectoryContents(System.IO.DirectoryInfo,System.IO.DirectoryInfo,System.Collections.Generic.List{System.String})">
            <summary>
            Recursively copies the contents of the source directory to the target directory, with 
            an optional list of directories to exclude.
            </summary>
            <param name="source">The source directory.</param>
            <param name="target">The target directory.</param>
            <param name="directoryNamesToExclude">An optional list of directory names to exclude from the copy.</param>
        </member>
        <member name="M:BlogEngine.Core.Utils.CreateDirectoryIfNotExists(System.String)">
            <summary>
            If the directory does not exist, it is created.
            </summary>
            <param name="directoryName">The name of the directory to create.</param>
            <returns></returns>
        </member>
        <member name="M:BlogEngine.Core.Utils.RecycleIIS">
            <summary>
            Recycle app pool
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Utils.GetClientIP">
            <summary>
            Gets the client's IP address.
            This method takes into account the X-Forwarded-For header,
            in case the blog is hosted behind a load balancer or proxy.
            </summary>
            <returns>The client's IP address.</returns>
        </member>
        <member name="M:BlogEngine.Core.Utils.GetCompiledExtensions">
            <summary>
            To support compiled extensions
                This methed looks for DLLs in the "/bin" folder
                and if assembly compiled with configuration
                attributed set to "BlogEngineExtension" it will
                be added to the list of code assemlies
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Utils.LoadDocument(System.Uri,System.Uri)">
            <summary>
            Loads the document.
            </summary>
            <param name="url">
            The URL of the document to load.
            </param>
            <param name="xmlUrl">
            The XML URL.
            </param>
            <returns>
            The XmlDocument.
            </returns>
        </member>
        <member name="M:BlogEngine.Core.Utils.OnEmailFailed(System.Net.Mail.MailMessage)">
            <summary>
            The on email failed.
            </summary>
            <param name="message">
            The message.
            </param>
        </member>
        <member name="M:BlogEngine.Core.Utils.OnEmailSent(System.Net.Mail.MailMessage)">
            <summary>
            The on email sent.
            </summary>
            <param name="message">
            The message.
            </param>
        </member>
        <member name="M:BlogEngine.Core.Utils.RemoveDiacritics(System.String)">
            <summary>
            Removes the diacritics.
            </summary>
            <param name="text">
            The text to remove diacritics from.
            </param>
            <returns>
            The string with the diacritics removed.
            </returns>
        </member>
        <member name="M:BlogEngine.Core.Utils.RemoveUnicodePunctuation(System.String)">
            <summary>
            Removes any unicode punctuation
            </summary>
            <param name="text">
            The text to remove punctuation from.
            </param>
            <returns>
            The string with the punctuation removed.
            </returns>
        </member>
        <member name="M:BlogEngine.Core.Utils.RemoveExtraHyphen(System.String)">
            <summary>
            Removes the extra hyphen.
            </summary>
            <param name="text">
            The text to remove the extra hyphen from.
            </param>
            <returns>
            The text with the extra hyphen removed.
            </returns>
        </member>
        <member name="E:BlogEngine.Core.Utils.EmailFailed">
            <summary>
                Occurs after an e-mail has been sent. The sender is the MailMessage object.
            </summary>
        </member>
        <member name="E:BlogEngine.Core.Utils.EmailSent">
            <summary>
                Occurs after an e-mail has been sent. The sender is the MailMessage object.
            </summary>
        </member>
        <member name="E:BlogEngine.Core.Utils.OnLog">
            <summary>
                Occurs when a message will be logged. The sender is a string containing the log message.
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Utils.AbsoluteWebRoot">
            <summary>
                Gets the absolute root of the website.
            </summary>
            <value>A string that ends with a '/'.</value>
        </member>
        <member name="P:BlogEngine.Core.Utils.FeedUrl">
            <summary>
                Gets the relative URL of the blog feed. If a Feedburner username
                is entered in the admin settings page, it will return the 
                absolute Feedburner URL to the feed.
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Utils.IsLinux">
            <summary>
                Gets a value indicating whether we're running under Linux or a Unix variant.
            </summary>
            <value><c>true</c> if Linux/Unix; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:BlogEngine.Core.Utils.IsMobile">
            <summary>
                Gets a value indicating whether the client is a mobile device.
            </summary>
            <value><c>true</c> if this instance is mobile; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:BlogEngine.Core.Utils.IsMono">
            <summary>
                Gets a value indicating whether we're running under Mono.
            </summary>
            <value><c>true</c> if Mono; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:BlogEngine.Core.Utils.RelativeWebRoot">
            <summary>
                Gets the relative root of the current blog instance.
            </summary>
            <value>A string that ends with a '/'.</value>
        </member>
        <member name="P:BlogEngine.Core.Utils.ApplicationRelativeWebRoot">
            <summary>
                Gets the application's relative root.
            </summary>
            <value>A string that ends with a '/'.</value>
        </member>
        <member name="P:BlogEngine.Core.Utils.RelativeOrAbsoluteWebRoot">
            <summary>
                Returns the relative webroot if possible if the hostname of this blog instance matches the
                hostname of the site aggregation blog.  If the hostname is different, then the
                absolute webroot is returned.
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Utils.IsCurrentRequestForHomepage">
            <summary>
                Gets if the current HTTP request is a homepage request, taking the blog
                instance into consideration.
            </summary>
        </member>
        <member name="T:BlogEngine.Core.Providers.XmlMembershipProvider">
            <summary>
            The xml membership provider.
            </summary>
        </member>
        <member name="F:BlogEngine.Core.Providers.XmlMembershipProvider.passwordFormat">
            <summary>
            The password format.
            </summary>
        </member>
        <member name="F:BlogEngine.Core.Providers.XmlMembershipProvider.users">
            <summary>
            The users.
            </summary>
        </member>
        <member name="F:BlogEngine.Core.Providers.XmlMembershipProvider.xmlFileName">
            <summary>
            The xml file name.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Providers.XmlMembershipProvider.ChangePassword(System.String,System.String,System.String)">
            <summary>
            Processes a request to update the password for a membership user.
            </summary>
            <param name="username">The user to update the password for.</param>
            <param name="oldPassword">The current password for the specified user.</param>
            <param name="newPassword">The new password for the specified user.</param>
            <returns>
            true if the password was updated successfully; otherwise, false.
            </returns>
        </member>
        <member name="M:BlogEngine.Core.Providers.XmlMembershipProvider.ChangePasswordQuestionAndAnswer(System.String,System.String,System.String,System.String)">
            <summary>
            Processes a request to update the password question and answer for a membership user.
            </summary>
            <param name="username">The user to change the password question and answer for.</param>
            <param name="password">The password for the specified user.</param>
            <param name="newPasswordQuestion">The new password question for the specified user.</param>
            <param name="newPasswordAnswer">The new password answer for the specified user.</param>
            <returns>
            true if the password question and answer are updated successfully; otherwise, false.
            </returns>
        </member>
        <member name="M:BlogEngine.Core.Providers.XmlMembershipProvider.CreateUser(System.String,System.String,System.String,System.String,System.String,System.Boolean,System.Object,System.Web.Security.MembershipCreateStatus@)">
            <summary>
            Creates the user.
            </summary>
            <param name="username">The username.</param>
            <param name="password">The password.</param>
            <param name="email">The email.</param>
            <param name="passwordQuestion">The password question.</param>
            <param name="passwordAnswer">The password answer.</param>
            <param name="approved">if set to <c>true</c> [approved].</param>
            <param name="providerUserKey">The provider user key.</param>
            <param name="status">The status.</param>
            <returns>A Membership User.</returns>
        </member>
        <member name="M:BlogEngine.Core.Providers.XmlMembershipProvider.DeleteUser(System.String,System.Boolean)">
            <summary>
            Removes a user from the membership data source.
            </summary>
            <param name="username">The name of the user to delete.</param>
            <param name="deleteAllRelatedData">true to delete data related to the user from the database; false to leave data related to the user in the database.</param>
            <returns>
            true if the user was successfully deleted; otherwise, false.
            </returns>
        </member>
        <member name="M:BlogEngine.Core.Providers.XmlMembershipProvider.FindUsersByEmail(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a collection of membership users where the e-mail address contains the specified e-mail address to match.
            </summary>
            <param name="emailToMatch">The e-mail address to search for.</param>
            <param name="pageIndex">The index of the page of results to return. <paramref name="pageIndex"/> is zero-based.</param>
            <param name="pageSize">The size of the page of results to return.</param>
            <param name="totalRecords">The total number of matched users.</param>
            <returns>
            A <see cref="T:System.Web.Security.MembershipUserCollection"/> collection that contains a page of <paramref name="pageSize"/><see cref="T:System.Web.Security.MembershipUser"/> objects beginning at the page specified by <paramref name="pageIndex"/>.
            </returns>
        </member>
        <member name="M:BlogEngine.Core.Providers.XmlMembershipProvider.FindUsersByName(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a collection of membership users where the user name contains the specified user name to match.
            </summary>
            <param name="usernameToMatch">The user name to search for.</param>
            <param name="pageIndex">The index of the page of results to return. <paramref name="pageIndex"/> is zero-based.</param>
            <param name="pageSize">The size of the page of results to return.</param>
            <param name="totalRecords">The total number of matched users.</param>
            <returns>
            A <see cref="T:System.Web.Security.MembershipUserCollection"/> collection that contains a page of <paramref name="pageSize"/><see cref="T:System.Web.Security.MembershipUser"/> objects beginning at the page specified by <paramref name="pageIndex"/>.
            </returns>
        </member>
        <member name="M:BlogEngine.Core.Providers.XmlMembershipProvider.GetAllUsers(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Retrieves a collection of all the users.
            This implementation ignores pageIndex and pageSize,
            and it doesn't sort the MembershipUser objects returned.
            </summary>
            <param name="pageIndex">The page Index.</param>
            <param name="pageSize">The page Size.</param>
            <param name="totalRecords">The total Records.</param>
            <returns>
            A <see cref="T:System.Web.Security.MembershipUserCollection"/> collection that contains a page of <paramref name="pageSize"/><see cref="T:System.Web.Security.MembershipUser"/> objects beginning at the page specified by <paramref name="pageIndex"/>.
            </returns>
        </member>
        <member name="M:BlogEngine.Core.Providers.XmlMembershipProvider.GetNumberOfUsersOnline">
            <summary>
            The get number of users online.
            </summary>
            <returns>
            The get number of users online.
            </returns>
        </member>
        <member name="M:BlogEngine.Core.Providers.XmlMembershipProvider.GetPassword(System.String)">
            <summary>
            Gets the password for the user with the given username.
            </summary>
            <param name="username">
            the given username
            </param>
            <returns>
            the password if user is found, null otherwise.
            </returns>
        </member>
        <member name="M:BlogEngine.Core.Providers.XmlMembershipProvider.GetPassword(System.String,System.String)">
            <summary>
            Gets the password for the specified user name from the data source.
            </summary>
            <param name="username">
            The user to retrieve the password for.
            </param>
            <param name="answer">
            The password answer for the user.
            </param>
            <returns>
            The password for the specified user name.
            </returns>
        </member>
        <member name="M:BlogEngine.Core.Providers.XmlMembershipProvider.GetUser(System.String,System.Boolean)">
            <summary>
            Retrieves a user based on his/hers username.
                the userIsOnline parameter is ignored.
            </summary>
            <param name="username">
            The username.
            </param>
            <param name="userIsOnline">
            The user Is Online.
            </param>
        </member>
        <member name="M:BlogEngine.Core.Providers.XmlMembershipProvider.GetUser(System.Object,System.Boolean)">
            <summary>
            Get a user based on the username parameter.
                the userIsOnline parameter is ignored.
            </summary>
            <param name="providerUserKey">
            The provider User Key.
            </param>
            <param name="userIsOnline">
            The user Is Online.
            </param>
        </member>
        <member name="M:BlogEngine.Core.Providers.XmlMembershipProvider.GetUserNameByEmail(System.String)">
            <summary>
            Retrieves a username based on a matching email.
            </summary>
            <param name="email">
            The email.
            </param>
            <returns>
            The get user name by email.
            </returns>
        </member>
        <member name="M:BlogEngine.Core.Providers.XmlMembershipProvider.Initialize(System.String,System.Collections.Specialized.NameValueCollection)">
            <summary>
            Initializes the provider.
            </summary>
            <param name="name">The friendly name of the provider.</param>
            <param name="config">A collection of the name/value pairs representing the provider-specific attributes specified in the configuration for this provider.</param>
            <exception cref="T:System.ArgumentNullException">
            The name of the provider is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            The name of the provider has a length of zero.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            An attempt is made to call <see cref="M:System.Configuration.Provider.ProviderBase.Initialize(System.string,System.Collections.Specialized.NameValueCollection)"/> on a provider after the provider has already been initialized.
            </exception>
        </member>
        <member name="M:BlogEngine.Core.Providers.XmlMembershipProvider.ResetPassword(System.String,System.String)">
            <summary>
            Resets a user's password to a new, automatically generated password.
            </summary>
            <param name="username">The user to reset the password for.</param>
            <param name="answer">The password answer for the specified user.</param>
            <returns>The new password for the specified user.</returns>
        </member>
        <member name="M:BlogEngine.Core.Providers.XmlMembershipProvider.UnlockUser(System.String)">
            <summary>
            Clears a lock so that the membership user can be validated.
            </summary>
            <param name="userName">The membership user whose lock status you want to clear.</param>
            <returns>
            true if the membership user was successfully unlocked; otherwise, false.
            </returns>
        </member>
        <member name="M:BlogEngine.Core.Providers.XmlMembershipProvider.UpdateUser(System.Web.Security.MembershipUser)">
            <summary>
            Updates a user. The username will not be changed.
            </summary>
            <param name="user">
            The membership user.
            </param>
        </member>
        <member name="M:BlogEngine.Core.Providers.XmlMembershipProvider.ValidateUser(System.String,System.String)">
            <summary>
            Returns true if the username and password match an exsisting user.
            </summary>
            <param name="username">
            The username.
            </param>
            <param name="password">
            The password.
            </param>
            <returns>
            The validate user.
            </returns>
        </member>
        <member name="M:BlogEngine.Core.Providers.XmlMembershipProvider.CheckPassword(System.String,System.String)">
            <summary>
            The check password.
            </summary>
            <param name="storedPassword">
            The stored password.
            </param>
            <param name="inputPassword">
            The input password.
            </param>
            <returns>
            The checked password.
            </returns>
        </member>
        <member name="M:BlogEngine.Core.Providers.XmlMembershipProvider.ReadMembershipDataStore">
            <summary>
            Builds the internal cache of users.
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Providers.XmlMembershipProvider.ApplicationName">
            <summary>
            The name of the application using the custom membership provider.
            </summary>
            <value></value>
            <returns>
            The name of the application using the custom membership provider.
            </returns>
        </member>
        <member name="P:BlogEngine.Core.Providers.XmlMembershipProvider.EnablePasswordReset">
            <summary>
            Indicates whether the membership provider is configured to allow users to reset their passwords.
            </summary>
            <value></value>
            <returns>true if the membership provider supports password reset; otherwise, false. The default is true.
            </returns>
        </member>
        <member name="P:BlogEngine.Core.Providers.XmlMembershipProvider.EnablePasswordRetrieval">
            <summary>
            Indicates whether the membership provider is configured to allow users to retrieve their passwords.
            </summary>
            <value></value>
            <returns>true if the membership provider is configured to support password retrieval; otherwise, false. The default is false.
            </returns>
        </member>
        <member name="P:BlogEngine.Core.Providers.XmlMembershipProvider.MaxInvalidPasswordAttempts">
            <summary>
            Gets the number of invalid password or password-answer attempts allowed before the membership user is locked out.
            </summary>
            <value></value>
            <returns>
            The number of invalid password or password-answer attempts allowed before the membership user is locked out.
            </returns>
        </member>
        <member name="P:BlogEngine.Core.Providers.XmlMembershipProvider.MinRequiredNonAlphanumericCharacters">
            <summary>
            Gets the minimum number of special characters that must be present in a valid password.
            </summary>
            <value></value>
            <returns>
            The minimum number of special characters that must be present in a valid password.
            </returns>
        </member>
        <member name="P:BlogEngine.Core.Providers.XmlMembershipProvider.MinRequiredPasswordLength">
            <summary>
            Gets the minimum length required for a password.
            </summary>
            <value></value>
            <returns>
            The minimum length required for a password.
            </returns>
        </member>
        <member name="P:BlogEngine.Core.Providers.XmlMembershipProvider.PasswordAttemptWindow">
            <summary>
            Gets the number of minutes in which a maximum number of invalid password or password-answer attempts are allowed before the membership user is locked out.
            </summary>
            <value></value>
            <returns>
            The number of minutes in which a maximum number of invalid password or password-answer attempts are allowed before the membership user is locked out.
            </returns>
        </member>
        <member name="P:BlogEngine.Core.Providers.XmlMembershipProvider.PasswordFormat">
            <summary>
            Gets a value indicating the format for storing passwords in the membership data store.
            </summary>
            <value></value>
            <returns>
            One of the <see cref="T:System.Web.Security.MembershipPasswordFormat"/> values indicating the format for storing passwords in the data store.
            </returns>
        </member>
        <member name="P:BlogEngine.Core.Providers.XmlMembershipProvider.PasswordStrengthRegularExpression">
            <summary>
            Gets the regular expression used to evaluate a password.
            </summary>
            <value></value>
            <returns>
            A regular expression used to evaluate a password.
            </returns>
        </member>
        <member name="P:BlogEngine.Core.Providers.XmlMembershipProvider.RequiresQuestionAndAnswer">
            <summary>
            Gets a value indicating whether the membership provider is configured to require the user to answer a password question for password reset and retrieval.
            </summary>
            <value></value>
            <returns>true if a password answer is required for password reset and retrieval; otherwise, false. The default is true.
            </returns>
        </member>
        <member name="P:BlogEngine.Core.Providers.XmlMembershipProvider.RequiresUniqueEmail">
            <summary>
            Gets a value indicating whether the membership provider is configured to require a unique e-mail address for each user name.
            </summary>
            <value></value>
            <returns>true if the membership provider requires a unique e-mail address; otherwise, false. The default is true.
            </returns>
        </member>
        <member name="T:BlogEngine.Core.Web.HttpHandlers.SyndicationHandler">
            <summary>
            Implements a custom handler to synchronously process HTTP Web requests for a syndication feed.
            </summary>
            <remarks>
            This handler can generate syndication feeds in a variety of formats and filtering 
                options based on the query string parmaeters provided.
            </remarks>
            <seealso cref="T:System.Web.IHttpHandler"/>
            <seealso cref="T:BlogEngine.Core.SyndicationGenerator"/>
        </member>
        <member name="M:BlogEngine.Core.Web.HttpHandlers.SyndicationHandler.ProcessRequest(System.Web.HttpContext)">
            <summary>
            Enables processing of HTTP Web requests by a custom HttpHandler that implements 
                the <see cref="T:System.Web.IHttpHandler"></see> interface.
            </summary>
            <param name="context">
            An <see cref="T:System.Web.HttpContext"></see> object that provides references 
                to the intrinsic server objects (for example, Request, Response, Session, and Server) used to service HTTP requests.
            </param>
        </member>
        <member name="M:BlogEngine.Core.Web.HttpHandlers.SyndicationHandler.CleanList(System.Collections.Generic.List{BlogEngine.Core.IPublishable})">
            <summary>
            Cleans the list.
            </summary>
            <param name="list">The list of IPublishable.</param>
            <returns>The cleaned list of IPublishable.</returns>
        </member>
        <member name="M:BlogEngine.Core.Web.HttpHandlers.SyndicationHandler.ConvertToIPublishable(BlogEngine.Core.IPublishable)">
            <summary>
            A converter delegate used for converting Results to Posts.
            </summary>
            <param name="item">
            The publishable item.
            </param>
            <returns>
            Converts to publishable interface.
            </returns>
        </member>
        <member name="M:BlogEngine.Core.Web.HttpHandlers.SyndicationHandler.GenerateItemList(System.Web.HttpContext)">
            <summary>
            Generates the list of feed items based on the URL.
            </summary>
            <param name="context">
            The context.
            </param>
            <returns>
            A list of IPublishable.
            </returns>
        </member>
        <member name="M:BlogEngine.Core.Web.HttpHandlers.SyndicationHandler.RecentComments">
            <summary>
            Creates a list of the most recent comments
            </summary>
            <returns>
            A list of IPublishable.
            </returns>
        </member>
        <member name="M:BlogEngine.Core.Web.HttpHandlers.SyndicationHandler.RetrieveFormat(System.Web.HttpContext)">
            <summary>
            Retrieves the syndication format from the urL parameters.
            </summary>
            <param name="context">
            The HTTP context.
            </param>
            <returns>
            The syndication format.
            </returns>
        </member>
        <member name="M:BlogEngine.Core.Web.HttpHandlers.SyndicationHandler.RetrieveTitle(System.Web.HttpContext)">
            <summary>
            Retrieves the title.
            </summary>
            <param name="context">The context.</param>
            <returns>The title string.</returns>
        </member>
        <member name="M:BlogEngine.Core.Web.HttpHandlers.SyndicationHandler.SetHeaderInformation(System.Web.HttpContext,System.Collections.Generic.IEnumerable{BlogEngine.Core.IPublishable},BlogEngine.Core.SyndicationFormat)">
            <summary>
            Sets the response header information.
            </summary>
            <param name="context">
            An <see cref="T:System.Web.HttpContext"/> object that provides references to the intrinsic server objects (for example, <b>Request</b>, <b>Response</b>, <b>Session</b>, and <b>Server</b>) used to service HTTP requests.
            </param>
            <param name="items">
            The collection of <see cref="T:BlogEngine.Core.IPublishable"/> instances used when setting the response header details.
            </param>
            <param name="format">
            The format of the syndication feed being generated.
            </param>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="context"/> is a null reference (Nothing in Visual Basic) -or- the <paramref name="items"/> is a null reference (Nothing in Visual Basic).
            </exception>
        </member>
        <member name="M:BlogEngine.Core.Web.HttpHandlers.SyndicationHandler.StopServing(System.Web.HttpContext)">
            <summary>
            The stop serving.
            </summary>
            <param name="context">
            The context.
            </param>
        </member>
        <member name="P:BlogEngine.Core.Web.HttpHandlers.SyndicationHandler.IsReusable">
            <summary>
                Gets a value indicating whether another request can use the <see cref = "T:System.Web.IHttpHandler"></see> instance.
            </summary>
            <returns>true if the <see cref = "T:System.Web.IHttpHandler"></see> instance is reusable; otherwise, false.</returns>
        </member>
        <member name="T:BlogEngine.Core.Web.HttpHandlers.TrackbackHandler">
            <summary>
            Trackback Handler
            </summary>
        </member>
        <member name="F:BlogEngine.Core.Web.HttpHandlers.TrackbackHandler.RegexHtml">
            <summary>
            The HTML Regex.
            </summary>
        </member>
        <member name="F:BlogEngine.Core.Web.HttpHandlers.TrackbackHandler.sourceHasLink">
            <summary>
            Whether the source has link.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Web.HttpHandlers.TrackbackHandler.OnSpammed(System.String)">
            <summary>
            Called when [spammed].
            </summary>
            <param name="url">The URL string.</param>
        </member>
        <member name="M:BlogEngine.Core.Web.HttpHandlers.TrackbackHandler.ProcessRequest(System.Web.HttpContext)">
            <summary>
            Enables processing of HTTP Web requests by a custom HttpHandler that 
                implements the <see cref="T:System.Web.IHttpHandler"></see> interface.
            </summary>
            <param name="context">
            An <see cref="T:System.Web.HttpContext"></see> 
                object that provides references to the intrinsic server objects 
                (for example, Request, Response, Session, and Server) used to service HTTP requests.
            </param>
        </member>
        <member name="M:BlogEngine.Core.Web.HttpHandlers.TrackbackHandler.OnAccepted(System.String)">
            <summary>
            Called when [accepted].
            </summary>
            <param name="url">The URL string.</param>
        </member>
        <member name="M:BlogEngine.Core.Web.HttpHandlers.TrackbackHandler.OnReceived(System.ComponentModel.CancelEventArgs)">
            <summary>
            Raises the <see cref="E:BlogEngine.Core.Web.HttpHandlers.TrackbackHandler.Received"/> event.
            </summary>
            <param name="e">The <see cref="T:System.ComponentModel.CancelEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:BlogEngine.Core.Web.HttpHandlers.TrackbackHandler.OnRejected(System.String)">
            <summary>
            Called when [rejected].
            </summary>
            <param name="url">The URL string.</param>
        </member>
        <member name="M:BlogEngine.Core.Web.HttpHandlers.TrackbackHandler.AddComment(System.String,BlogEngine.Core.Post,System.String,System.String,System.String)">
            <summary>
            Insert the pingback as a comment on the post.
            </summary>
            <param name="sourceUrl">
            The source Url.
            </param>
            <param name="post">
            The post to comment on.
            </param>
            <param name="blogName">
            The blog Name.
            </param>
            <param name="title">
            The title.
            </param>
            <param name="excerpt">
            The excerpt.
            </param>
        </member>
        <member name="M:BlogEngine.Core.Web.HttpHandlers.TrackbackHandler.IsFirstPingBack(BlogEngine.Core.Post,System.String)">
            <summary>
            Checks to see if the source has already pinged the target.
                If it has, there is no reason to add it again.
            </summary>
            <param name="post">
            The post to check.
            </param>
            <param name="sourceUrl">
            The source Url.
            </param>
            <returns>
            Whether is first ping back.
            </returns>
        </member>
        <member name="M:BlogEngine.Core.Web.HttpHandlers.TrackbackHandler.ExamineSourcePage(System.String,System.String)">
            <summary>
            Parse the HTML of the source page.
            </summary>
            <param name="sourceUrl">
            The source Url.
            </param>
            <param name="targetUrl">
            The target Url.
            </param>
        </member>
        <member name="E:BlogEngine.Core.Web.HttpHandlers.TrackbackHandler.Accepted">
            <summary>
                Occurs when a trackback is accepted as valid and added as a comment.
            </summary>
        </member>
        <member name="E:BlogEngine.Core.Web.HttpHandlers.TrackbackHandler.Received">
            <summary>
                Occurs when a hit is made to the trackback.axd handler.
            </summary>
        </member>
        <member name="E:BlogEngine.Core.Web.HttpHandlers.TrackbackHandler.Rejected">
            <summary>
                Occurs when a trackback request is rejected because the sending
                website already made a trackback or pingback to the specific page.
            </summary>
        </member>
        <member name="E:BlogEngine.Core.Web.HttpHandlers.TrackbackHandler.Spammed">
            <summary>
                Occurs when the request comes from a spammer.
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Web.HttpHandlers.TrackbackHandler.IsReusable">
            <summary>
                Gets a value indicating whether another request can use the <see cref = "T:System.Web.IHttpHandler"></see> instance.
            </summary>
            <value></value>
            <returns>true if the <see cref = "T:System.Web.IHttpHandler"></see> instance is reusable; otherwise, false.</returns>
        </member>
        <member name="T:BlogEngine.Core.Web.HttpModules.CompressionModule">
            <summary>
            Compresses the output using standard gzip/deflate.
            </summary>
        </member>
        <member name="F:BlogEngine.Core.Web.HttpModules.CompressionModule.Deflate">
            <summary>
            The deflate string.
            </summary>
        </member>
        <member name="F:BlogEngine.Core.Web.HttpModules.CompressionModule.Gzip">
            <summary>
            The gzip string.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Web.HttpModules.CompressionModule.CompressResponse(System.Web.HttpContext)">
            <summary>
            Compresses the response stream using either deflate or gzip depending on the client.
            </summary>
            <param name="context">
            The HTTP context to compress.
            </param>
        </member>
        <member name="M:BlogEngine.Core.Web.HttpModules.CompressionModule.System#Web#IHttpModule#Dispose">
            <summary>
            Disposes of the resources (other than memory) used by the module 
                that implements <see cref="T:System.Web.IHttpModule"></see>.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Web.HttpModules.CompressionModule.System#Web#IHttpModule#Init(System.Web.HttpApplication)">
            <summary>
            Initializes a module and prepares it to handle requests.
            </summary>
            <param name="context">
            An <see cref="T:System.Web.HttpApplication"></see> 
                that provides access to the methods, properties, and events common to 
                all application objects within an ASP.NET application.
            </param>
        </member>
        <member name="M:BlogEngine.Core.Web.HttpModules.CompressionModule.IsEncodingAccepted(System.String)">
            <summary>
            Checks the request headers to see if the specified
                encoding is accepted by the client.
            </summary>
            <param name="encoding">
            The encoding.
            </param>
            <returns>
            The is encoding accepted.
            </returns>
        </member>
        <member name="M:BlogEngine.Core.Web.HttpModules.CompressionModule.SetEncoding(System.String)">
            <summary>
            Adds the specified encoding to the response headers.
            </summary>
            <param name="encoding">The encoding.</param>
        </member>
        <member name="M:BlogEngine.Core.Web.HttpModules.CompressionModule.ContextPostReleaseRequestState(System.Object,System.EventArgs)">
            <summary>
            Handles the BeginRequest event of the context control.
            </summary>
            <param name="sender">
            The source of the event.
            </param>
            <param name="e">
            The <see cref="T:System.EventArgs"/> instance containing the event data.
            </param>
        </member>
        <member name="T:BlogEngine.Core.Web.HttpModules.ReferrerModule">
            <summary>
            Referrer Module
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Web.HttpModules.ReferrerModule.Dispose">
            <summary>
            Disposes of the resources (other than memory) used by the 
                module that implements <see cref="T:System.Web.IHttpModule"></see>.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Web.HttpModules.ReferrerModule.Init(System.Web.HttpApplication)">
            <summary>
            Initializes a module and prepares it to handle requests.
            </summary>
            <param name="context">
            An <see cref="T:System.Web.HttpApplication"></see> that 
                provides access to the methods, properties, and events common to all application 
                objects within an ASP.NET application
            </param>
        </member>
        <member name="M:BlogEngine.Core.Web.HttpModules.ReferrerModule.BeginRegisterClick(System.Collections.DictionaryEntry)">
            <summary>
            The begin register click.
            </summary>
            <param name="entry">
            Contains data to register.
            </param>
        </member>
        <member name="M:BlogEngine.Core.Web.HttpModules.ReferrerModule.IsSearchEngine(System.String)">
            <summary>
            Determines whether [is search engine] [the specified referrer].
            </summary>
            <param name="referrer">The referrer.</param>
            <returns>
                <c>true</c> if [is search engine] [the specified referrer]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:BlogEngine.Core.Web.HttpModules.ReferrerModule.IsSpam(System.Uri,System.Uri)">
            <summary>
            Determines whether the specified referrer is spam.
            </summary>
            <param name="referrer">
            The referrer Uri.
            </param>
            <param name="url">
            The URL Uri.
            </param>
            <returns>
            <c>true</c> if the specified referrer is spam; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:BlogEngine.Core.Web.HttpModules.ReferrerModule.OnReferrerRegistered(System.Uri)">
            <summary>
            Raises the event in a safe way
            </summary>
            <param name="referrer">
            The referrer.
            </param>
        </member>
        <member name="M:BlogEngine.Core.Web.HttpModules.ReferrerModule.RegisterClick(System.Uri,System.Uri)">
            <summary>
            Registers click.
            </summary>
            <param name="url">
            The url Uri.
            </param>
            <param name="referrer">
            The referrer Uri.
            </param>
        </member>
        <member name="M:BlogEngine.Core.Web.HttpModules.ReferrerModule.ContextBeginRequest(System.Object,System.EventArgs)">
            <summary>
            Handles the BeginRequest event of the context control.
            </summary>
            <param name="sender">
            The source of the event.
            </param>
            <param name="e">
            The <see cref="T:System.EventArgs"/> instance containing the event data.
            </param>
        </member>
        <member name="E:BlogEngine.Core.Web.HttpModules.ReferrerModule.ReferrerRegistered">
            <summary>
                Occurs when a visitor enters the website and the referrer is logged.
            </summary>
        </member>
        <member name="T:BlogEngine.Core.Web.HttpModules.WwwSubDomainModule">
            <summary>
            Removes or adds the www subdomain from all requests
                and makes a permanent redirection to the new location.
            </summary>
        </member>
        <member name="F:BlogEngine.Core.Web.HttpModules.WwwSubDomainModule.LinkRegex">
            <summary>
            The link regex.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Web.HttpModules.WwwSubDomainModule.Dispose">
            <summary>
            Disposes of the resources (other than memory) used by the module that implements <see cref="T:System.Web.IHttpModule"/>.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Web.HttpModules.WwwSubDomainModule.Init(System.Web.HttpApplication)">
            <summary>
            Initializes a module and prepares it to handle requests.
            </summary>
            <param name="context">An <see cref="T:System.Web.HttpApplication"/> that provides access to the methods, properties, and events common to all application objects within an ASP.NET application</param>
        </member>
        <member name="M:BlogEngine.Core.Web.HttpModules.WwwSubDomainModule.AddWww(System.Web.HttpContext)">
            <summary>
            Adds the www subdomain to the request and redirects.
            </summary>
            <param name="context">
            The context.
            </param>
        </member>
        <member name="M:BlogEngine.Core.Web.HttpModules.WwwSubDomainModule.PermanentRedirect(System.String,System.Web.HttpContext)">
            <summary>
            Sends permanent redirection headers (301)
            </summary>
            <param name="url">
            The url to redirect to.
            </param>
            <param name="context">
            The HTTP context.
            </param>
        </member>
        <member name="M:BlogEngine.Core.Web.HttpModules.WwwSubDomainModule.RemoveWww(System.Web.HttpContext)">
            <summary>
            Removes the www subdomain from the request and redirects.
            </summary>
            <param name="context">
            The context.
            </param>
        </member>
        <member name="M:BlogEngine.Core.Web.HttpModules.WwwSubDomainModule.ContextBeginRequest(System.Object,System.EventArgs)">
            <summary>
            Handles the BeginRequest event of the context control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="T:BlogEngine.Core.Web.HttpModules.UrlRewrite">
            <summary>
            Handles pretty URL's and redirects them to the permalinks.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Web.HttpModules.UrlRewrite.Dispose">
            <summary>
            Disposes of the resources (other than memory) used by the module that implements <see cref="T:System.Web.IHttpModule"/>.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Web.HttpModules.UrlRewrite.Init(System.Web.HttpApplication)">
            <summary>
            Initializes a module and prepares it to handle requests.
            </summary>
            <param name="context">An <see cref="T:System.Web.HttpApplication"/> that provides access to the methods, properties, and events common to all application objects within an ASP.NET application</param>
        </member>
        <member name="M:BlogEngine.Core.Web.HttpModules.UrlRewrite.ContextBeginRequest(System.Object,System.EventArgs)">
            <summary>
            Handles the BeginRequest event of the context control.
            </summary>
            <param name="sender">
            The source of the event.
            </param>
            <param name="e">
            The <see cref="T:System.EventArgs"/> instance containing the event data.
            </param>
        </member>
        <member name="M:BlogEngine.Core.Web.HttpModules.UrlRewrite.RedirectToRemoveFileExtension(System.Web.HttpContext,BlogEngine.Core.Blog,System.String,System.String)">
            <summary>
            Checks to see if the incoming request is for a Post, Page or Category and contains the old .ASPX extension.
            If so and both RemoveExtensionsFromUrls and RedirectToRemoveFileExtension are true, the person is 301
            redirected to a URL with the .ASPX extension removed.
            </summary>
        </member>
        <member name="T:BlogEngine.Core.Web.Navigation.IPager">
            <summary>
            Generic list pager
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Web.Navigation.IPager.Render(System.Int32,System.String)">
            <summary>
            Renders pager tag as string
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Web.Navigation.IPager.First">
            <summary>
            First page
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Web.Navigation.IPager.Previous">
            <summary>
            Previous page
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Web.Navigation.IPager.From">
            <summary>
            Show items on the page from
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Web.Navigation.IPager.To">
            <summary>
            Show items from the page up to
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Web.Navigation.IPager.Next">
            <summary>
            Next page in the list
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Web.Navigation.IPager.Last">
            <summary>
            Last page in the list
            </summary>
        </member>
        <member name="T:BlogEngine.Core.Web.Navigation.Pager">
            <summary>
            Generic pager contains all numeric values
            required to render pager control
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Web.Navigation.Pager.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Pager constructor
            </summary>
            <param name="page">Page #</param>
            <param name="pageSize">Page size (number of items per page)</param>
            <param name="listCount">Number of items in the list</param>
        </member>
        <member name="M:BlogEngine.Core.Web.Navigation.Pager.BlogEngine#Core#Web#Navigation#IPager#Render(System.Int32,System.String)">
            <summary>
            Renders pager tag as string
            </summary>
            <param name="page">page number</param>
            <param name="callback">The callback</param>
            <returns>Pager tag</returns>
        </member>
        <member name="P:BlogEngine.Core.Web.Navigation.Pager.BlogEngine#Core#Web#Navigation#IPager#First">
            <summary>
            First page
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Web.Navigation.Pager.BlogEngine#Core#Web#Navigation#IPager#Previous">
            <summary>
            Previous page
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Web.Navigation.Pager.BlogEngine#Core#Web#Navigation#IPager#From">
            <summary>
            Show items on the page from
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Web.Navigation.Pager.BlogEngine#Core#Web#Navigation#IPager#To">
            <summary>
            Show items from the page up to
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Web.Navigation.Pager.BlogEngine#Core#Web#Navigation#IPager#Next">
            <summary>
            Next page
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Web.Navigation.Pager.BlogEngine#Core#Web#Navigation#IPager#Last">
            <summary>
            Last page
            </summary>
        </member>
        <member name="T:BlogEngine.Core.Web.Scripting.PageHeader">
            <summary>
            Class to process links dynamically injected into page header
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Web.Scripting.PageHeader.AddLink(System.String,System.String,System.String,System.String)">
            <summary>
            Add link to collection
            </summary>
            <param name="type">Type</param>
            <param name="rel">Relation</param>
            <param name="title">Title</param>
            <param name="href">Href</param>
        </member>
        <member name="M:BlogEngine.Core.Web.Scripting.PageHeader.Render(System.Web.UI.Page)">
            <summary>
            Render links by adding them to the page header
            </summary>
            <param name="page">Base page</param>
        </member>
        <member name="T:BlogEngine.Core.Web.Scripting.Helpers">
            <summary>
            Helper methods for script manipulations
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Web.Scripting.Helpers.AddStyle(System.Web.UI.Page,System.String)">
            <summary>
            Add stylesheet to page header
            </summary>
            <param name="page">Page</param>
            <param name="lnk">Href link</param>
        </member>
        <member name="M:BlogEngine.Core.Web.Scripting.Helpers.AddGenericLink(System.Web.UI.Page,System.String,System.String,System.String,System.String)">
            <summary>
            Add generic lit to the page
            </summary>
            <param name="page">Page</param>
            <param name="type">Type</param>
            <param name="relation">Relation</param>
            <param name="title">Title</param>
            <param name="href">Url</param>
        </member>
        <member name="M:BlogEngine.Core.Web.Scripting.Helpers.AddScript(System.Web.UI.Page,System.String,System.Boolean,System.Boolean,System.Boolean,System.Int32)">
            <summary>
            Add javascript to page
            </summary>
            <param name="page">Page</param>
            <param name="src">Source</param>
            <param name="top">If add to page header</param>
            <param name="defer">Defer</param>
            <param name="asnc">Async</param>
            <param name="indx">Index to insert script at</param>
        </member>
        <member name="M:BlogEngine.Core.Web.Scripting.Helpers.FormatInlineScript(System.String)">
            <summary>
            Format inline script
            </summary>
            <param name="script">JavaScript code</param>
            <returns>Formatted script</returns>
        </member>
        <member name="M:BlogEngine.Core.Web.Scripting.Helpers.AddCustomCodeToHead(System.Web.UI.Page)">
            <summary>
            Adds code to the HTML head section.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Web.Scripting.Helpers.AddTrackingScript(System.Web.UI.Page)">
            <summary>
            Adds a JavaScript to the bottom of the page at runtime.
            </summary>
            <remarks>
            You must add the script tags to the BlogSettings.Instance.TrackingScript.
            </remarks>
        </member>
        <member name="T:BlogEngine.Core.Web.Scripting.JavascriptMinifier">
            <summary>
            Helper class for performing minification of Javascript and CSS.
            </summary>
            <remarks>
            
            This class is basically a wrapper for the AjaxMin library(lib/AjaxMin.dll).
            http://ajaxmin.codeplex.com/
            
            There are no symbols that come with the AjaxMin dll, so this class gives a bit of intellisense 
            help for basic control. AjaxMin is a pretty dense library with lots of different settings, so
            everyone's encouraged to use it directly if they want to.
            
            </remarks>
        </member>
        <member name="M:BlogEngine.Core.Web.Scripting.JavascriptMinifier.#ctor">
            <summary>
            Creates a new Minifier instance.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Web.Scripting.JavascriptMinifier.CreateCodeSettings">
            <summary>
            Builds the required CodeSettings class needed for the Ajax Minifier.
            </summary>
            <returns></returns>
        </member>
        <member name="M:BlogEngine.Core.Web.Scripting.JavascriptMinifier.Minify(System.String)">
            <summary>
            Gets the minified version of the passed in script.
            </summary>
            <param name="script"></param>
            <returns></returns>
        </member>
        <member name="P:BlogEngine.Core.Web.Scripting.JavascriptMinifier.VariableMinification">
            <summary>
            Gets or sets whether this Minifier instance should minify local-scoped variables.
            </summary>
            <remarks>
            
            Setting this value to LocalVariablesAndFunctionArguments can have a negative impact on some scripts.
            Ex: A pre-minified jQuery will fail if passed through this. 
            
            </remarks>
        </member>
        <member name="P:BlogEngine.Core.Web.Scripting.JavascriptMinifier.PreserveFunctionNames">
            <summary>
            Gets or sets whether this Minifier instance should preserve function names when minifying a script.
            </summary>
            <remarks>
            
            Scripts that have external scripts relying on their functions should leave this set to true. 
            
            </remarks>
        </member>
        <member name="P:BlogEngine.Core.Web.Scripting.JavascriptMinifier.RemoveWhitespace">
            <summary>
            Gets or sets whether the <see cref="T:BlogEngine.Core.Web.Scripting.JavascriptMinifier"/> instance should remove
            whitespace from a script.
            </summary>
        </member>
        <member name="T:BlogEngine.Core.Web.Scripting.VariableMinification">
            <summary>
            Represents the way variables should be minified by a Minifier instance.
            </summary>
        </member>
        <member name="F:BlogEngine.Core.Web.Scripting.VariableMinification.None">
            <summary>
            No minification will take place.
            </summary>
        </member>
        <member name="F:BlogEngine.Core.Web.Scripting.VariableMinification.LocalVariablesOnly">
            <summary>
            Only variables that are local in scope to a function will be minified.
            </summary>
        </member>
        <member name="F:BlogEngine.Core.Web.Scripting.VariableMinification.LocalVariablesAndFunctionArguments">
            <summary>
            Local scope variables will be minified, as will function parameter names. This can have a negative impact on some scripts, so test if you use it! 
            </summary>
        </member>
        <member name="T:BlogEngine.Core.Web.Scripting.WebResourceFilter">
            <summary>
            The web resource filter.
            </summary>
        </member>
        <member name="F:BlogEngine.Core.Web.Scripting.WebResourceFilter.sink">
            <summary>
            The _sink.
            </summary>
        </member>
        <member name="F:BlogEngine.Core.Web.Scripting.WebResourceFilter.WebResourceRegex">
            <summary>
            Regex for parsing webresource.axd
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Web.Scripting.WebResourceFilter.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:BlogEngine.Core.Web.Scripting.WebResourceFilter"/> class.
            </summary>
            <param name="sink">
            The sink stream.
            </param>
        </member>
        <member name="M:BlogEngine.Core.Web.Scripting.WebResourceFilter.Close">
            <summary>
            Write stream to the client before closing.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Web.Scripting.WebResourceFilter.Evaluator(System.Text.RegularExpressions.Match)">
            <summary>
            Evaluates the replacement for each link match.
            </summary>
            <param name="match">
            The match.
            </param>
            <returns>
            The evaluator.
            </returns>
        </member>
        <member name="M:BlogEngine.Core.Web.Scripting.WebResourceFilter.Flush">
            <summary>
            When overridden in a derived class, clears all buffers for this stream and causes any buffered data to be written to the underlying device.
            </summary>
            <exception cref="T:System.IO.IOException">
            An I/O error occurs.
            </exception>
        </member>
        <member name="M:BlogEngine.Core.Web.Scripting.WebResourceFilter.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            When overridden in a derived class, reads a sequence of bytes from the current stream and advances the position within the stream by the number of bytes read.
            </summary>
            <param name="buffer">An array of bytes. When this method returns, the buffer contains the specified byte array with the values between <paramref name="offset"/> and (<paramref name="offset"/> + <paramref name="count"/> - 1) replaced by the bytes read from the current source.</param>
            <param name="offset">The zero-based byte offset in <paramref name="buffer"/> at which to begin storing the data read from the current stream.</param>
            <param name="count">The maximum number of bytes to be read from the current stream.</param>
            <returns>
            The total number of bytes read into the buffer. This can be less than the number of bytes requested if that many bytes are not currently available, or zero (0) if the end of the stream has been reached.
            </returns>
            <exception cref="T:System.ArgumentException">
            The sum of <paramref name="offset"/> and <paramref name="count"/> is larger than the buffer length.
            </exception>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="buffer"/> is null.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <paramref name="offset"/> or <paramref name="count"/> is negative.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurs.
            </exception>
            <exception cref="T:System.NotSupportedException">
            The stream does not support reading.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            Methods were called after the stream was closed.
            </exception>
        </member>
        <member name="M:BlogEngine.Core.Web.Scripting.WebResourceFilter.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            When overridden in a derived class, sets the position within the current stream.
            </summary>
            <param name="offset">A byte offset relative to the <paramref name="origin"/> parameter.</param>
            <param name="origin">A value of type <see cref="T:System.IO.SeekOrigin"/> indicating the reference point used to obtain the new position.</param>
            <returns>
            The new position within the current stream.
            </returns>
            <exception cref="T:System.IO.IOException">
            An I/O error occurs.
            </exception>
            <exception cref="T:System.NotSupportedException">
            The stream does not support seeking, such as if the stream is constructed from a pipe or console output.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            Methods were called after the stream was closed.
            </exception>
        </member>
        <member name="M:BlogEngine.Core.Web.Scripting.WebResourceFilter.SetLength(System.Int64)">
            <summary>
            When overridden in a derived class, sets the length of the current stream.
            </summary>
            <param name="value">The desired length of the current stream in bytes.</param>
            <exception cref="T:System.IO.IOException">
            An I/O error occurs.
            </exception>
            <exception cref="T:System.NotSupportedException">
            The stream does not support both writing and seeking, such as if the stream is constructed from a pipe or console output.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            Methods were called after the stream was closed.
            </exception>
        </member>
        <member name="M:BlogEngine.Core.Web.Scripting.WebResourceFilter.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            When overridden in a derived class, writes a sequence of bytes to the current stream and advances the current position within this stream by the number of bytes written.
            </summary>
            <param name="buffer">An array of bytes. This method copies <paramref name="count"/> bytes from <paramref name="buffer"/> to the current stream.</param>
            <param name="offset">The zero-based byte offset in <paramref name="buffer"/> at which to begin copying bytes to the current stream.</param>
            <param name="count">The number of bytes to be written to the current stream.</param>
            <exception cref="T:System.ArgumentException">
            The sum of <paramref name="offset"/> and <paramref name="count"/> is greater than the buffer length.
            </exception>
            <exception cref="T:System.ArgumentNullException">
                <paramref name="buffer"/> is null.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <paramref name="offset"/> or <paramref name="count"/> is negative.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurs.
            </exception>
            <exception cref="T:System.NotSupportedException">
            The stream does not support writing.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            Methods were called after the stream was closed.
            </exception>
        </member>
        <member name="P:BlogEngine.Core.Web.Scripting.WebResourceFilter.CanRead">
            <summary>
            Gets a value indicating whether CanRead.
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Web.Scripting.WebResourceFilter.CanSeek">
            <summary>
            Gets a value indicating whether CanSeek.
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Web.Scripting.WebResourceFilter.CanWrite">
            <summary>
            Gets a value indicating whether CanWrite.
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Web.Scripting.WebResourceFilter.Length">
            <summary>
            Gets Length.
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Web.Scripting.WebResourceFilter.Position">
            <summary>
            Gets or sets Position.
            </summary>
        </member>
        <member name="T:BlogEngine.Core.Web.UrlRules">
            <summary>
            URL rewrite rules
            </summary>
        </member>
        <member name="F:BlogEngine.Core.Web.UrlRules.YearRegex">
            <summary>
            The Year Regex.
            </summary>
        </member>
        <member name="F:BlogEngine.Core.Web.UrlRules.YearMonthRegex">
            <summary>
            The Year Month Regex.
            </summary>
        </member>
        <member name="F:BlogEngine.Core.Web.UrlRules.YearMonthDayRegex">
            <summary>
            The Year Month Day Regex.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Web.UrlRules.RewritePost(System.Web.HttpContext,System.String)">
            <summary>
            Rewrites the post.
            </summary>
            <param name="context">The context.</param>
            <param name="url">The URL string.</param>
        </member>
        <member name="M:BlogEngine.Core.Web.UrlRules.RewritePage(System.Web.HttpContext,System.String)">
            <summary>
            Rewrites the page.
            </summary>
            <param name="context">The context.</param>
            <param name="url">The URL string.</param>
        </member>
        <member name="M:BlogEngine.Core.Web.UrlRules.RewriteContact(System.Web.HttpContext,System.String)">
            <summary>
            Rewrites the contact page.
            </summary>
            <param name="context">The context.</param>
            <param name="url">The URL string.</param>
        </member>
        <member name="M:BlogEngine.Core.Web.UrlRules.RewriteArchive(System.Web.HttpContext,System.String)">
            <summary>
            Rewrites the archive page.
            </summary>
            <param name="context">The context.</param>
            <param name="url">The URL string.</param>
        </member>
        <member name="M:BlogEngine.Core.Web.UrlRules.RewriteSearch(System.Web.HttpContext,System.String)">
            <summary>
            Rewrites the search page.
            </summary>
            <param name="context">The context.</param>
            <param name="url">The URL string.</param>
        </member>
        <member name="M:BlogEngine.Core.Web.UrlRules.RewritePhysicalPageGeneric(System.Web.HttpContext,System.String,System.String)">
            <summary>
            Generic routing to rewrite to a physical page, e.g. contact.aspx, archive.aspx, when RemoveExtensionsFromUrls is turned on.
            </summary>
            <param name="context">The context.</param>
            <param name="url">The URL string.</param>
            <param name="relativePath">The relative path to the page including the physical page name, e.g. archive.aspx, folder/somepage.aspx</param>
        </member>
        <member name="M:BlogEngine.Core.Web.UrlRules.RewriteCategory(System.Web.HttpContext,System.String)">
            <summary>
            Rewrites the category.
            </summary>
            <param name="context">The HTTP context.</param>
            <param name="url">The URL string.</param>
        </member>
        <member name="M:BlogEngine.Core.Web.UrlRules.RewriteTag(System.Web.HttpContext,System.String)">
            <summary>
            Rewrites the tag.
            </summary>
            <param name="context">The HTTP context.</param>
            <param name="url">The URL string.</param>
        </member>
        <member name="M:BlogEngine.Core.Web.UrlRules.RewriteCalendar(System.Web.HttpContext,System.String)">
            <summary>
            Page with large calendar
            </summary>
            <param name="context">The HTTP context.</param>
            <param name="url">The URL string.</param>
        </member>
        <member name="M:BlogEngine.Core.Web.UrlRules.RewriteAuthor(System.Web.HttpContext,System.String)">
            <summary>
            Posts for author
            </summary>
            <param name="context">The HTTP context.</param>
            <param name="url">The URL string.</param>
        </member>
        <member name="M:BlogEngine.Core.Web.UrlRules.RewriteBlog(System.Web.HttpContext,System.String)">
            <summary>
            Rewrites /blog.aspx path
            </summary>
            <param name="context">The HTTP context.</param>
            <param name="url">The URL string.</param>
        </member>
        <member name="M:BlogEngine.Core.Web.UrlRules.RewriteFilePath(System.Web.HttpContext,System.String)">
            <summary>
            Rewrites the incoming file request to the actual handler
            </summary>
            <param name="context">the context</param>
            <param name="url">the url string</param>
        </member>
        <member name="M:BlogEngine.Core.Web.UrlRules.RewriteImagePath(System.Web.HttpContext,System.String)">
            <summary>
            Rewrites the incoming image request to the actual handler
            </summary>
            <param name="context">the context</param>
            <param name="url">the url string</param>
        </member>
        <member name="M:BlogEngine.Core.Web.UrlRules.RewriteDefault(System.Web.HttpContext)">
            <summary>
            The rewrite default.
            </summary>
            <param name="context">
            The context.
            </param>
        </member>
        <member name="M:BlogEngine.Core.Web.UrlRules.DefaultPageRequested(System.Web.HttpContext)">
            <summary>
            Checks if default.aspx was requested
            </summary>
            <param name="context">http context</param>
            <returns>True if default</returns>
        </member>
        <member name="M:BlogEngine.Core.Web.UrlRules.ExtractDate(System.Web.HttpContext,System.Int32@,System.Int32@,System.Int32@)">
            <summary>
            Extracts the year and month from the requested URL and returns that as a DateTime.
            </summary>
            <param name="context">
            The context.
            </param>
            <param name="year">
            The year number.
            </param>
            <param name="month">
            The month number.
            </param>
            <param name="day">
            The day number.
            </param>
            <returns>
            Whether date extraction succeeded.
            </returns>
        </member>
        <member name="M:BlogEngine.Core.Web.UrlRules.ExtractTitle(System.Web.HttpContext,System.String)">
            <summary>
            Extracts the title from the requested URL.
            </summary>
            <param name="context">
            The context.
            </param>
            <param name="url">
            The url string.
            </param>
            <returns>
            The extract title.
            </returns>
        </member>
        <member name="M:BlogEngine.Core.Web.UrlRules.GetQueryString(System.Web.HttpContext)">
            <summary>
            Gets the query string from the requested URL.
            </summary>
            <param name="context">
            The context.
            </param>
            <returns>
            The query string.
            </returns>
        </member>
        <member name="M:BlogEngine.Core.Web.UrlRules.GetUrlWithQueryString(System.Web.HttpContext)">
            <summary>
            Gets query string portion of URL
            </summary>
            <param name="context">http context</param>
            <returns>Query string</returns>
        </member>
        <member name="T:BlogEngine.Core.XmlSafeResolver">
            <summary>
            Derived XmlUrlResolver class designed to prevent security problems with
                dangerous XML input, by limiting the amount of data that can be retrieved.
            </summary>
        </member>
        <member name="F:BlogEngine.Core.XmlSafeResolver.BufferSize">
            <summary>
            The buffer size. 1 KB.
            </summary>
        </member>
        <member name="F:BlogEngine.Core.XmlSafeResolver.MaxResponseSize">
            <summary>
            The max response size. 1 MB.
            </summary>
        </member>
        <member name="F:BlogEngine.Core.XmlSafeResolver.Timeout">
            <summary>
            The timeout. 10 seconds.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.XmlSafeResolver.GetEntity(System.Uri,System.String,System.Type)">
            <summary>
            Maps a URI to an object containing the actual resource.
            </summary>
            <param name="absoluteUri">
            The URI returned from <see cref="M:System.Xml.XmlResolver.ResolveUri(System.Uri,System.String)"/>
            </param>
            <param name="role">
            The current implementation does not use this parameter when resolving URIs. This is provided for future extensibility purposes. For example, this can be mapped to the xlink:role and used as an implementation specific argument in other scenarios.
            </param>
            <param name="typeOfObjectToReturn">
            The type of object to return. The current implementation only returns System.IO.Stream objects.
            </param>
            <returns>
            A System.IO.Stream object or null if a type other than stream is specified.
            </returns>
            <exception cref="T:System.Xml.XmlException">
            <paramref name="typeOfObjectToReturn"/> is neither null nor a Stream type.
            </exception>
            <exception cref="T:System.UriFormatException">
            The specified URI is not an absolute URI.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="absoluteUri"/> is null.
            </exception>
            <exception cref="T:System.Exception">
            There is a runtime error (for example, an interrupted server connection).
            </exception>
        </member>
        <member name="T:BlogEngine.Core.BlogRollItem">
            <summary>
            BlogRolls are links to outside blogs.
            </summary>
        </member>
        <member name="F:BlogEngine.Core.BlogRollItem.SyncRoot">
            <summary>
            The sync root.
            </summary>
        </member>
        <member name="F:BlogEngine.Core.BlogRollItem.blogRolls">
            <summary>
            The blog rolls.
            </summary>
        </member>
        <member name="F:BlogEngine.Core.BlogRollItem.blogUrl">
            <summary>
            The blog url.
            </summary>
        </member>
        <member name="F:BlogEngine.Core.BlogRollItem.description">
            <summary>
            The description.
            </summary>
        </member>
        <member name="F:BlogEngine.Core.BlogRollItem.feedUrl">
            <summary>
            The feed url.
            </summary>
        </member>
        <member name="F:BlogEngine.Core.BlogRollItem.sortIndex">
            <summary>
            The sort index.
            </summary>
        </member>
        <member name="F:BlogEngine.Core.BlogRollItem.title">
            <summary>
            The title.
            </summary>
        </member>
        <member name="F:BlogEngine.Core.BlogRollItem.xfn">
            <summary>
            The xfn string.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.BlogRollItem.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:BlogEngine.Core.BlogRollItem"/> class.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.BlogRollItem.#ctor(System.String,System.String,System.Uri)">
            <summary>
            Initializes a new instance of the <see cref="T:BlogEngine.Core.BlogRollItem"/> class.
            </summary>
            <param name="title">
            The title of the BlogRollItem.
            </param>
            <param name="description">
            The description of the BlogRollItem.
            </param>
            <param name="blogUrl">
            The <see cref="T:System.Uri"/> of the BlogRollItem.
            </param>
        </member>
        <member name="M:BlogEngine.Core.BlogRollItem.GetBlogRollItem(System.Guid)">
            <summary>
            Gets the BlogRollItem from the data store.
            </summary>
            <param name="id">The blogroll item id.</param>
            <returns>The blogroll item.</returns>
        </member>
        <member name="M:BlogEngine.Core.BlogRollItem.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="M:BlogEngine.Core.BlogRollItem.CompareTo(BlogEngine.Core.BlogRollItem)">
            <summary>
            Compares the current object with another object of the same type.
            </summary>
            <param name="other">
            An object to compare with this object.
            </param>
            <returns>
            A 32-bit signed integer that indicates the relative order of the objects being compared. 
                The return value has the following meanings: Value Meaning Less than zero This object is 
                less than the other parameter.Zero This object is equal to other. Greater than zero This object is greater than other.
            </returns>
        </member>
        <member name="M:BlogEngine.Core.BlogRollItem.DataDelete">
            <summary>
            Deletes the object from the data store.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.BlogRollItem.DataInsert">
            <summary>
            Inserts a new object to the data store.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.BlogRollItem.DataSelect(System.Guid)">
            <summary>
            Retrieves the object from the data store and populates it.
            </summary>
            <param name="id">
            The unique identifier of the object.
            </param>
            <returns>
            The object that was selected from the data store.
            </returns>
        </member>
        <member name="M:BlogEngine.Core.BlogRollItem.DataUpdate">
            <summary>
            Updates the object in its data store.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.BlogRollItem.ValidationRules">
            <summary>
            Reinforces the business rules by adding additional rules to the
                broken rules collection.
            </summary>
        </member>
        <member name="P:BlogEngine.Core.BlogRollItem.BlogRolls">
            <summary>
                Gets all of the BlogRollItems from the data store.
            </summary>
        </member>
        <member name="P:BlogEngine.Core.BlogRollItem.BlogUrl">
            <summary>
                Gets or sets the BlogUrl of the object.
            </summary>
        </member>
        <member name="P:BlogEngine.Core.BlogRollItem.Description">
            <summary>
                Gets or sets the Description of the object.
            </summary>
        </member>
        <member name="P:BlogEngine.Core.BlogRollItem.FeedUrl">
            <summary>
                Gets or sets the FeedUrl of the object.
            </summary>
        </member>
        <member name="P:BlogEngine.Core.BlogRollItem.SortIndex">
            <summary>
                Gets or sets the SortIndex of the object.
            </summary>
        </member>
        <member name="P:BlogEngine.Core.BlogRollItem.Title">
            <summary>
                Gets or sets the Title of the object.
            </summary>
        </member>
        <member name="P:BlogEngine.Core.BlogRollItem.Xfn">
            <summary>
                Gets or sets the Xfn of the object.
            </summary>
        </member>
        <member name="T:BlogEngine.Core.CommentHandlers">
            <summary>
            Rules, Filters and anti-spam services use this class
                to handle adding new comment to the blog
            </summary>
        </member>
        <member name="F:BlogEngine.Core.CommentHandlers.customFilters">
            <summary>
                The custom filters.
            </summary>
        </member>
        <member name="F:BlogEngine.Core.CommentHandlers.filters">
            <summary>
                The filters.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.CommentHandlers.AddItemToFilter(System.String,System.String,System.Boolean)">
            <summary>
            Add item to white or black list
            </summary>
            <param name="subject">
            Item subject.
            </param>
            <param name="value">
            Item value.
            </param>
            <param name="isspam">
            True if comment is spam
            </param>
        </member>
        <member name="M:BlogEngine.Core.CommentHandlers.AddIpToFilter(System.String,System.Boolean)">
            <summary>
            Add comment IP to white or black list
            </summary>
            <param name="ip">
            Comment IP
            </param>
            <param name="isspam">
            True if comment is spam
            </param>
        </member>
        <member name="M:BlogEngine.Core.CommentHandlers.AddEmailToFilter(System.String,System.Boolean)">
            <summary>
            Add comment email address to white or black list
            </summary>
            <param name="email">
            Email address.
            </param>
            <param name="isspam">
            True if comment is spam
            </param>
        </member>
        <member name="M:BlogEngine.Core.CommentHandlers.GetCustomFilter(System.String)">
            <summary>
            Instantiates custom filter object
            </summary>
            <param name="className">
            Name of the class to instantiate
            </param>
            <returns>
            Object as ICustomFilter
            </returns>
        </member>
        <member name="M:BlogEngine.Core.CommentHandlers.Listen">
            <summary>
            Initiate adding comment event listener
            </summary>
        </member>
        <member name="M:BlogEngine.Core.CommentHandlers.ReportMistake(BlogEngine.Core.Comment)">
            <summary>
            Report to service if comment is really spam
            </summary>
            <param name="comment">
            Comment object
            </param>
        </member>
        <member name="M:BlogEngine.Core.CommentHandlers.InitCustomFilters">
            <summary>
            The init custom filters.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.CommentHandlers.InitFilters">
            <summary>
            Inits the filters.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.CommentHandlers.ModeratedByFilter(BlogEngine.Core.Comment)">
            <summary>
            Moderates the comment by the filter.
            </summary>
            <param name="comment">
            The comment.
            </param>
            <returns>
            Whether the comment is moderated by a filter.
            </returns>
        </member>
        <member name="M:BlogEngine.Core.CommentHandlers.ModeratedByRule(BlogEngine.Core.Comment)">
            <summary>
            Returns whether the comment is moderated by a rule.
            </summary>
            <param name="comment">
            The comment.
            </param>
            <returns>
            Whether comment is moderated by a rule.
            </returns>
        </member>
        <member name="M:BlogEngine.Core.CommentHandlers.PostAddingComment(System.Object,System.ComponentModel.CancelEventArgs)">
            <summary>
            Handles the AddingComment event of the Post control.
            </summary>
            <param name="sender">
            The source of the event.
            </param>
            <param name="e">
            The <see cref="T:System.ComponentModel.CancelEventArgs"/> instance containing the event data.
            </param>
        </member>
        <member name="M:BlogEngine.Core.CommentHandlers.PostCommentRemoved(System.Object,System.EventArgs)">
            <summary>
            Handles the CommentRemoved event.
            </summary>
            <param name="sender">
            The source of the event.
            </param>
            <param name="e">
            The <see cref="T:System.ComponentModel.CancelEventArgs"/> instance containing the event data.
            </param>
        </member>
        <member name="M:BlogEngine.Core.CommentHandlers.RunCustomModerators(BlogEngine.Core.Comment)">
            <summary>
            The run custom moderators.
            </summary>
            <param name="comment">
            The comment.
            </param>
        </member>
        <member name="M:BlogEngine.Core.CommentHandlers.UpdateCustomFilter(System.String,System.Boolean)">
            <summary>
            The update custom filter.
            </summary>
            <param name="filter">
            The filter.
            </param>
            <param name="approved">
            The approved.
            </param>
        </member>
        <member name="T:BlogEngine.Core.DataStore.ExtensionSettings">
            <summary>
            Extension settings implementation
            </summary>
        </member>
        <member name="T:BlogEngine.Core.DataStore.SettingsBase">
            <summary>
            Base class for extension settings
            </summary>
        </member>
        <member name="M:BlogEngine.Core.DataStore.SettingsBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:BlogEngine.Core.DataStore.SettingsBase"/> class.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.DataStore.SettingsBase.GetSettings">
            <summary>
            Get settings object from data storage
            </summary>
            <returns>
            Stream representing extension object
            </returns>
        </member>
        <member name="M:BlogEngine.Core.DataStore.SettingsBase.SaveSettings(System.Object)">
            <summary>
            Saves setting object to data storage
            </summary>
            <param name="settings">
            Settings object
            </param>
            <returns>
            True if saved
            </returns>
        </member>
        <member name="P:BlogEngine.Core.DataStore.SettingsBase.ExType">
            <summary>
                Gets or sets the type of extension (extension, widget or theme)
            </summary>
        </member>
        <member name="P:BlogEngine.Core.DataStore.SettingsBase.SettingId">
            <summary>
                Gets or sets the Setting ID
            </summary>
        </member>
        <member name="P:BlogEngine.Core.DataStore.SettingsBase.SettingsBehavior">
            <summary>
                Gets or sets the Settings behavior
            </summary>
        </member>
        <member name="M:BlogEngine.Core.DataStore.ExtensionSettings.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:BlogEngine.Core.DataStore.ExtensionSettings"/> class.
            </summary>
            <param name="setId">The set id.</param>
        </member>
        <member name="T:BlogEngine.Core.DataStore.ExtensionSettingsBehavior">
            <summary>
            Incapsulates behavior for saving and retreaving
                extension settings
            </summary>
        </member>
        <member name="T:BlogEngine.Core.DataStore.ISettingsBehavior">
            <summary>
            Public interfaces and enums for DataStore
                ISettingsBehavior incapsulates saving and retreaving
                settings objects to and from data storage
            </summary>
        </member>
        <member name="M:BlogEngine.Core.DataStore.ISettingsBehavior.GetSettings(BlogEngine.Core.DataStore.ExtensionType,System.String)">
            <summary>
            Get settings interface
            </summary>
            <param name="extensionType">
            Extension Type
            </param>
            <param name="extensionId">
            Extension Id
            </param>
            <returns>
            Settings object
            </returns>
        </member>
        <member name="M:BlogEngine.Core.DataStore.ISettingsBehavior.SaveSettings(BlogEngine.Core.DataStore.ExtensionType,System.String,System.Object)">
            <summary>
            Save settings interface
            </summary>
            <param name="extensionType">
            Extensio Type
            </param>
            <param name="extensionId">
            Extensio Id
            </param>
            <param name="settings">
            Settings object
            </param>
            <returns>
            True if saved
            </returns>
        </member>
        <member name="M:BlogEngine.Core.DataStore.ExtensionSettingsBehavior.GetSettings(BlogEngine.Core.DataStore.ExtensionType,System.String)">
            <summary>
            Retreaves extension object from database or file system
            </summary>
            <param name="extensionType">
            Extension Type
            </param>
            <param name="extensionId">
            Extension ID
            </param>
            <returns>
            Extension object as Stream
            </returns>
        </member>
        <member name="M:BlogEngine.Core.DataStore.ExtensionSettingsBehavior.SaveSettings(BlogEngine.Core.DataStore.ExtensionType,System.String,System.Object)">
            <summary>
            Saves extension to database or file system
            </summary>
            <param name="extensionType">
            Extension Type
            </param>
            <param name="extensionId">
            Extension ID
            </param>
            <param name="settings">
            Extension object
            </param>
            <returns>
            True if saved
            </returns>
        </member>
        <member name="T:BlogEngine.Core.DataStore.ExtensionType">
            <summary>
            Type of extension
            </summary>
        </member>
        <member name="F:BlogEngine.Core.DataStore.ExtensionType.Extension">
            <summary>
                An Extension.
            </summary>
        </member>
        <member name="F:BlogEngine.Core.DataStore.ExtensionType.Widget">
            <summary>
                A Widget Extension.
            </summary>
        </member>
        <member name="F:BlogEngine.Core.DataStore.ExtensionType.Theme">
            <summary>
                A Theme Extension.
            </summary>
        </member>
        <member name="T:BlogEngine.Core.DataStore.SerializableStringDictionary">
            <summary>
            Serializable String Dictionary
            </summary>
        </member>
        <member name="M:BlogEngine.Core.DataStore.SerializableStringDictionary.GetSchema">
            <summary>
            This method is reserved and should not be used. When implementing the IXmlSerializable interface, you should return null (Nothing in Visual Basic) from this method, and instead, if specifying a custom schema is required, apply the <see cref="T:System.Xml.Serialization.XmlSchemaProviderAttribute"/> to the class.
            </summary>
            <returns>
            An <see cref="T:System.Xml.Schema.XmlSchema"/> that describes the XML representation of the object that is produced by the <see cref="M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)"/> method and consumed by the <see cref="M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)"/> method.
            </returns>
        </member>
        <member name="M:BlogEngine.Core.DataStore.SerializableStringDictionary.ReadXml(System.Xml.XmlReader)">
            <summary>
            Generates an object from its XML representation.
            </summary>
            <param name="reader">The <see cref="T:System.Xml.XmlReader"/> stream from which the object is deserialized.</param>
        </member>
        <member name="M:BlogEngine.Core.DataStore.SerializableStringDictionary.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Converts an object into its XML representation.
            </summary>
            <param name="writer">The <see cref="T:System.Xml.XmlWriter"/> stream to which the object is serialized.</param>
        </member>
        <member name="T:BlogEngine.Core.DataStore.StringDictionaryBehavior">
            <summary>
            The string dictionary behavior.
            </summary>
        </member>
        <member name="F:BlogEngine.Core.DataStore.StringDictionaryBehavior.Section">
            <summary>
            The section.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.DataStore.StringDictionaryBehavior.GetSettings(BlogEngine.Core.DataStore.ExtensionType,System.String)">
            <summary>
            Retreaves StringDictionary object from database or file system
            </summary>
            <param name="extensionType">
            Extension Type
            </param>
            <param name="extensionId">
            Extension Id
            </param>
            <returns>
            StringDictionary object as Stream
            </returns>
        </member>
        <member name="M:BlogEngine.Core.DataStore.StringDictionaryBehavior.SaveSettings(BlogEngine.Core.DataStore.ExtensionType,System.String,System.Object)">
            <summary>
            Saves String Dictionary to Data Store
            </summary>
            <param name="extensionType">
            Extension Type
            </param>
            <param name="extensionId">
            Extension Id
            </param>
            <param name="settings">
            StringDictionary settings
            </param>
            <returns>
            The save settings.
            </returns>
        </member>
        <member name="T:BlogEngine.Core.DataStore.WidgetSettings">
            <summary>
            WidgetSettings implementation
            </summary>
        </member>
        <member name="M:BlogEngine.Core.DataStore.WidgetSettings.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:BlogEngine.Core.DataStore.WidgetSettings"/> class.
            </summary>
            <param name="setId">
            The set id.
            </param>
        </member>
        <member name="T:BlogEngine.Core.DataStore.XmlDocumentBehavior">
            <summary>
            Class to encapsulate saving and retreaving 
                XML documents to and from data storage
            </summary>
        </member>
        <member name="F:BlogEngine.Core.DataStore.XmlDocumentBehavior.Section">
            <summary>
                The _section.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.DataStore.XmlDocumentBehavior.GetSettings(BlogEngine.Core.DataStore.ExtensionType,System.String)">
            <summary>
            Gets settings from data store
            </summary>
            <param name="extensionType">
            Extension Type
            </param>
            <param name="extensionId">
            Extension ID
            </param>
            <returns>
            Settings as Stream
            </returns>
        </member>
        <member name="M:BlogEngine.Core.DataStore.XmlDocumentBehavior.SaveSettings(BlogEngine.Core.DataStore.ExtensionType,System.String,System.Object)">
            <summary>
            Saves XML document to data storage
            </summary>
            <param name="extensionType">
            Extension Type
            </param>
            <param name="extensionId">
            Extension ID
            </param>
            <param name="settings">
            Settings as XML document
            </param>
            <returns>
            True if saved
            </returns>
        </member>
        <member name="T:BlogEngine.Core.DataStore.WidgetData">
            <summary>
            Wrap around xml document
            </summary>
        </member>
        <member name="M:BlogEngine.Core.DataStore.WidgetData.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:BlogEngine.Core.DataStore.WidgetData"/> class.
            </summary>
        </member>
        <member name="P:BlogEngine.Core.DataStore.WidgetData.Settings">
            <summary>
                Gets or sets the settings.
            </summary>
            <value>The settings.</value>
        </member>
        <member name="T:BlogEngine.Core.ICustomFilter">
            <summary>
            An interface implemented by anti-spam 
                services like Waegis, Akismet etc.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.ICustomFilter.Check(BlogEngine.Core.Comment)">
            <summary>
            Check if comment is spam
            </summary>
            <param name="comment">
            BlogEngine comment
            </param>
            <returns>
            True if comment is spam
            </returns>
        </member>
        <member name="M:BlogEngine.Core.ICustomFilter.Initialize">
            <summary>
            Initializes anti-spam service
            </summary>
            <returns>
            True if service online and credentials validated
            </returns>
        </member>
        <member name="M:BlogEngine.Core.ICustomFilter.Report(BlogEngine.Core.Comment)">
            <summary>
            Report mistakes back to service
            </summary>
            <param name="comment">
            BlogEngine comment
            </param>
        </member>
        <member name="P:BlogEngine.Core.ICustomFilter.FallThrough">
            <summary>
                Gets a value indicating whether the comment should be passed to
                the next custom filter
            </summary>
            <returns>True if next filter should run</returns>
        </member>
        <member name="T:BlogEngine.Core.Providers.DbBlogProvider">
            <summary>
            Generic Database BlogProvider
            </summary>
        </member>
        <member name="F:BlogEngine.Core.Providers.DbBlogProvider.connStringName">
            <summary>
            The conn string name.
            </summary>
        </member>
        <member name="F:BlogEngine.Core.Providers.DbBlogProvider.parmPrefix">
            <summary>
            The parm prefix.
            </summary>
        </member>
        <member name="F:BlogEngine.Core.Providers.DbBlogProvider.tablePrefix">
            <summary>
            The table prefix.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Providers.DbBlogProvider.DeleteBlogRollItem(BlogEngine.Core.BlogRollItem)">
            <summary>
            Deletes a BlogRoll from the database
            </summary>
            <param name="blogRollItem">
            The blog Roll Item.
            </param>
        </member>
        <member name="M:BlogEngine.Core.Providers.DbBlogProvider.DeleteBlogStorageContainer(BlogEngine.Core.Blog)">
            <summary>
            Deletes the blog's storage container.
            </summary>
            <param name="blog">
            The blog.
            </param>
        </member>
        <member name="M:BlogEngine.Core.Providers.DbBlogProvider.DeleteBlog(BlogEngine.Core.Blog)">
            <summary>
            Deletes a Blog from the database
            </summary>
            <param name="blog">
            The blog.
            </param>
        </member>
        <member name="M:BlogEngine.Core.Providers.DbBlogProvider.DeleteCategory(BlogEngine.Core.Category)">
            <summary>
            Deletes a category from the database
            </summary>
            <param name="category">
            category to be removed
            </param>
        </member>
        <member name="M:BlogEngine.Core.Providers.DbBlogProvider.DeletePage(BlogEngine.Core.Page)">
            <summary>
            Deletes a page from the database
            </summary>
            <param name="page">
            page to be deleted
            </param>
        </member>
        <member name="M:BlogEngine.Core.Providers.DbBlogProvider.DeletePost(BlogEngine.Core.Post)">
            <summary>
            Deletes a post in the database
            </summary>
            <param name="post">
            post to delete
            </param>
        </member>
        <member name="M:BlogEngine.Core.Providers.DbBlogProvider.FillBlogRoll">
            <summary>
            Gets all BlogRolls in database
            </summary>
            <returns>
            List of BlogRolls
            </returns>
        </member>
        <member name="M:BlogEngine.Core.Providers.DbBlogProvider.FillBlogs">
            <summary>
            Gets all Blogs in database
            </summary>
            <returns>
            List of Blogs
            </returns>
        </member>
        <member name="M:BlogEngine.Core.Providers.DbBlogProvider.FillCategories(BlogEngine.Core.Blog)">
            <summary>
            Gets all categories in database
            </summary>
            <returns>
            List of categories
            </returns>
        </member>
        <member name="M:BlogEngine.Core.Providers.DbBlogProvider.FillPages">
            <summary>
            Gets all pages in database
            </summary>
            <returns>
            List of pages
            </returns>
        </member>
        <member name="M:BlogEngine.Core.Providers.DbBlogProvider.FillPosts">
            <summary>
            Gets all post from the database
            </summary>
            <returns>
            List of posts
            </returns>
        </member>
        <member name="M:BlogEngine.Core.Providers.DbBlogProvider.FillReferrers">
            <summary>
            Gets all Referrers from the database.
            </summary>
            <returns>
            List of Referrers.
            </returns>
        </member>
        <member name="M:BlogEngine.Core.Providers.DbBlogProvider.FillRights">
            <summary>
            Returns a dictionary of right names and the roles associated with them.
            </summary>
            <returns></returns>
        </member>
        <member name="M:BlogEngine.Core.Providers.DbBlogProvider.Initialize(System.String,System.Collections.Specialized.NameValueCollection)">
            <summary>
            Initializes the provider
            </summary>
            <param name="name">
            Configuration name
            </param>
            <param name="config">
            Configuration settings
            </param>
        </member>
        <member name="M:BlogEngine.Core.Providers.DbBlogProvider.InsertBlogRollItem(BlogEngine.Core.BlogRollItem)">
            <summary>
            Adds a new BlogRoll to the database.
            </summary>
            <param name="blogRollItem">
            The blog Roll Item.
            </param>
        </member>
        <member name="M:BlogEngine.Core.Providers.DbBlogProvider.InsertBlog(BlogEngine.Core.Blog)">
            <summary>
            Adds a new blog to the database.
            </summary>
            <param name="blog">
            The blog.
            </param>
        </member>
        <member name="M:BlogEngine.Core.Providers.DbBlogProvider.InsertCategory(BlogEngine.Core.Category)">
            <summary>
            Adds a new category to the database
            </summary>
            <param name="category">
            category to add
            </param>
        </member>
        <member name="M:BlogEngine.Core.Providers.DbBlogProvider.InsertPage(BlogEngine.Core.Page)">
            <summary>
            Adds a page to the database
            </summary>
            <param name="page">
            page to be added
            </param>
        </member>
        <member name="M:BlogEngine.Core.Providers.DbBlogProvider.InsertPost(BlogEngine.Core.Post)">
            <summary>
            Adds a new post to database
            </summary>
            <param name="post">
            The new post.
            </param>
        </member>
        <member name="M:BlogEngine.Core.Providers.DbBlogProvider.InsertReferrer(BlogEngine.Core.Referrer)">
            <summary>
            Adds a new Referrer to the database.
            </summary>
            <param name="referrer">
            Referrer to add.
            </param>
        </member>
        <member name="M:BlogEngine.Core.Providers.DbBlogProvider.LoadFromDataStore(BlogEngine.Core.DataStore.ExtensionType,System.String)">
            <summary>
            Load user data from DataStore
            </summary>
            <param name="extensionType">
            type of info
            </param>
            <param name="extensionId">
            id of info
            </param>
            <returns>
            stream of detail data
            </returns>
        </member>
        <member name="M:BlogEngine.Core.Providers.DbBlogProvider.LoadPingServices">
            <summary>
            Gets the PingServices from the database
            </summary>
            <returns>
            collection of PingServices
            </returns>
        </member>
        <member name="M:BlogEngine.Core.Providers.DbBlogProvider.LoadSettings(BlogEngine.Core.Blog)">
            <summary>
            Gets the settings from the database
            </summary>
            <returns>
            dictionary of settings
            </returns>
        </member>
        <member name="M:BlogEngine.Core.Providers.DbBlogProvider.LoadStopWords">
            <summary>
            Get stopwords from the database
            </summary>
            <returns>
            collection of stopwords
            </returns>
        </member>
        <member name="M:BlogEngine.Core.Providers.DbBlogProvider.RemoveFromDataStore(BlogEngine.Core.DataStore.ExtensionType,System.String)">
            <summary>
            Deletes an item from the dataStore
            </summary>
            <param name="extensionType">
            type of item
            </param>
            <param name="extensionId">
            id of item
            </param>
        </member>
        <member name="M:BlogEngine.Core.Providers.DbBlogProvider.SavePingServices(System.Collections.Specialized.StringCollection)">
            <summary>
            Saves the PingServices to the database
            </summary>
            <param name="services">
            collection of PingServices
            </param>
        </member>
        <member name="M:BlogEngine.Core.Providers.DbBlogProvider.SaveRights(System.Collections.Generic.IEnumerable{BlogEngine.Core.Right})">
            <summary>
            Saves the current BlogEngine rights.
            </summary>
            <param name="rights"></param>
        </member>
        <member name="M:BlogEngine.Core.Providers.DbBlogProvider.SaveSettings(System.Collections.Specialized.StringDictionary)">
            <summary>
            Saves the settings to the database
            </summary>
            <param name="settings">
            dictionary of settings
            </param>
        </member>
        <member name="M:BlogEngine.Core.Providers.DbBlogProvider.SaveToDataStore(BlogEngine.Core.DataStore.ExtensionType,System.String,System.Object)">
            <summary>
            Save to DataStore
            </summary>
            <param name="extensionType">
            type of info
            </param>
            <param name="extensionId">
            id of info
            </param>
            <param name="settings">
            data of info
            </param>
        </member>
        <member name="M:BlogEngine.Core.Providers.DbBlogProvider.SelectBlogRollItem(System.Guid)">
            <summary>
            Gets a BlogRoll based on a Guid.
            </summary>
            <param name="id">
            The BlogRoll's Guid.
            </param>
            <returns>
            A matching BlogRoll
            </returns>
        </member>
        <member name="M:BlogEngine.Core.Providers.DbBlogProvider.SelectBlog(System.Guid)">
            <summary>
            Gets a Blog based on a Guid.
            </summary>
            <param name="id">
            The Blog's Guid.
            </param>
            <returns>
            A matching Blog
            </returns>
        </member>
        <member name="M:BlogEngine.Core.Providers.DbBlogProvider.SelectCategory(System.Guid)">
            <summary>
            Returns a category
            </summary>
            <param name="id">Id of category to return</param>
            <returns>A category.</returns>
        </member>
        <member name="M:BlogEngine.Core.Providers.DbBlogProvider.SelectPage(System.Guid)">
            <summary>
            Returns a page for given ID
            </summary>
            <param name="id">
            ID of page to return
            </param>
            <returns>
            selected page
            </returns>
        </member>
        <member name="M:BlogEngine.Core.Providers.DbBlogProvider.SelectPost(System.Guid)">
            <summary>
            Returns a Post based on Id.
            </summary>
            <param name="id">
            The Post ID.
            </param>
            <returns>
            The Post..
            </returns>
        </member>
        <member name="M:BlogEngine.Core.Providers.DbBlogProvider.SelectReferrer(System.Guid)">
            <summary>
            Gets a Referrer based on an Id.
            </summary>
            <param name="id">
            The Referrer Id.
            </param>
            <returns>
            A matching Referrer
            </returns>
        </member>
        <member name="M:BlogEngine.Core.Providers.DbBlogProvider.SetupBlogFromExistingBlog(BlogEngine.Core.Blog,BlogEngine.Core.Blog)">
            <summary>
            Sets up the required storage files/tables for a new Blog instance, from an existing blog instance.
            </summary>
            <param name="existingBlog">
            The existing blog to copy from.
            </param>
            <param name="newBlog">
            The new blog to copy to.
            </param>
        </member>
        <member name="M:BlogEngine.Core.Providers.DbBlogProvider.SetupNewBlog(BlogEngine.Core.Blog,System.String,System.String,System.String)">
            <summary>
            Setup new blog from scratch
            </summary>
            <param name="newBlog">New blog</param>
            <param name="userName">User name</param>
            <param name="email">Email</param>
            <param name="password">Password</param>
            <returns>True if successful</returns>
        </member>
        <member name="M:BlogEngine.Core.Providers.DbBlogProvider.UpdateBlogRollItem(BlogEngine.Core.BlogRollItem)">
            <summary>
            Saves an existing BlogRoll to the database
            </summary>
            <param name="blogRollItem">
            BlogRoll to be saved
            </param>
        </member>
        <member name="M:BlogEngine.Core.Providers.DbBlogProvider.UpdateBlog(BlogEngine.Core.Blog)">
            <summary>
            Saves an existing Blog to the database
            </summary>
            <param name="blog">
            Blog to be saved
            </param>
        </member>
        <member name="M:BlogEngine.Core.Providers.DbBlogProvider.UpdateCategory(BlogEngine.Core.Category)">
            <summary>
            Saves an existing category to the database
            </summary>
            <param name="category">
            category to be saved
            </param>
        </member>
        <member name="M:BlogEngine.Core.Providers.DbBlogProvider.UpdatePage(BlogEngine.Core.Page)">
            <summary>
            Saves an existing page in the database
            </summary>
            <param name="page">
            page to be saved
            </param>
        </member>
        <member name="M:BlogEngine.Core.Providers.DbBlogProvider.UpdatePost(BlogEngine.Core.Post)">
            <summary>
            Saves and existing post in the database
            </summary>
            <param name="post">
            post to be saved
            </param>
        </member>
        <member name="M:BlogEngine.Core.Providers.DbBlogProvider.UpdateReferrer(BlogEngine.Core.Referrer)">
            <summary>
            Saves an existing Referrer to the database.
            </summary>
            <param name="referrer">
            Referrer to be saved.
            </param>
        </member>
        <member name="M:BlogEngine.Core.Providers.DbBlogProvider.FillProfiles">
            <summary>
            Return collection for AuthorProfiles from database
            </summary>
            <returns>
            List of AuthorProfile
            </returns>
        </member>
        <member name="M:BlogEngine.Core.Providers.DbBlogProvider.SelectProfile(System.String)">
            <summary>
            Loads AuthorProfile from database
            </summary>
            <param name="id">The user name.</param>
            <returns>An AuthorProfile.</returns>
        </member>
        <member name="M:BlogEngine.Core.Providers.DbBlogProvider.InsertProfile(BlogEngine.Core.AuthorProfile)">
            <summary>
            Adds AuthorProfile to database
            </summary>
            <param name="profile">An AuthorProfile.</param>
        </member>
        <member name="M:BlogEngine.Core.Providers.DbBlogProvider.UpdateProfile(BlogEngine.Core.AuthorProfile)">
            <summary>
            Updates AuthorProfile to database
            </summary>
            <param name="profile">
            An AuthorProfile.
            </param>
        </member>
        <member name="M:BlogEngine.Core.Providers.DbBlogProvider.DeleteProfile(BlogEngine.Core.AuthorProfile)">
            <summary>
            Remove AuthorProfile from database
            </summary>
            <param name="profile">An AuthorProfile.</param>
        </member>
        <member name="M:BlogEngine.Core.Providers.DbBlogProvider.SavePackage(BlogEngine.Core.Packaging.InstalledPackage)">
            <summary>
            Log of all installed packages
            </summary>
            <param name="package">Intalled package</param>
        </member>
        <member name="M:BlogEngine.Core.Providers.DbBlogProvider.SavePackageFiles(System.Collections.Generic.List{BlogEngine.Core.Packaging.PackageFile})">
            <summary>
            Log of all files for installed package
            </summary>
            <param name="packageFiles">List of intalled package files</param>
        </member>
        <member name="M:BlogEngine.Core.Providers.DbBlogProvider.FillPackageFiles(System.String)">
            <summary>
            Gets list of files for installed package
            </summary>
            <param name="packageId">Package ID</param>
            <returns>List of files for installed package</returns>
        </member>
        <member name="M:BlogEngine.Core.Providers.DbBlogProvider.FillPackages">
            <summary>
            Gets all installed from gallery packages
            </summary>
            <returns>List of installed packages</returns>
        </member>
        <member name="M:BlogEngine.Core.Providers.DbBlogProvider.DeletePackage(System.String)">
            <summary>
            Should delete package and remove all package files
            </summary>
            <param name="packageId">Package ID</param>
        </member>
        <member name="M:BlogEngine.Core.Providers.DbBlogProvider.SaveQuickNote(BlogEngine.Core.Notes.QuickNote)">
            <summary>
            Save quick note
            </summary>
            <param name="note">Quick note</param>
        </member>
        <member name="M:BlogEngine.Core.Providers.DbBlogProvider.SaveQuickSetting(BlogEngine.Core.Notes.QuickSetting)">
            <summary>
            Save quick setting
            </summary>
            <param name="setting">Quick setting</param>
        </member>
        <member name="M:BlogEngine.Core.Providers.DbBlogProvider.FillQuickNotes(System.String)">
            <summary>
            Fill quick notes
            </summary>
            <param name="userId">User ID</param>
            <returns>List of user notes</returns>
        </member>
        <member name="M:BlogEngine.Core.Providers.DbBlogProvider.FillQuickSettings(System.String)">
            <summary>
            Fill quick settings
            </summary>
            <param name="userId">User ID</param>
            <returns>List of user settings</returns>
        </member>
        <member name="M:BlogEngine.Core.Providers.DbBlogProvider.DeleteQuickNote(System.Guid)">
            <summary>
            Delete quick note
            </summary>
            <param name="noteId">Note ID</param>
        </member>
        <member name="M:BlogEngine.Core.Providers.DbBlogProvider.FormatParamName(System.String)">
            <summary>
            Returns a formatted parameter name to include this DbBlogProvider instance's paramPrefix.
            </summary>
            <param name="parameterName"></param>
            <returns></returns>
        </member>
        <member name="M:BlogEngine.Core.Providers.DbBlogProvider.UpdateCategories(BlogEngine.Core.Post,BlogEngine.Core.Providers.DbConnectionHelper)">
            <summary>
            The update categories.
            </summary>
            <param name="post">
            The post to update.
            </param>
            <param name="conn">
            The connection.
            </param>
        </member>
        <member name="M:BlogEngine.Core.Providers.DbBlogProvider.UpdateComments(BlogEngine.Core.Post,BlogEngine.Core.Providers.DbConnectionHelper)">
            <summary>
            The update comments.
            </summary>
            <param name="post">
            The post to update.
            </param>
            <param name="conn">
            The connection.
            </param>
        </member>
        <member name="M:BlogEngine.Core.Providers.DbBlogProvider.UpdateNotify(BlogEngine.Core.Post,BlogEngine.Core.Providers.DbConnectionHelper)">
            <summary>
            The update notify.
            </summary>
            <param name="post">
            The post to update.
            </param>
            <param name="conn">
            The connection.
            </param>
        </member>
        <member name="M:BlogEngine.Core.Providers.DbBlogProvider.UpdateTags(BlogEngine.Core.Post,BlogEngine.Core.Providers.DbConnectionHelper)">
            <summary>
            The update tags.
            </summary>
            <param name="post">
            The post to update.
            </param>
            <param name="conn">
            The connection
            </param>
        </member>
        <member name="M:BlogEngine.Core.Providers.DbBlogProvider.AddBlogRollParametersToCommand(BlogEngine.Core.BlogRollItem,BlogEngine.Core.Providers.DbConnectionHelper,System.Data.Common.DbCommand)">
            <summary>
            The add blog roll parameters to command.
            </summary>
            <param name="blogRollItem">
            The blog roll item.
            </param>
            <param name="conn">
            The connection.
            </param>
            <param name="cmd">
            The command.
            </param>
        </member>
        <member name="M:BlogEngine.Core.Providers.DbBlogProvider.AddBlogParametersToCommand(BlogEngine.Core.Blog,BlogEngine.Core.Providers.DbConnectionHelper,System.Data.Common.DbCommand)">
            <summary>
            Adds blog parameters to command.
            </summary>
            <param name="blog">
            The blog.
            </param>
            <param name="conn">
            The connection.
            </param>
            <param name="cmd">
            The command.
            </param>
        </member>
        <member name="M:BlogEngine.Core.Providers.DbBlogProvider.AddReferrersParametersToCommand(BlogEngine.Core.Referrer,BlogEngine.Core.Providers.DbConnectionHelper,System.Data.Common.DbCommand)">
            <summary>
            The add referrers parameters to command.
            </summary>
            <param name="referrer">
            The referrer.
            </param>
            <param name="conn">
            The connection.
            </param>
            <param name="cmd">
            The command.
            </param>
        </member>
        <member name="M:BlogEngine.Core.Providers.DbBlogProvider.DeleteOldReferrers">
            <summary>
            The delete old referrers.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Providers.DbBlogProvider.CreateConnection">
            <summary>
            Creates a new DbConnectionHelper for this DbBlogProvider instance.
            </summary>
            <returns></returns>
        </member>
        <member name="T:BlogEngine.Core.Providers.DbMembershipProvider">
            <summary>
            Generic Db Membership Provider
            </summary>
        </member>
        <member name="F:BlogEngine.Core.Providers.DbMembershipProvider.applicationName">
            <summary>
            The application name.
            </summary>
        </member>
        <member name="F:BlogEngine.Core.Providers.DbMembershipProvider.connStringName">
            <summary>
            The conn string name.
            </summary>
        </member>
        <member name="F:BlogEngine.Core.Providers.DbMembershipProvider.parmPrefix">
            <summary>
            The parm prefix.
            </summary>
        </member>
        <member name="F:BlogEngine.Core.Providers.DbMembershipProvider.passwordFormat">
            <summary>
            The password format.
            </summary>
        </member>
        <member name="F:BlogEngine.Core.Providers.DbMembershipProvider.tablePrefix">
            <summary>
            The table prefix.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Providers.DbMembershipProvider.ChangePassword(System.String,System.String,System.String)">
            <summary>
            Change the password if the old password matches what is stored
            </summary>
            <param name="username">The user to update the password for.</param>
            <param name="oldPassword">The current password for the specified user.</param>
            <param name="newPassword">The new password for the specified user.</param>
            <returns>The change password.</returns>
        </member>
        <member name="M:BlogEngine.Core.Providers.DbMembershipProvider.ChangePasswordQuestionAndAnswer(System.String,System.String,System.String,System.String)">
            <summary>
            Not implemented
            </summary>
            <param name="username">The user to change the password question and answer for.</param>
            <param name="password">The password for the specified user.</param>
            <param name="newPasswordQuestion">The new password question for the specified user.</param>
            <param name="newPasswordAnswer">The new password answer for the specified user.</param>
            <returns>The change password question and answer.</returns>
        </member>
        <member name="M:BlogEngine.Core.Providers.DbMembershipProvider.CreateUser(System.String,System.String,System.String,System.String,System.String,System.Boolean,System.Object,System.Web.Security.MembershipCreateStatus@)">
            <summary>
            Add new user to database
            </summary>
            <param name="username">The user name for the new user.</param>
            <param name="password">The password for the new user.</param>
            <param name="email">The e-mail address for the new user.</param>
            <param name="passwordQuestion">The password question for the new user.</param>
            <param name="passwordAnswer">The password answer for the new user</param>
            <param name="approved">Whether or not the new user is approved to be validated.</param>
            <param name="providerUserKey">The unique identifier from the membership data source for the user.</param>
            <param name="status">A <see cref="T:System.Web.Security.MembershipCreateStatus"/> enumeration value indicating whether the user was created successfully.</param>
            <returns>
            A <see cref="T:System.Web.Security.MembershipUser"/> object populated with the information for the newly created user.
            </returns>
        </member>
        <member name="M:BlogEngine.Core.Providers.DbMembershipProvider.DeleteUser(System.String,System.Boolean)">
            <summary>
            Delete user from database
            </summary>
            <param name="username">The name of the user to delete.</param>
            <param name="deleteAllRelatedData">true to delete data related to the user from the database; false to leave data related to the user in the database.</param>
            <returns>The delete user.</returns>
        </member>
        <member name="M:BlogEngine.Core.Providers.DbMembershipProvider.FindUsersByEmail(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Not implemented
            </summary>
            <param name="emailToMatch">The e-mail address to search for.</param>
            <param name="pageIndex">The index of the page of results to return. <paramref name="pageIndex"/> is zero-based.</param>
            <param name="pageSize">The size of the page of results to return.</param>
            <param name="totalRecords">The total number of matched users.</param>
            <returns>
            A <see cref="T:System.Web.Security.MembershipUserCollection"/> collection that contains a page of <paramref name="pageSize"/><see cref="T:System.Web.Security.MembershipUser"/> objects beginning at the page specified by <paramref name="pageIndex"/>.
            </returns>
        </member>
        <member name="M:BlogEngine.Core.Providers.DbMembershipProvider.FindUsersByName(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Not implemented
            </summary>
            <param name="usernameToMatch">The user name to search for.</param>
            <param name="pageIndex">The index of the page of results to return. <paramref name="pageIndex"/> is zero-based.</param>
            <param name="pageSize">The size of the page of results to return.</param>
            <param name="totalRecords">The total number of matched users.</param>
            <returns>
            A <see cref="T:System.Web.Security.MembershipUserCollection"/> collection that contains a page of <paramref name="pageSize"/><see cref="T:System.Web.Security.MembershipUser"/> objects beginning at the page specified by <paramref name="pageIndex"/>.
            </returns>
        </member>
        <member name="M:BlogEngine.Core.Providers.DbMembershipProvider.GetAllUsers(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Return all users in MembershipUserCollection
            </summary>
            <param name="pageIndex">The index of the page of results to return. <paramref name="pageIndex"/> is zero-based.</param>
            <param name="pageSize">The size of the page of results to return.</param>
            <param name="totalRecords">The total number of matched users.</param>
            <returns>
            A <see cref="T:System.Web.Security.MembershipUserCollection"/> collection that contains a page of <paramref name="pageSize"/><see cref="T:System.Web.Security.MembershipUser"/> objects beginning at the page specified by <paramref name="pageIndex"/>.
            </returns>
        </member>
        <member name="M:BlogEngine.Core.Providers.DbMembershipProvider.GetNumberOfUsersOnline">
            <summary>
            Not implemented
            </summary>
            <returns>
            The get number of users online.
            </returns>
        </member>
        <member name="M:BlogEngine.Core.Providers.DbMembershipProvider.GetPassword(System.String,System.String)">
            <summary>
            Not implemented
            </summary>
            <param name="username">The user to retrieve the password for.</param>
            <param name="answer">The password answer for the user.</param>
            <returns>The get password.</returns>
        </member>
        <member name="M:BlogEngine.Core.Providers.DbMembershipProvider.GetUser(System.Object,System.Boolean)">
            <summary>
            Gets user information from the data source based on the unique identifier for the membership user. Provides an option to update the last-activity date/time stamp for the user.
            </summary>
            <param name="providerUserKey">The unique identifier for the membership user to get information for.</param>
            <param name="userIsOnline">true to update the last-activity date/time stamp for the user; false to return user information without updating the last-activity date/time stamp for the user.</param>
            <returns>
            A <see cref="T:System.Web.Security.MembershipUser"/> object populated with the specified user's information from the data source.
            </returns>
        </member>
        <member name="M:BlogEngine.Core.Providers.DbMembershipProvider.GetUser(System.String,System.Boolean)">
            <summary>
            Gets information from the data source for a user. Provides an option to update the last-activity date/time stamp for the user.
            </summary>
            <param name="username">The name of the user to get information for.</param>
            <param name="userIsOnline">true to update the last-activity date/time stamp for the user; false to return user information without updating the last-activity date/time stamp for the user.</param>
            <returns>
            A <see cref="T:System.Web.Security.MembershipUser"/> object populated with the specified user's information from the data source.
            </returns>
        </member>
        <member name="M:BlogEngine.Core.Providers.DbMembershipProvider.GetUserNameByEmail(System.String)">
            <summary>
            Gets the user name associated with the specified e-mail address.
            </summary>
            <param name="email">The e-mail address to search for.</param>
            <returns>
            The user name associated with the specified e-mail address. If no match is found, return null.
            </returns>
        </member>
        <member name="M:BlogEngine.Core.Providers.DbMembershipProvider.Initialize(System.String,System.Collections.Specialized.NameValueCollection)">
            <summary>
            Initializes the provider
            </summary>
            <param name="name">
            Configuration name
            </param>
            <param name="config">
            Configuration settings
            </param>
        </member>
        <member name="M:BlogEngine.Core.Providers.DbMembershipProvider.ResetPassword(System.String,System.String)">
            <summary>
            Resets a user's password to a new, automatically generated password.
            </summary>
            <param name="username">The user to reset the password for.</param>
            <param name="answer">The password answer for the specified user.</param>
            <returns>The new password for the specified user.</returns>
        </member>
        <member name="M:BlogEngine.Core.Providers.DbMembershipProvider.UnlockUser(System.String)">
            <summary>
            Not implemented
            </summary>
            <param name="userName">The membership user whose lock status you want to clear.</param>
            <returns>The unlock user.</returns>
        </member>
        <member name="M:BlogEngine.Core.Providers.DbMembershipProvider.UpdateUser(System.Web.Security.MembershipUser)">
            <summary>
            Update User Data (not password)
            </summary>
            <param name="user">A <see cref="T:System.Web.Security.MembershipUser"/> object that represents the user to update and the updated information for the user.</param>
        </member>
        <member name="M:BlogEngine.Core.Providers.DbMembershipProvider.ValidateUser(System.String,System.String)">
            <summary>
            Check username and password
            </summary>
            <param name="username">The name of the user to validate.</param>
            <param name="password">The password for the specified user.</param>
            <returns>The validate user.</returns>
        </member>
        <member name="M:BlogEngine.Core.Providers.DbMembershipProvider.FormatParamName(System.String)">
            <summary>
            Returns a formatted parameter name to include this DbBlogProvider instance's paramPrefix.
            </summary>
            <param name="parameterName"></param>
            <returns></returns>
        </member>
        <member name="M:BlogEngine.Core.Providers.DbMembershipProvider.GetMembershipUser(System.String,System.String,System.DateTime)">
            <summary>
            Gets membership user.
            </summary>
            <param name="userName">
            The user name.
            </param>
            <param name="email">
            The email.
            </param>
            <param name="lastLogin">
            The last login.
            </param>
            <returns>
            A MembershipUser.
            </returns>
        </member>
        <member name="P:BlogEngine.Core.Providers.DbMembershipProvider.ApplicationName">
            <summary>
                Returns the application name as set in the web.config
                otherwise returns BlogEngine.  Set will throw an error.
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Providers.DbMembershipProvider.EnablePasswordReset">
            <summary>
                Hardcoded to false
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Providers.DbMembershipProvider.EnablePasswordRetrieval">
            <summary>
                Can password be retrieved via email?
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Providers.DbMembershipProvider.MaxInvalidPasswordAttempts">
            <summary>
                Hardcoded to 5
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Providers.DbMembershipProvider.MinRequiredNonAlphanumericCharacters">
            <summary>
                Hardcoded to 0
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Providers.DbMembershipProvider.MinRequiredPasswordLength">
            <summary>
                Hardcoded to 4
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Providers.DbMembershipProvider.PasswordAttemptWindow">
            <summary>
                Not implemented
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Providers.DbMembershipProvider.PasswordFormat">
            <summary>
                Password format (Clear or Hashed)
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Providers.DbMembershipProvider.PasswordStrengthRegularExpression">
            <summary>
                Not Implemented
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Providers.DbMembershipProvider.RequiresQuestionAndAnswer">
            <summary>
                Hardcoded to false
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Providers.DbMembershipProvider.RequiresUniqueEmail">
            <summary>
                Hardcoded to false
            </summary>
        </member>
        <member name="T:BlogEngine.Core.Providers.DbRoleProvider">
            <summary>
            Generic Db Role Provider
            </summary>
        </member>
        <member name="F:BlogEngine.Core.Providers.DbRoleProvider.applicationName">
            <summary>
            The application name.
            </summary>
        </member>
        <member name="F:BlogEngine.Core.Providers.DbRoleProvider.connStringName">
            <summary>
            The conn string name.
            </summary>
        </member>
        <member name="F:BlogEngine.Core.Providers.DbRoleProvider.parmPrefix">
            <summary>
            The parm prefix.
            </summary>
        </member>
        <member name="F:BlogEngine.Core.Providers.DbRoleProvider.tablePrefix">
            <summary>
            The table prefix.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Providers.DbRoleProvider.AddUsersToRoles(System.String[],System.String[])">
            <summary>
            Adds all users in user array to all roles in role array
            </summary>
            <param name="usernames">A string array of user names to be added to the specified roles.</param>
            <param name="roleNames">A string array of the role names to add the specified user names to.</param>
        </member>
        <member name="M:BlogEngine.Core.Providers.DbRoleProvider.CreateRole(System.String)">
            <summary>
            Adds a new role to the database
            </summary>
            <param name="roleName">The name of the role to create.</param>
        </member>
        <member name="M:BlogEngine.Core.Providers.DbRoleProvider.DeleteRole(System.String,System.Boolean)">
            <summary>
            Removes a role from database
            </summary>
            <param name="roleName">The name of the role to delete.</param>
            <param name="throwOnPopulatedRole">If true, throw an exception if <paramref name="roleName"/> has one or more members and do not delete <paramref name="roleName"/>.</param>
            <returns>The delete role.</returns>
        </member>
        <member name="M:BlogEngine.Core.Providers.DbRoleProvider.FindUsersInRole(System.String,System.String)">
            <summary>
            Returns all users in selected role with names that match usernameToMatch
            </summary>
            <param name="roleName">The role to search in.</param>
            <param name="usernameToMatch">The user name to search for.</param>
            <returns>
            A string array containing the names of all the users where the user name matches <paramref name="usernameToMatch"/> and the user is a member of the specified role.
            </returns>
        </member>
        <member name="M:BlogEngine.Core.Providers.DbRoleProvider.GetAllRoles">
            <summary>
            Returns array of all roles in database
            </summary>
            <returns>
            A string array containing the names of all the roles stored in the data source for the configured applicationName.
            </returns>
        </member>
        <member name="M:BlogEngine.Core.Providers.DbRoleProvider.GetRolesForUser(System.String)">
            <summary>
            Return an array of roles that user is in
            </summary>
            <param name="username">The user to return a list of roles for.</param>
            <returns>
            A string array containing the names of all the roles that the specified user is in for the configured applicationName.
            </returns>
        </member>
        <member name="M:BlogEngine.Core.Providers.DbRoleProvider.GetUsersInRole(System.String)">
            <summary>
            Returns array of users in selected role
            </summary>
            <param name="roleName">The name of the role to get the list of users for.</param>
            <returns>
            A string array containing the names of all the users who are members of the specified role for the configured applicationName.
            </returns>
        </member>
        <member name="M:BlogEngine.Core.Providers.DbRoleProvider.Initialize(System.String,System.Collections.Specialized.NameValueCollection)">
            <summary>
            Initializes the provider
            </summary>
            <param name="name">
            Configuration name
            </param>
            <param name="config">
            Configuration settings
            </param>
        </member>
        <member name="M:BlogEngine.Core.Providers.DbRoleProvider.IsUserInRole(System.String,System.String)">
            <summary>
            Check to see if user is in a role
            </summary>
            <param name="username">The user name to search for.</param>
            <param name="roleName">The role to search in.</param>
            <returns>The is user in role.</returns>
        </member>
        <member name="M:BlogEngine.Core.Providers.DbRoleProvider.RemoveUsersFromRoles(System.String[],System.String[])">
            <summary>
            Removes all users in user array from all roles in role array
            </summary>
            <param name="usernames">A string array of user names to be removed from the specified roles.</param>
            <param name="roleNames">A string array of role names to remove the specified user names from.</param>
        </member>
        <member name="M:BlogEngine.Core.Providers.DbRoleProvider.RoleExists(System.String)">
            <summary>
            Checks to see if role exists
            </summary>
            <param name="roleName">The name of the role to search for in the data source.</param>
            <returns>The role exists.</returns>
        </member>
        <member name="M:BlogEngine.Core.Providers.DbRoleProvider.FormatParamName(System.String)">
            <summary>
            Returns a formatted parameter name to include this DbRoleProvider instance's paramPrefix.
            </summary>
            <param name="parameterName"></param>
            <returns></returns>
        </member>
        <member name="P:BlogEngine.Core.Providers.DbRoleProvider.ApplicationName">
            <summary>
                Gets or sets the application name as set in the web.config
                otherwise returns BlogEngine.  Set will throw an error.
            </summary>
        </member>
        <member name="T:BlogEngine.Core.Providers.XmlRoleProvider">
            <summary>
            The xml role provider.
            </summary>
        </member>
        <member name="F:BlogEngine.Core.Providers.XmlRoleProvider.defaultRolesToAdd">
            <summary>
            The default roles to add.
            </summary>
        </member>
        <member name="F:BlogEngine.Core.Providers.XmlRoleProvider.roles">
            <summary>
            The roles.
            </summary>
        </member>
        <member name="F:BlogEngine.Core.Providers.XmlRoleProvider.userNames">
            <summary>
            The user names.
            </summary>
        </member>
        <member name="F:BlogEngine.Core.Providers.XmlRoleProvider.xmlFileName">
            <summary>
            The xml file name.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Providers.XmlRoleProvider.AddUsersToRoles(System.String[],System.String[])">
            <summary>
            Adds the specified user names to the specified roles for the configured applicationName.
            </summary>
            <param name="usernames">
            A string array of user names to be added to the specified roles. 
            </param>
            <param name="roleNames">
            A string array of the role names to add the specified user names to. 
            </param>
        </member>
        <member name="M:BlogEngine.Core.Providers.XmlRoleProvider.CreateRole(System.String)">
            <summary>
            Adds a new role to the data source for the configured applicationName.
            </summary>
            <param name="roleName">
            The name of the role to create.
            </param>
        </member>
        <member name="M:BlogEngine.Core.Providers.XmlRoleProvider.DeleteRole(System.String,System.Boolean)">
            <summary>
            Removes a role from the data source for the configured applicationName.
            </summary>
            <returns>
            true if the role was successfully deleted; otherwise, false.
            </returns>
            <param name="roleName">
            The name of the role to delete.
            </param>
            <param name="throwOnPopulatedRole">
            If true, throw an exception if roleName has one or more members and do not delete roleName.
            </param>
        </member>
        <member name="M:BlogEngine.Core.Providers.XmlRoleProvider.FindUsersInRole(System.String,System.String)">
            <summary>
            Gets an array of user names in a role where the user name contains the specified user name to match.
            </summary>
            <returns>
            A string array containing the names of all the users where the user name matches usernameToMatch and the user is a member of the specified role.
            </returns>
            <param name="roleName">
            The role to search in.
            </param>
            <param name="usernameToMatch">
            The user name to search for.
            </param>
        </member>
        <member name="M:BlogEngine.Core.Providers.XmlRoleProvider.GetAllRoles">
            <summary>
            Gets a list of all the roles for the configured applicationName.
            </summary>
            <returns>
            A string array containing the names of all the roles stored in the data source for the configured applicationName.
            </returns>
        </member>
        <member name="M:BlogEngine.Core.Providers.XmlRoleProvider.GetRolesForUser(System.String)">
            <summary>
            Gets a list of the roles that a specified user is in for the configured applicationName.
            </summary>
            <returns>
            A string array containing the names of all the roles that the specified user is in for the configured applicationName.
            </returns>
            <param name="username">
            The user to return a list of roles for.
            </param>
        </member>
        <member name="M:BlogEngine.Core.Providers.XmlRoleProvider.GetUsersInRole(System.String)">
            <summary>
            Gets a list of users in the specified role for the configured applicationName.
            </summary>
            <returns>
            A string array containing the names of all the users who are members of the specified role for the configured applicationName.
            </returns>
            <param name="roleName">
            The name of the role to get the list of users for. 
            </param>
        </member>
        <member name="M:BlogEngine.Core.Providers.XmlRoleProvider.Initialize(System.String,System.Collections.Specialized.NameValueCollection)">
            <summary>
            Initializes the provider.
            </summary>
            <param name="name">
            The friendly name of the provider.
            </param>
            <param name="config">
            A collection of the name/value pairs representing the provider-specific attributes specified in the configuration for this provider.
            </param>
            <exception cref="T:System.ArgumentNullException">
            The name of the provider is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            The name of the provider has a length of zero.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            An attempt is made to call <see cref="M:System.Configuration.Provider.ProviderBase.Initialize(System.string,System.Collections.Specialized.NameValueCollection)"/> on a provider after the provider has already been initialized.
            </exception>
        </member>
        <member name="M:BlogEngine.Core.Providers.XmlRoleProvider.IsUserInRole(System.String,System.String)">
            <summary>
            Gets a value indicating whether the specified user is in the specified role for the configured applicationName.
            </summary>
            <returns>
            true if the specified user is in the specified role for the configured applicationName; otherwise, false.
            </returns>
            <param name="username">
            The user name to search for.
            </param>
            <param name="roleName">
            The role to search in.
            </param>
        </member>
        <member name="M:BlogEngine.Core.Providers.XmlRoleProvider.RemoveUsersFromRoles(System.String[],System.String[])">
            <summary>
            Removes the specified user names from the specified roles for the configured applicationName.
            </summary>
            <param name="usernames">
            A string array of user names to be removed from the specified roles. 
            </param>
            <param name="roleNames">
            A string array of role names to remove the specified user names from. 
            </param>
        </member>
        <member name="M:BlogEngine.Core.Providers.XmlRoleProvider.RoleExists(System.String)">
            <summary>
            Gets a value indicating whether the specified role name already exists in the role data source for the configured applicationName.
            </summary>
            <returns>
            true if the role name already exists in the data source for the configured applicationName; otherwise, false.
            </returns>
            <param name="roleName">
            The name of the role to search for in the data source. 
            </param>
        </member>
        <member name="M:BlogEngine.Core.Providers.XmlRoleProvider.Save">
            <summary>
            Saves this instance.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Providers.XmlRoleProvider.RemoveItemFromList(System.Collections.Generic.ICollection{System.String},System.String)">
            <summary>
            The remove item from list.
            </summary>
            <param name="list">
            The list of string.
            </param>
            <param name="item">
            The item of string.
            </param>
        </member>
        <member name="M:BlogEngine.Core.Providers.XmlRoleProvider.ReadMembershipDataStore">
            <summary>
            Only so we can add users to the adminstrators role.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Providers.XmlRoleProvider.ReadRoleDataStore">
            <summary>
            Builds the internal cache of users.
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Providers.XmlRoleProvider.ApplicationName">
            <summary>
                Gets or sets the name of the application to store and retrieve role information for.
            </summary>
            <returns>
                The name of the application to store and retrieve role information for.
            </returns>
        </member>
        <member name="T:BlogEngine.Core.Referrer">
            <summary>
            Referrers are web sites that users followed to get to your blog.
            </summary>
        </member>
        <member name="F:BlogEngine.Core.Referrer.SyncRoot">
            <summary>
            The sync root.
            </summary>
        </member>
        <member name="F:BlogEngine.Core.Referrer.referrers">
            <summary>
            The referrers.
            </summary>
        </member>
        <member name="F:BlogEngine.Core.Referrer.referrersByDay">
            <summary>
            The referrers by day.
            </summary>
        </member>
        <member name="F:BlogEngine.Core.Referrer.count">
            <summary>
            The count.
            </summary>
        </member>
        <member name="F:BlogEngine.Core.Referrer.day">
            <summary>
            The day of the DateTime.
            </summary>
        </member>
        <member name="F:BlogEngine.Core.Referrer.possibleSpam">
            <summary>
            The possible spam.
            </summary>
        </member>
        <member name="F:BlogEngine.Core.Referrer.referrer">
            <summary>
            The referrer.
            </summary>
        </member>
        <member name="F:BlogEngine.Core.Referrer.url">
            <summary>
            The url Uri.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Referrer.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:BlogEngine.Core.Referrer"/> class.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Referrer.#ctor(System.Uri)">
            <summary>
            Initializes a new instance of the <see cref="T:BlogEngine.Core.Referrer"/> class.
            </summary>
            <param name="referrer">
            The ReferrerUrl for the Referrer.
            </param>
        </member>
        <member name="M:BlogEngine.Core.Referrer.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="M:BlogEngine.Core.Referrer.CompareTo(BlogEngine.Core.Referrer)">
            <summary>
            Compares the current object with another object of the same type.
            </summary>
            <param name="other">
            An object to compare with this object.
            </param>
            <returns>
            A 32-bit signed integer that indicates the relative order of the objects being compared. 
                The return value has the following meanings: Value Meaning Less than zero This object is 
                less than the other parameter.Zero This object is equal to other. Greater than zero This object is greater than other.
            </returns>
        </member>
        <member name="M:BlogEngine.Core.Referrer.DataDelete">
            <summary>
            Deletes the object from the data store.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Referrer.DataInsert">
            <summary>
            Inserts a new object to the data store.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Referrer.DataSelect(System.Guid)">
            <summary>
            Retrieves the object from the data store and populates it.
            </summary>
            <param name="id">
            The unique identifier of the object.
            </param>
            <returns>
            The object that was selected from the data store.
            </returns>
        </member>
        <member name="M:BlogEngine.Core.Referrer.DataUpdate">
            <summary>
            Updates the object in its data store.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Referrer.ValidationRules">
            <summary>
            Reinforces the business rules by adding additional rules to the
                broken rules collection.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Referrer.AddReferrer(BlogEngine.Core.Referrer)">
            <summary>
            The add referrer.
            </summary>
            <param name="referrer">
            The referrer.
            </param>
        </member>
        <member name="M:BlogEngine.Core.Referrer.ParseReferrers">
            <summary>
            The parse referrers.
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Referrer.Referrers">
            <summary>
                Gets all of the Referrers from the data store.
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Referrer.ReferrersByDay">
            <summary>
                Gets an automatically maintained Dictionary of Referrers separated by Day.
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Referrer.Count">
            <summary>
                Gets or sets the Count of the object.
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Referrer.Day">
            <summary>
                Gets or sets the Day of the object.
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Referrer.PossibleSpam">
            <summary>
                Gets or sets a value indicating whether the referrer is possibly spam.
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Referrer.ReferrerUrl">
            <summary>
                Gets or sets the referrer address of the object.
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Referrer.Url">
            <summary>
                Gets or sets the referrer Url of the object.
            </summary>
        </member>
        <member name="T:BlogEngine.Core.Role">
            <summary>
            The role class.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Role.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:BlogEngine.Core.Role"/> class.
            </summary>
            <param name="name">
            A name of the role.
            </param>
        </member>
        <member name="M:BlogEngine.Core.Role.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:BlogEngine.Core.Role"/> class.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Role.#ctor(System.String,System.Collections.Generic.List{System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:BlogEngine.Core.Role"/> class.
            </summary>
            <param name="name">
            A name of the role.
            </param>
            <param name="userNames">
            A list of users in role.
            </param>
        </member>
        <member name="P:BlogEngine.Core.Role.Name">
            <summary>
                Gets or sets the name.
            </summary>
            <value>The name of the role.</value>
        </member>
        <member name="P:BlogEngine.Core.Role.Users">
            <summary>
                Gets the users.
            </summary>
            <value>The users.</value>
        </member>
        <member name="T:BlogEngine.Core.SyndicationGenerator">
            <summary>
            Generates syndication feeds for blog entities.
            </summary>
        </member>
        <member name="F:BlogEngine.Core.SyndicationGenerator.GeneratorName">
            <summary>
                Private member to hold the name of the syndication generation utility.
            </summary>
        </member>
        <member name="F:BlogEngine.Core.SyndicationGenerator.GeneratorUri">
            <summary>
                Private member to hold the URI of the syndication generation utility.
            </summary>
        </member>
        <member name="F:BlogEngine.Core.SyndicationGenerator.GeneratorVersion">
            <summary>
                Private member to hold the version of the syndication generation utility.
            </summary>
        </member>
        <member name="F:BlogEngine.Core.SyndicationGenerator.fileExists">
            <summary>
            Whether the file exists.
            </summary>
        </member>
        <member name="F:BlogEngine.Core.SyndicationGenerator.fileSize">
            <summary>
            The file size.
            </summary>
        </member>
        <member name="F:BlogEngine.Core.SyndicationGenerator.xmlNamespaces">
            <summary>
                Private member to hold a collection of the XML namespaces that define supported syndication extensions.
            </summary>
        </member>
        <member name="F:BlogEngine.Core.SyndicationGenerator.blogCategories">
            <summary>
                Private member to hold a collection of <see cref="T:BlogEngine.Core.Category"/> objects used to categorize the web log content.
            </summary>
        </member>
        <member name="F:BlogEngine.Core.SyndicationGenerator.blogSettings">
            <summary>
                Private member to hold the <see cref="T:BlogEngine.Core.BlogSettings"/> to use when generating syndication results.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.SyndicationGenerator.#ctor(BlogEngine.Core.BlogSettings,System.Collections.Generic.List{BlogEngine.Core.Category})">
            <summary>
            Initializes a new instance of the <see cref="T:BlogEngine.Core.SyndicationGenerator"/> class using the supplied <see cref="T:BlogEngine.Core.BlogSettings"/> and collection of <see cref="T:BlogEngine.Core.Category"/> objects.
            </summary>
            <param name="settings">
            The <see cref="T:BlogEngine.Core.BlogSettings"/> to use when generating syndication results.
            </param>
            <param name="categories">
            A collection of <see cref="T:BlogEngine.Core.Category"/> objects used to categorize the web log content.
            </param>
        </member>
        <member name="M:BlogEngine.Core.SyndicationGenerator.ToRfc822DateTime(System.DateTime)">
            <summary>
            Converts the supplied <see cref="T:System.DateTime"/> to its equivalent <a href="http://asg.web.cmu.edu/rfc/rfc822.html">RFC-822 DateTime</a> string representation.
            </summary>
            <param name="dateTime">
            The <see cref="T:System.DateTime"/> to convert.
            </param>
            <returns>
            The equivalent <a href="http://asg.web.cmu.edu/rfc/rfc822.html">RFC-822 DateTime</a> string representation.
            </returns>
        </member>
        <member name="M:BlogEngine.Core.SyndicationGenerator.WriteFeed(BlogEngine.Core.SyndicationFormat,System.IO.Stream,System.Collections.Generic.List{BlogEngine.Core.IPublishable},System.String)">
            <summary>
            Writes a generated syndication feed that conforms to the supplied <see cref="T:BlogEngine.Core.SyndicationFormat"/> using the supplied <see cref="T:System.IO.Stream"/> and collection.
            </summary>
            <param name="format">
            A <see cref="T:BlogEngine.Core.SyndicationFormat"/> enumeration value indicating the syndication format to generate.
            </param>
            <param name="stream">
            The <see cref="T:System.IO.Stream"/> to which you want to write the syndication feed.
            </param>
            <param name="publishables">
            The collection of <see cref="T:BlogEngine.Core.IPublishable"/> objects used to generate the syndication feed content.
            </param>
            <param name="title">
            The title of the RSS channel
            </param>
        </member>
        <member name="M:BlogEngine.Core.SyndicationGenerator.FormatW3COffset(System.TimeSpan,System.String)">
            <summary>
            Converts the value of the specified <see cref="T:System.TimeSpan"/> to its equivalent string representation.
            </summary>
            <param name="offset">
            The <see cref="T:System.TimeSpan"/> to convert.
            </param>
            <param name="separator">
            Separator used to deliminate hours and minutes.
            </param>
            <returns>
            A string representation of the TimeSpan.
            </returns>
        </member>
        <member name="M:BlogEngine.Core.SyndicationGenerator.GetEnclosure(System.String,BlogEngine.Core.IPublishable)">
            <summary>
            Gets enclosure for supported media type
            </summary>
            <param name="content">The content.</param>
            <param name="publishable">The publishable instance.</param>
            <returns>The enclosure.</returns>
        </member>
        <member name="M:BlogEngine.Core.SyndicationGenerator.GetMediaEnclosure(BlogEngine.Core.IPublishable,System.String,System.String,System.String)">
            <summary>
            Gets enclosure for supported media type
            </summary>
            <param name="publishable">The publishable instance.</param>
            <param name="content">The content.</param>
            <param name="media">The media.</param>
            <param name="mediatype">The mediatype.</param>
            <returns>The enclosure.</returns>
        </member>
        <member name="M:BlogEngine.Core.SyndicationGenerator.GetPermaLink(BlogEngine.Core.IPublishable)">
            <summary>
            Creates a <see cref="T:System.Uri"/> that represents the peramlink for the supplied <see cref="T:BlogEngine.Core.IPublishable"/>.
            </summary>
            <param name="publishable">
            The <see cref="T:BlogEngine.Core.IPublishable"/> used to generate the permalink for.
            </param>
            <returns>
            A <see cref="T:System.Uri"/> that represents the peramlink for the supplied <see cref="T:BlogEngine.Core.IPublishable"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="publishable"/> is a null reference (Nothing in Visual Basic).
            </exception>
        </member>
        <member name="M:BlogEngine.Core.SyndicationGenerator.ToW3CDateTime(System.DateTime)">
            <summary>
            Converts the supplied <see cref="T:System.DateTime"/> to its equivalent <a href="http://www.w3.org/TR/NOTE-datetime">W3C DateTime</a> string representation.
            </summary>
            <param name="utcDateTime">
            The Coordinated Universal Time (UTC) <see cref="T:System.DateTime"/> to convert.
            </param>
            <returns>
            The equivalent <a href="http://www.w3.org/TR/NOTE-datetime">W3C DateTime</a> string representation.
            </returns>
        </member>
        <member name="M:BlogEngine.Core.SyndicationGenerator.ValidateFileName(BlogEngine.Core.IPublishable,System.String)">
            <summary>
            Validates the name of the file.
            </summary>
            <param name="publishable">The publishable instance.</param>
            <param name="fileName">Name of the file.</param>
            <returns>The validated file name.</returns>
        </member>
        <member name="M:BlogEngine.Core.SyndicationGenerator.WriteAtomEntry(System.Xml.XmlWriter,BlogEngine.Core.IPublishable)">
            <summary>
            Writes the Atom feed entry element information to the specified <see cref="T:System.Xml.XmlWriter"/> using the supplied <see cref="T:BlogEngine.Core.Page"/>.
            </summary>
            <param name="writer">
            The <see cref="T:System.Xml.XmlWriter"/> to write feed entry element information to.
            </param>
            <param name="publishable">
            The <see cref="T:BlogEngine.Core.IPublishable"/> used to generate feed entry content.
            </param>
        </member>
        <member name="M:BlogEngine.Core.SyndicationGenerator.WriteRssItem(System.Xml.XmlWriter,BlogEngine.Core.IPublishable)">
            <summary>
            Writes the RSS channel item element information to the specified <see cref="T:System.Xml.XmlWriter"/> using the supplied <see cref="T:BlogEngine.Core.Page"/>.
            </summary>
            <param name="writer">
            The <see cref="T:System.Xml.XmlWriter"/> to write channel item element information to.
            </param>
            <param name="publishable">
            The <see cref="T:BlogEngine.Core.IPublishable"/> used to generate channel item content.
            </param>
        </member>
        <member name="M:BlogEngine.Core.SyndicationGenerator.WriteAtomContent(System.Xml.XmlWriter,System.Collections.Generic.List{BlogEngine.Core.IPublishable},System.String)">
            <summary>
            Writes the Atom feed element information to the specified <see cref="T:System.Xml.XmlWriter"/> using the supplied collection.
            </summary>
            <param name="writer">
            The <see cref="T:System.Xml.XmlWriter"/> to write channel element information to.
            </param>
            <param name="publishables">
            The collection of <see cref="T:BlogEngine.Core.IPublishable"/> objects used to generate syndication content.
            </param>
            <param name="title">
            The title of the ATOM content.
            </param>
        </member>
        <member name="M:BlogEngine.Core.SyndicationGenerator.WriteAtomContentCommonElements(System.Xml.XmlWriter)">
            <summary>
            Writes the common/shared Atom feed element information to the specified <see cref="T:System.Xml.XmlWriter"/>.
            </summary>
            <param name="writer">
            The <see cref="T:System.Xml.XmlWriter"/> to write channel element information to.
            </param>
        </member>
        <member name="M:BlogEngine.Core.SyndicationGenerator.WriteAtomFeed(System.IO.Stream,System.Collections.Generic.List{BlogEngine.Core.IPublishable},System.String)">
            <summary>
            Writes a generated Atom syndication feed to the specified <see cref="T:System.IO.Stream"/> using the supplied collection.
            </summary>
            <param name="stream">
            The <see cref="T:System.IO.Stream"/> to which you want to write the syndication feed.
            </param>
            <param name="publishables">
            The collection of <see cref="T:BlogEngine.Core.IPublishable"/> objects used to generate the syndication feed content.
            </param>
            <param name="title">
            The title of the ATOM content.
            </param>
        </member>
        <member name="M:BlogEngine.Core.SyndicationGenerator.WriteRssChannel(System.Xml.XmlWriter,System.Collections.Generic.IEnumerable{BlogEngine.Core.IPublishable},System.String)">
            <summary>
            Writes the RSS channel element information to the specified <see cref="T:System.Xml.XmlWriter"/> using the supplied collection.
            </summary>
            <param name="writer">
            The <see cref="T:System.Xml.XmlWriter"/> to write channel element information to.
            </param>
            <param name="publishables">
            The collection of <see cref="T:BlogEngine.Core.IPublishable"/> objects used to generate syndication content.
            </param>
            <param name="title">
            The title of the RSS channel.
            </param>
        </member>
        <member name="M:BlogEngine.Core.SyndicationGenerator.WriteRssChannelCommonElements(System.Xml.XmlWriter)">
            <summary>
            Writes the common/shared RSS channel element information to the specified <see cref="T:System.Xml.XmlWriter"/>.
            </summary>
            <param name="writer">
            The <see cref="T:System.Xml.XmlWriter"/> to write channel element information to.
            </param>
        </member>
        <member name="M:BlogEngine.Core.SyndicationGenerator.WriteRssFeed(System.IO.Stream,System.Collections.Generic.IEnumerable{BlogEngine.Core.IPublishable},System.String)">
            <summary>
            Writes a generated RSS syndication feed to the specified <see cref="T:System.IO.Stream"/> using the supplied collection.
            </summary>
            <param name="stream">
            The <see cref="T:System.IO.Stream"/> to which you want to write the syndication feed.
            </param>
            <param name="publishables">
            The collection of <see cref="T:BlogEngine.Core.IPublishable"/> objects used to generate the syndication feed content.
            </param>
            <param name="title">
            The title of the RSS channel.
            </param>
        </member>
        <member name="P:BlogEngine.Core.SyndicationGenerator.SupportedNamespaces">
            <summary>
                Gets a collection of the XML namespaces used to provide support for syndication extensions.
            </summary>
            <value>The collection of the XML namespaces, keyed by namespace prefix, that are used to provide support for syndication extensions.</value>
        </member>
        <member name="P:BlogEngine.Core.SyndicationGenerator.Categories">
            <summary>
                Gets a collection of <see cref="T:BlogEngine.Core.Category"/> objects used to categorize the web log content.
            </summary>
            <value>A collection of <see cref="T:BlogEngine.Core.Category"/> objects used to categorize the web log content.</value>
        </member>
        <member name="P:BlogEngine.Core.SyndicationGenerator.Settings">
            <summary>
                Gets or sets the <see cref="T:BlogEngine.Core.BlogSettings"/> used when generating syndication results.
            </summary>
            <value>The <see cref="T:BlogEngine.Core.BlogSettings"/> used when generating syndication results.</value>
            <exception cref="T:System.ArgumentNullException">The <paramref name="value"/> is a null reference (Nothing in Visual Basic).</exception>
        </member>
        <member name="P:BlogEngine.Core.SyndicationGenerator.SupportedMedia">
            <summary>
            Gets SupportedMedia.
            </summary>
        </member>
        <member name="T:BlogEngine.Core.AuthorProfile">
            <summary>
            The author profile.
            </summary>
        </member>
        <member name="F:BlogEngine.Core.AuthorProfile.SyncRoot">
            <summary>
            The sync root.
            </summary>
        </member>
        <member name="F:BlogEngine.Core.AuthorProfile.profiles">
            <summary>
            The profiles.
            </summary>
        </member>
        <member name="F:BlogEngine.Core.AuthorProfile.aboutMe">
            <summary>
            The about me.
            </summary>
        </member>
        <member name="F:BlogEngine.Core.AuthorProfile.birthday">
            <summary>
            The birthday.
            </summary>
        </member>
        <member name="F:BlogEngine.Core.AuthorProfile.cityTown">
            <summary>
            The city town.
            </summary>
        </member>
        <member name="F:BlogEngine.Core.AuthorProfile.company">
            <summary>
            The company.
            </summary>
        </member>
        <member name="F:BlogEngine.Core.AuthorProfile.country">
            <summary>
            The country.
            </summary>
        </member>
        <member name="F:BlogEngine.Core.AuthorProfile.displayName">
            <summary>
            The display name.
            </summary>
        </member>
        <member name="F:BlogEngine.Core.AuthorProfile.emailAddress">
            <summary>
            The email address.
            </summary>
        </member>
        <member name="F:BlogEngine.Core.AuthorProfile.firstName">
            <summary>
            The first name.
            </summary>
        </member>
        <member name="F:BlogEngine.Core.AuthorProfile.isprivate">
            <summary>
            The is private.
            </summary>
        </member>
        <member name="F:BlogEngine.Core.AuthorProfile.lastName">
            <summary>
            The last name.
            </summary>
        </member>
        <member name="F:BlogEngine.Core.AuthorProfile.middleName">
            <summary>
            The middle name.
            </summary>
        </member>
        <member name="F:BlogEngine.Core.AuthorProfile.phoneFax">
            <summary>
            The phone fax.
            </summary>
        </member>
        <member name="F:BlogEngine.Core.AuthorProfile.phoneMain">
            <summary>
            The phone main.
            </summary>
        </member>
        <member name="F:BlogEngine.Core.AuthorProfile.phoneMobile">
            <summary>
            The phone mobile.
            </summary>
        </member>
        <member name="F:BlogEngine.Core.AuthorProfile.photoUrl">
            <summary>
            The photo url.
            </summary>
        </member>
        <member name="F:BlogEngine.Core.AuthorProfile.regionState">
            <summary>
            The region state.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.AuthorProfile.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:BlogEngine.Core.AuthorProfile"/> class.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.AuthorProfile.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:BlogEngine.Core.AuthorProfile"/> class.
            </summary>
            <param name="username">
            The username.
            </param>
        </member>
        <member name="M:BlogEngine.Core.AuthorProfile.GetProfile(System.String)">
            <summary>
            Gets the profile.
            </summary>
            <param name="username">The username.</param>
            <returns>The AuthorProfile.</returns>
        </member>
        <member name="M:BlogEngine.Core.AuthorProfile.GetProfileByEmail(System.String)">
            <summary>
            Gets profile by email address
            </summary>
            <param name="email">The email address</param>
            <returns>Author profile</returns>
        </member>
        <member name="M:BlogEngine.Core.AuthorProfile.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:BlogEngine.Core.AuthorProfile.ToJson(System.String)">
            <summary>
            Returns the author profile as a JsonProfile object for json serialization.
            </summary>
            <param name="username"></param>
            <returns></returns>
        </member>
        <member name="M:BlogEngine.Core.AuthorProfile.RemoveProfile(System.Guid)">
            <summary>
            Removes profile for a specific blog
            </summary>
            <param name="blogId">Blog ID</param>
        </member>
        <member name="M:BlogEngine.Core.AuthorProfile.DataDelete">
            <summary>
            Datas the delete.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.AuthorProfile.DataInsert">
            <summary>
            Datas the insert.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.AuthorProfile.DataSelect(System.String)">
            <summary>
            Datas the select.
            </summary>
            <param name="id">The AuthorProfile id.</param>
            <returns>The AuthorProfile.</returns>
        </member>
        <member name="M:BlogEngine.Core.AuthorProfile.DataUpdate">
            <summary>
            Updates the data.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.AuthorProfile.ValidationRules">
            <summary>
            Validates based on rules.
            </summary>
        </member>
        <member name="P:BlogEngine.Core.AuthorProfile.Profiles">
            <summary>
                Gets an unsorted list of all pages.
            </summary>
        </member>
        <member name="P:BlogEngine.Core.AuthorProfile.AboutMe">
            <summary>
            Gets or sets AboutMe.
            </summary>
        </member>
        <member name="P:BlogEngine.Core.AuthorProfile.Birthday">
            <summary>
            Gets or sets Birthday.
            </summary>
        </member>
        <member name="P:BlogEngine.Core.AuthorProfile.CityTown">
            <summary>
            Gets or sets CityTown.
            </summary>
        </member>
        <member name="P:BlogEngine.Core.AuthorProfile.Company">
            <summary>
            Gets or sets Company.
            </summary>
        </member>
        <member name="P:BlogEngine.Core.AuthorProfile.Country">
            <summary>
            Gets or sets Country.
            </summary>
        </member>
        <member name="P:BlogEngine.Core.AuthorProfile.DisplayName">
            <summary>
            Gets or sets DisplayName.
            </summary>
        </member>
        <member name="P:BlogEngine.Core.AuthorProfile.EmailAddress">
            <summary>
            Gets or sets EmailAddress.
            </summary>
        </member>
        <member name="P:BlogEngine.Core.AuthorProfile.FirstName">
            <summary>
            Gets or sets FirstName.
            </summary>
        </member>
        <member name="P:BlogEngine.Core.AuthorProfile.FullName">
            <summary>
            Gets FullName.
            </summary>
        </member>
        <member name="P:BlogEngine.Core.AuthorProfile.Private">
            <summary>
            Gets or sets a value indicating whether Private.
            </summary>
        </member>
        <member name="P:BlogEngine.Core.AuthorProfile.LastName">
            <summary>
            Gets or sets LastName.
            </summary>
        </member>
        <member name="P:BlogEngine.Core.AuthorProfile.MiddleName">
            <summary>
            Gets or sets MiddleName.
            </summary>
        </member>
        <member name="P:BlogEngine.Core.AuthorProfile.PhoneFax">
            <summary>
            Gets or sets PhoneFax.
            </summary>
        </member>
        <member name="P:BlogEngine.Core.AuthorProfile.PhoneMain">
            <summary>
            Gets or sets PhoneMain.
            </summary>
        </member>
        <member name="P:BlogEngine.Core.AuthorProfile.PhoneMobile">
            <summary>
            Gets or sets PhoneMobile.
            </summary>
        </member>
        <member name="P:BlogEngine.Core.AuthorProfile.PhotoUrl">
            <summary>
            Gets or sets PhotoURL.
            </summary>
        </member>
        <member name="P:BlogEngine.Core.AuthorProfile.RegionState">
            <summary>
            Gets or sets RegionState.
            </summary>
        </member>
        <member name="P:BlogEngine.Core.AuthorProfile.RelativeLink">
            <summary>
            Gets RelativeLink.
            </summary>
        </member>
        <member name="P:BlogEngine.Core.AuthorProfile.UserName">
            <summary>
            Gets UserName.
            </summary>
        </member>
        <member name="T:BlogEngine.Core.Web.Controls.RewriteFormHtmlTextWriter">
            <summary>
            The RewriteFormHtmlTextWriter class implements Form action tag rewriting for rewritten pages 
                on Mono.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Web.Controls.RewriteFormHtmlTextWriter.#ctor(System.Web.UI.Html32TextWriter)">
            <summary>
            Initializes a new instance of the <see cref="T:BlogEngine.Core.Web.Controls.RewriteFormHtmlTextWriter"/> class.
            </summary>
            <param name="writer">
            The writer.
            </param>
        </member>
        <member name="M:BlogEngine.Core.Web.Controls.RewriteFormHtmlTextWriter.#ctor(System.IO.TextWriter)">
            <summary>
            Initializes a new instance of the <see cref="T:BlogEngine.Core.Web.Controls.RewriteFormHtmlTextWriter"/> class.
            </summary>
            <param name="writer">
            The writer.
            </param>
        </member>
        <member name="M:BlogEngine.Core.Web.Controls.RewriteFormHtmlTextWriter.WriteAttribute(System.String,System.String,System.Boolean)">
            <summary>
            Writes the specified markup attribute and value to the output stream, and, if specified, writes the value encoded.
            </summary>
            <param name="name">
            The markup attribute to write to the output stream.
            </param>
            <param name="value">
            The value assigned to the attribute.
            </param>
            <param name="encode">
            true to encode the attribute and its assigned value; otherwise, false.
            </param>
        </member>
        <member name="T:BlogEngine.Core.Web.Extensions.ExtensionManager">
            <summary>
            Extension Manager - top level object in the hierarchy
                Holds collection of extensions and methods to manipulate
                extensions
            </summary>
        </member>
        <member name="F:BlogEngine.Core.Web.Extensions.ExtensionManager.extensions">
            <summary>
                The extensions.
            </summary>
        </member>
        <member name="F:BlogEngine.Core.Web.Extensions.ExtensionManager.newExtensions">
            <summary>
                The new extensions.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Web.Extensions.ExtensionManager.ChangeStatus(System.String,System.Boolean)">
            <summary>
            Method to change extension status
            </summary>
            <param name="extension">
            Extensio Name
            </param>
            <param name="enabled">
            If true, enables extension
            </param>
        </member>
        <member name="M:BlogEngine.Core.Web.Extensions.ExtensionManager.Contains(System.Type)">
            <summary>
            Tell if manager already has this extension
            </summary>
            <param name="type">
            Extension Type
            </param>
            <returns>
            True if already has
            </returns>
        </member>
        <member name="M:BlogEngine.Core.Web.Extensions.ExtensionManager.ExtensionEnabled(System.String)">
            <summary>
            Enabled / Disabled
            </summary>
            <param name="extensionName">
            Name of the extension.
            </param>
            <returns>
            True if enabled
            </returns>
        </member>
        <member name="M:BlogEngine.Core.Web.Extensions.ExtensionManager.GetExtension(System.String)">
            <summary>
            Returns extension to the client based on name
            </summary>
            <param name="extensionName">
            Extension name
            </param>
            <returns>
            Extension object or null
            </returns>
        </member>
        <member name="M:BlogEngine.Core.Web.Extensions.ExtensionManager.GetSettings(System.String,System.String)">
            <summary>
            Returns settings for specified extension
            </summary>
            <param name="extensionName">
            Extension Name
            </param>
            <param name="settingName">
            Settings Name
            </param>
            <returns>
            Settings object
            </returns>
        </member>
        <member name="M:BlogEngine.Core.Web.Extensions.ExtensionManager.ImportSettings(BlogEngine.Core.Web.Extensions.ExtensionSettings)">
            <summary>
            Do initial import here.
                If already imported, let extension manager take care of settings
                To reset, blogger has to delete all settings in the manager
            </summary>
            <param name="settings">
            The settings.
            </param>
            <returns>
            The import settings.
            </returns>
        </member>
        <member name="M:BlogEngine.Core.Web.Extensions.ExtensionManager.ImportSettings(System.String,BlogEngine.Core.Web.Extensions.ExtensionSettings)">
            <summary>
            Imports the settings.
            </summary>
            <param name="extensionName">
            Name of the extension.
            </param>
            <param name="settings">
            The settings.
            </param>
            <returns>
            If import settings works.
            </returns>
        </member>
        <member name="M:BlogEngine.Core.Web.Extensions.ExtensionManager.InitSettings(System.String,BlogEngine.Core.Web.Extensions.ExtensionSettings)">
            <summary>
            Initializes settings by importing default parameters
            </summary>
            <param name="extensionName">
            Extension Name
            </param>
            <param name="settings">
            Settings object
            </param>
            <returns>
            The Extension Settings
            </returns>
        </member>
        <member name="M:BlogEngine.Core.Web.Extensions.ExtensionManager.Save">
            <summary>
            Will serialize and cache ext. mgr. object
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Web.Extensions.ExtensionManager.SaveSettings(BlogEngine.Core.Web.Extensions.ExtensionSettings)">
            <summary>
            Will save settings (add to extension object, then
                cache and serialize all object hierarhy to XML)
            </summary>
            <param name="settings">
            Settings object
            </param>
        </member>
        <member name="M:BlogEngine.Core.Web.Extensions.ExtensionManager.SaveSettings(System.String,BlogEngine.Core.Web.Extensions.ExtensionSettings)">
            <summary>
            The save settings.
            </summary>
            <param name="extensionName">
            The extension name.
            </param>
            <param name="settings">
            The settings.
            </param>
        </member>
        <member name="M:BlogEngine.Core.Web.Extensions.ExtensionManager.SaveToStorage">
            <summary>
            Saves ext. manager object to XML file
                or database table using provider model
            </summary>
            <returns>
            True if successful
            </returns>
        </member>
        <member name="M:BlogEngine.Core.Web.Extensions.ExtensionManager.SaveToStorage(BlogEngine.Core.Web.Extensions.ManagedExtension)">
            <summary>
            Save individual extension to storage
            </summary>
            <param name="ext">
            The Extension
            </param>
            <returns>
            True if saved
            </returns>
        </member>
        <member name="M:BlogEngine.Core.Web.Extensions.ExtensionManager.SetAdminPage(System.String,System.String)">
            <summary>
            A way to let extension author to use custom
                admin page. Will show up as link on extensions page
            </summary>
            <param name="extension">
            Extension Name
            </param>
            <param name="url">
            Path to custom admin page
            </param>
        </member>
        <member name="M:BlogEngine.Core.Web.Extensions.ExtensionManager.SetStatus(System.String,System.Boolean)">
            <summary>
            Only change status on first load;
                This allows to enable/disable extension on
                initial load and then be able to override it with
                change status from admin interface
            </summary>
            <param name="extension">
            Extension Name
            </param>
            <param name="enabled">
            Enable/disable extension on initial load
            </param>
        </member>
        <member name="M:BlogEngine.Core.Web.Extensions.ExtensionManager.ShowSettings(System.String,System.Boolean)">
            <summary>
            Show of hide settings in the admin/extensions list
            </summary>
            <param name="extensionName">
            Extension name
            </param>
            <param name="flag">
            True of false
            </param>
        </member>
        <member name="M:BlogEngine.Core.Web.Extensions.ExtensionManager.DataStoreExtension(System.String)">
            <summary>
            Returns extension object
            </summary>
            <param name="name">
            Extension name
            </param>
            <returns>
            The Extension
            </returns>
        </member>
        <member name="M:BlogEngine.Core.Web.Extensions.ExtensionManager.IsNewExtension(System.String)">
            <summary>
            Extension is "new" if it is loaded from assembly
                but not yet saved to the disk. This state is needed
                so that we can initialize extension and its settings
                on the first load and then override it from admin
            </summary>
            <param name="name">
            Extension name
            </param>
            <returns>
            True if new
            </returns>
        </member>
        <member name="M:BlogEngine.Core.Web.Extensions.ExtensionManager.LoadExtensions">
            <summary>
            If extensions not in the cache will load
                from the XML file. If file not exists
                will load from assembly using reflection
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Web.Extensions.ExtensionManager.SaveToCache">
            <summary>
            Caches for performance. If manager cached
                and not updates done, chached copy always 
                returned
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Web.Extensions.ExtensionManager.Extensions">
            <summary>
                Gets a collection of extensions
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Web.Extensions.ExtensionManager.FileAccessException">
            <summary>
                Gets or sets an exeption thrown when extension can not be serialized because of
                file access permission. Not serializable, used by UI to show error message.
            </summary>
        </member>
        <member name="T:BlogEngine.Core.Web.Extensions.ParameterType">
            <summary>
            Enumeration for parameter data types
            </summary>
        </member>
        <member name="F:BlogEngine.Core.Web.Extensions.ParameterType.String">
            <summary>
            The string.
            </summary>
        </member>
        <member name="F:BlogEngine.Core.Web.Extensions.ParameterType.Boolean">
            <summary>
            The boolean.
            </summary>
        </member>
        <member name="F:BlogEngine.Core.Web.Extensions.ParameterType.Integer">
            <summary>
            The integer.
            </summary>
        </member>
        <member name="F:BlogEngine.Core.Web.Extensions.ParameterType.Long">
            <summary>
            The long number.
            </summary>
        </member>
        <member name="F:BlogEngine.Core.Web.Extensions.ParameterType.Float">
            <summary>
            The float.
            </summary>
        </member>
        <member name="F:BlogEngine.Core.Web.Extensions.ParameterType.Double">
            <summary>
            The double.
            </summary>
        </member>
        <member name="F:BlogEngine.Core.Web.Extensions.ParameterType.Decimal">
            <summary>
            The decimal.
            </summary>
        </member>
        <member name="F:BlogEngine.Core.Web.Extensions.ParameterType.DropDown">
            <summary>
            The drop down.
            </summary>
        </member>
        <member name="F:BlogEngine.Core.Web.Extensions.ParameterType.ListBox">
            <summary>
            The list box.
            </summary>
        </member>
        <member name="F:BlogEngine.Core.Web.Extensions.ParameterType.RadioGroup">
            <summary>
            The radio group.
            </summary>
        </member>
        <member name="T:BlogEngine.Core.Web.Extensions.ExtensionParameter">
            <summary>
            Extension Parameter - serializable object
                that holds parameter attributes and collection
                of values
            </summary>
        </member>
        <member name="F:BlogEngine.Core.Web.Extensions.ExtensionParameter.name">
            <summary>
            The extension parameter name.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Web.Extensions.ExtensionParameter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:BlogEngine.Core.Web.Extensions.ExtensionParameter"/> class. 
                Default constructor required for serialization
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Web.Extensions.ExtensionParameter.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:BlogEngine.Core.Web.Extensions.ExtensionParameter"/> class. 
            Constructor
            </summary>
            <param name="name">
            Parameter Name
            </param>
        </member>
        <member name="M:BlogEngine.Core.Web.Extensions.ExtensionParameter.AddValue(System.String)">
            <summary>
            Add single value to value collection
            </summary>
            <param name="val">
            String Value
            </param>
        </member>
        <member name="M:BlogEngine.Core.Web.Extensions.ExtensionParameter.AddValue(System.Object)">
            <summary>
            Add single value to collection
            </summary>
            <param name="val">
            Value object
            </param>
        </member>
        <member name="M:BlogEngine.Core.Web.Extensions.ExtensionParameter.DeleteValue(System.Int32)">
            <summary>
            Delete value in parameter value collection
            </summary>
            <param name="rowIndex">
            Row Index.
            </param>
        </member>
        <member name="M:BlogEngine.Core.Web.Extensions.ExtensionParameter.UpdateScalarValue(System.String)">
            <summary>
            Update value for scalar (single value) parameter
            </summary>
            <param name="val">
            Scalar Value
            </param>
        </member>
        <member name="M:BlogEngine.Core.Web.Extensions.ExtensionParameter.UpdateScalarValue(System.Object)">
            <summary>
            Update value for scalar (single value) parameter
            </summary>
            <param name="val">
            Scalar Value
            </param>
        </member>
        <member name="P:BlogEngine.Core.Web.Extensions.ExtensionParameter.KeyField">
            <summary>
                Gets or sets a value indicating whether is Primary Key field
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Web.Extensions.ExtensionParameter.Label">
            <summary>
                Gets or sets Used as label in the UI controls
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Web.Extensions.ExtensionParameter.MaxLength">
            <summary>
                Gets or sets Maximum number of characters stored in the value fields
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Web.Extensions.ExtensionParameter.Name">
            <summary>
                Gets or sets Parameter Name, often used as ID in the UI
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Web.Extensions.ExtensionParameter.ParamType">
            <summary>
                Gets or sets Parameter Type
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Web.Extensions.ExtensionParameter.Required">
            <summary>
                Gets or sets a value indicating whether values for parameter required
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Web.Extensions.ExtensionParameter.SelectedValue">
            <summary>
                Gets or sets selected value in parameter lists (dropdown, listbox etc.)
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Web.Extensions.ExtensionParameter.Values">
            <summary>
                Gets or sets a collection of values for given parameter
            </summary>
        </member>
        <member name="T:BlogEngine.Core.Web.Extensions.ExtensionSettings">
            <summary>
            Serializable object that holds collection of
                parameters and methods to manipulate them
            </summary>
        </member>
        <member name="F:BlogEngine.Core.Web.Extensions.ExtensionSettings.requiredFields">
            <summary>
            The required fields.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Web.Extensions.ExtensionSettings.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:BlogEngine.Core.Web.Extensions.ExtensionSettings"/> class. 
                Default constructor requried for serialization
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Web.Extensions.ExtensionSettings.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:BlogEngine.Core.Web.Extensions.ExtensionSettings"/> class. 
            Constructor
            </summary>
            <param name="extension">
            The extension.
            </param>
        </member>
        <member name="M:BlogEngine.Core.Web.Extensions.ExtensionSettings.AddParameter(System.String)">
            <summary>
            Add parameter to settings object by name
                rest of the attributes will be set to defaults
            </summary>
            <param name="name">
            Parameter Name
            </param>
        </member>
        <member name="M:BlogEngine.Core.Web.Extensions.ExtensionSettings.AddParameter(System.String,System.String,System.Int32,System.Boolean,System.Boolean,BlogEngine.Core.Web.Extensions.ParameterType)">
            <summary>
            Add Parameter
            </summary>
            <param name="name">
            Parameter Name
            </param>
            <param name="label">
            Parameter Label
            </param>
            <param name="maxLength">
            Maximum Length
            </param>
            <param name="required">
            Set if value in the parameter required when added/apdated
            </param>
            <param name="keyfield">
            Mark field as primary key, unique and required
            </param>
            <param name="parType">
            Parameter type (integer, string, boolean etc.)
            </param>
        </member>
        <member name="M:BlogEngine.Core.Web.Extensions.ExtensionSettings.AddValue(System.String,System.String)">
            <summary>
            Appends value to parameter value collection
            </summary>
            <param name="parameterName">
            Parameter name
            </param>
            <param name="val">
            Parameter value
            </param>
        </member>
        <member name="M:BlogEngine.Core.Web.Extensions.ExtensionSettings.AddValue(System.String,System.Boolean)">
            <summary>
            Appends value to parameter value collection
            </summary>
            <param name="parameterName">
            Parameter name
            </param>
            <param name="val">
            Parameter value
            </param>
        </member>
        <member name="M:BlogEngine.Core.Web.Extensions.ExtensionSettings.AddValue(System.String,System.Int32)">
            <summary>
            Appends value to parameter value collection
            </summary>
            <param name="parameterName">
            Parameter name
            </param>
            <param name="val">
            Parameter value
            </param>
        </member>
        <member name="M:BlogEngine.Core.Web.Extensions.ExtensionSettings.AddValue(System.String,System.Int64)">
            <summary>
            Appends value to parameter value collection
            </summary>
            <param name="parameterName">
            Parameter name
            </param>
            <param name="val">
            Parameter value
            </param>
        </member>
        <member name="M:BlogEngine.Core.Web.Extensions.ExtensionSettings.AddValue(System.String,System.Single)">
            <summary>
            Appends value to parameter value collection
            </summary>
            <param name="parameterName">
            Parameter name
            </param>
            <param name="val">
            Parameter value
            </param>
        </member>
        <member name="M:BlogEngine.Core.Web.Extensions.ExtensionSettings.AddValue(System.String,System.Double)">
            <summary>
            Appends value to parameter value collection
            </summary>
            <param name="parameterName">
            Parameter name
            </param>
            <param name="val">
            Parameter value
            </param>
        </member>
        <member name="M:BlogEngine.Core.Web.Extensions.ExtensionSettings.AddValue(System.String,System.Decimal)">
            <summary>
            Appends value to parameter value collection
            </summary>
            <param name="parameterName">
            Parameter name
            </param>
            <param name="val">
            Parameter value
            </param>
        </member>
        <member name="M:BlogEngine.Core.Web.Extensions.ExtensionSettings.AddValue(System.String,System.String[],System.String)">
            <summary>
            Add value to the list data type
            </summary>
            <param name="parameterName">
            Parameter name
            </param>
            <param name="items">
            List of values
            </param>
            <param name="selected">
            Selected value
            </param>
        </member>
        <member name="M:BlogEngine.Core.Web.Extensions.ExtensionSettings.AddValue(System.String,System.Collections.Specialized.StringCollection,System.String)">
            <summary>
            Add value to the list data type
            </summary>
            <param name="parameterName">
            Parameter name
            </param>
            <param name="items">
            List of values
            </param>
            <param name="selected">
            Selected value
            </param>
        </member>
        <member name="M:BlogEngine.Core.Web.Extensions.ExtensionSettings.AddValues(System.String[])">
            <summary>
            Add values to parameter value collection
            </summary>
            <param name="values">
            Values as array of strings
            </param>
        </member>
        <member name="M:BlogEngine.Core.Web.Extensions.ExtensionSettings.AddValues(System.Collections.Specialized.StringCollection)">
            <summary>
            Add values to parameter value collection
            </summary>
            <param name="values">
            String collection of values
            </param>
        </member>
        <member name="M:BlogEngine.Core.Web.Extensions.ExtensionSettings.GetDataTable">
            <summary>
            Parameters with multiple values formatted
                as data table where column names are parameter
                names and collection of values are data rows.
                In the UI bound to the data grid view
            </summary>
            <returns>
            Data table
            </returns>
        </member>
        <member name="M:BlogEngine.Core.Web.Extensions.ExtensionSettings.GetDictionary">
            <summary>
            Dictionary collection of parameters
            </summary>
            <returns>
            Dictionary object
            </returns>
        </member>
        <member name="M:BlogEngine.Core.Web.Extensions.ExtensionSettings.GetLabel(System.String)">
            <summary>
            Method to get description of the parameter
            </summary>
            <param name="parameterName">
            Parameter Name
            </param>
            <returns>
            Parameter Description(label)
            </returns>
        </member>
        <member name="M:BlogEngine.Core.Web.Extensions.ExtensionSettings.GetParameterType(System.String)">
            <summary>
            Get parameter type. All valid types defined in the ParameterType enum
            </summary>
            <param name="parameterName">
            Parameter name
            </param>
            <returns>
            Parameter type
            </returns>
        </member>
        <member name="M:BlogEngine.Core.Web.Extensions.ExtensionSettings.GetSingleValue(System.String)">
            <summary>
            Method to get vaule for scalar parameter
            </summary>
            <param name="parameterName">
            Parameter Name
            </param>
            <returns>
            First value in the values collection
            </returns>
        </member>
        <member name="M:BlogEngine.Core.Web.Extensions.ExtensionSettings.IsKeyValueExists(System.String)">
            <summary>
            Returns true if value that user entered
                exists in the parameter used as primary key
            </summary>
            <param name="newVal">
            Value entered
            </param>
            <returns>
            True if value exists
            </returns>
        </member>
        <member name="M:BlogEngine.Core.Web.Extensions.ExtensionSettings.IsOldValue(System.String,System.String,System.Int32)">
            <summary>
            Compare value in the parameters collection
                with one in the grid. Return true if value 
                in the grid is the same (old value).
            </summary>
            <param name="parName">
            Parameter Name
            </param>
            <param name="val">
            Value in the grid view
            </param>
            <param name="rowIndex">
            Row in the grid view
            </param>
            <returns>
            The is old value.
            </returns>
        </member>
        <member name="M:BlogEngine.Core.Web.Extensions.ExtensionSettings.IsRequiredParameter(System.String)">
            <summary>
            Returns true if values in the parameter required
            </summary>
            <param name="paramName">
            Parameter Name
            </param>
            <returns>
            The is required parameter.
            </returns>
        </member>
        <member name="M:BlogEngine.Core.Web.Extensions.ExtensionSettings.SetParameterType(System.String,BlogEngine.Core.Web.Extensions.ParameterType)">
            <summary>
            Set parameter type (int, bool etc.)
            </summary>
            <param name="parameterName">
            Parameter name
            </param>
            <param name="t">
            Parameter type
            </param>
        </member>
        <member name="M:BlogEngine.Core.Web.Extensions.ExtensionSettings.UpdateScalarValue(System.String,System.String)">
            <summary>
            Update parameter that has only one value
            </summary>
            <param name="parameterName">
            Parameter Name
            </param>
            <param name="val">
            The Value.
            </param>
        </member>
        <member name="M:BlogEngine.Core.Web.Extensions.ExtensionSettings.UpdateSelectedValue(System.String,System.String)">
            <summary>
            Updates selected value in the Lists
            </summary>
            <param name="parameterName">
            Parameter name
            </param>
            <param name="val">
            Parameter value
            </param>
        </member>
        <member name="M:BlogEngine.Core.Web.Extensions.ExtensionSettings.AddObjectValue(System.String,System.Object)">
            <summary>
            Add value to the parameter and assign data type
            </summary>
            <param name="parameterName">
            Parameter name
            </param>
            <param name="val">
            Parameter value
            </param>
        </member>
        <member name="P:BlogEngine.Core.Web.Extensions.ExtensionSettings.Delimiter">
            <summary>
                Gets or sets delimiter used to split string into string array, comma by default
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Web.Extensions.ExtensionSettings.Help">
            <summary>
                Gets or sets information extension author can save to describe 
                settings usage. If set, shows up in the settings page
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Web.Extensions.ExtensionSettings.Hidden">
            <summary>
                Gets or sets a value indicating whether true, settings section will not show in the settings page
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Web.Extensions.ExtensionSettings.Index">
            <summary>
                Gets or sets the order for loading into admin settings page
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Web.Extensions.ExtensionSettings.IsScalar">
            <summary>
                Gets or sets a value indicating whether grid view will not show for settings
                and only single text box per parameter will
                be added to the form to update and store input
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Web.Extensions.ExtensionSettings.KeyField">
            <summary>
                Gets or sets a field used as primary key for settings.
                If not defined, first parameter in the collection
                set as key field. Unique and required by default.
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Web.Extensions.ExtensionSettings.Name">
            <summary>
                Gets or sets the extension name, same as class name
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Web.Extensions.ExtensionSettings.Parameters">
            <summary>
                Gets or sets a collection of parameters defined by extension writer.
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Web.Extensions.ExtensionSettings.RequiredFields">
            <summary>
                Gets a collection of required parameters
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Web.Extensions.ExtensionSettings.ShowAdd">
            <summary>
            Gets or sets a value indicating whether [show add].
                If false, "add" button will not show on the settings form
            </summary>
            <value><c>true</c> if [show add]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:BlogEngine.Core.Web.Extensions.ExtensionSettings.ShowDelete">
            <summary>
            Gets or sets a value indicating whether [show delete].
                If false, "delete" button will not show in the settings form
            </summary>
            <value><c>true</c> if [show delete]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:BlogEngine.Core.Web.Extensions.ExtensionSettings.ShowEdit">
            <summary>
            Gets or sets a value indicating whether [show edit].
                If false, "edit" button will not show in the settings form
            </summary>
            <value><c>true</c> if [show edit]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:BlogEngine.Core.Web.Extensions.ExtensionSettings.BlogId">
            <summary>
            Blog ID
            </summary>
        </member>
        <member name="T:BlogEngine.Core.Web.Extensions.ManagedExtension">
            <summary>
            Serializable object that holds extension,
                extension attributes and methods
            </summary>
        </member>
        <member name="F:BlogEngine.Core.Web.Extensions.ManagedExtension.settings">
            <summary>
            The settings.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Web.Extensions.ManagedExtension.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:BlogEngine.Core.Web.Extensions.ManagedExtension"/> class. 
                Default constructor required for serialization
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Web.Extensions.ManagedExtension.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:BlogEngine.Core.Web.Extensions.ManagedExtension"/> class.
            </summary>
            <param name="name">The extension name.</param>
            <param name="version">The version.</param>
            <param name="desc">The description.</param>
            <param name="author">The author.</param>
        </member>
        <member name="M:BlogEngine.Core.Web.Extensions.ManagedExtension.ContainsSetting(System.String)">
            <summary>
            Method to find out if extension has setting with this name
            </summary>
            <param name="settingName">
            Setting Name
            </param>
            <returns>
            True if settings with this name already exists
            </returns>
        </member>
        <member name="M:BlogEngine.Core.Web.Extensions.ManagedExtension.InitializeSettings(BlogEngine.Core.Web.Extensions.ExtensionSettings)">
            <summary>
            Initializes the settings.
            </summary>
            <param name="extensionSettings">The extension settings.</param>
        </member>
        <member name="M:BlogEngine.Core.Web.Extensions.ManagedExtension.Initialized(BlogEngine.Core.Web.Extensions.ExtensionSettings)">
            <summary>
            Determine if settings has been initialized with default
                values (first time new extension loaded into the manager)
            </summary>
            <param name="xs">
            The ExtensionSettings.
            </param>
            <returns>
            True if initialized
            </returns>
        </member>
        <member name="M:BlogEngine.Core.Web.Extensions.ManagedExtension.SaveSettings(BlogEngine.Core.Web.Extensions.ExtensionSettings)">
            <summary>
            Method to cache and serialize settings object
            </summary>
            <param name="extensionSettings">The extension settings.</param>
        </member>
        <member name="M:BlogEngine.Core.Web.Extensions.ManagedExtension.GetPathAndFilename(System.Boolean)">
            <summary>
            Returns the physical path and filename of this extension.
            </summary>
            <param name="checkExistence">
            If true, existence of the file is checked and if the file does not exist,
            an empty string is returned.
            </param>
            <returns></returns>
        </member>
        <member name="P:BlogEngine.Core.Web.Extensions.ManagedExtension.AdminPage">
            <summary>
                Gets or sets Custom admin page. If defined, link to default settings
                page will be replaced by the link to this page in the UI
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Web.Extensions.ManagedExtension.Author">
            <summary>
                Gets or sets Extension Author. Will show up in the settings page, can be used as a 
                link to author's home page
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Web.Extensions.ManagedExtension.Description">
            <summary>
                Gets or sets Extension Description
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Web.Extensions.ManagedExtension.Enabled">
            <summary>
                Gets or sets a value indicating whether extension is enabled.
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Web.Extensions.ManagedExtension.Name">
            <summary>
                Gets or sets Extension Name
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Web.Extensions.ManagedExtension.Priority">
            <summary>
                Gets or sets Extension Priority
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Web.Extensions.ManagedExtension.SubBlogEnabled">
            <summary>
                True if extenstion properties enabled in sub-blog
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Web.Extensions.ManagedExtension.Settings">
            <summary>
                Gets or sets Settings for the extension
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Web.Extensions.ManagedExtension.BlogSettings">
            <summary>
            Blog specific extension settings
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Web.Extensions.ManagedExtension.Blogs">
            <summary>
            List of blogs that opt to DISABLE extension
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Web.Extensions.ManagedExtension.ShowSettings">
            <summary>
                Gets or sets a value indicating whether to Show or hide settings in the admin/extensions list
            </summary>
        </member>
        <member name="P:BlogEngine.Core.Web.Extensions.ManagedExtension.Version">
            <summary>
                Gets or sets Extension Version
            </summary>
        </member>
        <member name="T:BlogEngine.Core.Web.Extensions.GenericHelper`1">
            <summary>
            Helper class
            </summary>
            <typeparam name="T">Object type</typeparam>
        </member>
        <member name="M:BlogEngine.Core.Web.Extensions.GenericHelper`1.Copy(System.Object)">
            <summary>
            To copy collection by value
            </summary>
            <param name="objectToCopy">Object to copy from</param>
            <returns>New object, as oppose to object reference</returns>
        </member>
        <member name="T:BlogEngine.Core.Web.HttpHandlers.BlogMLExportHandler">
            <summary>
            Exports all posts to the BlogML xml format.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Web.HttpHandlers.BlogMLExportHandler.ProcessRequest(System.Web.HttpContext)">
            <summary>
            Enables processing of HTTP Web requests by a custom HttpHandler that implements the <see cref="T:System.Web.IHttpHandler"></see> interface.
            </summary>
            <param name="context">
            An <see cref="T:System.Web.HttpContext"></see> object that provides references to the intrinsic server 
                objects (for example, Request, Response, Session, and Server) used to service HTTP requests.
            </param>
        </member>
        <member name="M:BlogEngine.Core.Web.HttpHandlers.BlogMLExportHandler.AddAuthors(System.Xml.XmlWriter)">
            <summary>
            Add authors.
            </summary>
            <param name="writer">
            The writer.
            </param>
        </member>
        <member name="M:BlogEngine.Core.Web.HttpHandlers.BlogMLExportHandler.AddCategories(System.Xml.XmlWriter)">
            <summary>
            Add categories.
            </summary>
            <param name="writer">
            The writer.
            </param>
        </member>
        <member name="M:BlogEngine.Core.Web.HttpHandlers.BlogMLExportHandler.AddExtendedProperties(System.Xml.XmlWriter)">
            <summary>
            Add extended properties.
            </summary>
            <param name="writer">
            The writer.
            </param>
        </member>
        <member name="M:BlogEngine.Core.Web.HttpHandlers.BlogMLExportHandler.AddPostAuthor(System.Xml.XmlWriter,BlogEngine.Core.Post)">
            <summary>
            Add post author.
            </summary>
            <param name="writer">
            The writer.
            </param>
            <param name="post">
            The post to add the author on.
            </param>
        </member>
        <member name="M:BlogEngine.Core.Web.HttpHandlers.BlogMLExportHandler.AddPostCategories(System.Xml.XmlWriter,BlogEngine.Core.Post)">
            <summary>
            Add post categories.
            </summary>
            <param name="writer">
            The writer.
            </param>
            <param name="post">
            The post to add categories to.
            </param>
        </member>
        <member name="M:BlogEngine.Core.Web.HttpHandlers.BlogMLExportHandler.AddPostComments(System.Xml.XmlWriter,BlogEngine.Core.Post)">
            <summary>
            Add post comments.
            </summary>
            <param name="writer">
            The writer.
            </param>
            <param name="post">
            The post to add comments to.
            </param>
        </member>
        <member name="M:BlogEngine.Core.Web.HttpHandlers.BlogMLExportHandler.AddPostContent(System.Xml.XmlWriter,BlogEngine.Core.Post)">
            <summary>
            Add post content.
            </summary>
            <param name="writer">
            The writer.
            </param>
            <param name="post">
            The post to add content to.
            </param>
        </member>
        <member name="M:BlogEngine.Core.Web.HttpHandlers.BlogMLExportHandler.AddPostExcerpt(System.Xml.XmlWriter,BlogEngine.Core.Post)">
            <summary>
            Adds the post excerpt.
            </summary>
            <param name="writer">The writer.</param>
            <param name="post">The post to add the excerpt to.</param>
        </member>
        <member name="M:BlogEngine.Core.Web.HttpHandlers.BlogMLExportHandler.AddPostName(System.Xml.XmlWriter,BlogEngine.Core.Post)">
            <summary>
            The post-name element contains the same as the title.
            </summary>
            <param name="writer">
            The writer.
            </param>
            <param name="post">
            The post to add a name to.
            </param>
        </member>
        <member name="M:BlogEngine.Core.Web.HttpHandlers.BlogMLExportHandler.AddPostTags(System.Xml.XmlWriter,BlogEngine.Core.Post)">
            <summary>
            Adds the post tags.
            </summary>
            <param name="writer">The writer.</param>
            <param name="post">The post to add tags to.</param>
        </member>
        <member name="M:BlogEngine.Core.Web.HttpHandlers.BlogMLExportHandler.AddPostTitle(System.Xml.XmlWriter,BlogEngine.Core.Post)">
            <summary>
            Adds the post title.
            </summary>
            <param name="writer">The writer.</param>
            <param name="post">The post to add the title to.</param>
        </member>
        <member name="M:BlogEngine.Core.Web.HttpHandlers.BlogMLExportHandler.AddPostTrackbacks(System.Xml.XmlWriter,BlogEngine.Core.Post)">
            <summary>
            Adds the post trackbacks.
            </summary>
            <param name="writer">The writer.</param>
            <param name="post">The post to add trackbacks for.</param>
        </member>
        <member name="M:BlogEngine.Core.Web.HttpHandlers.BlogMLExportHandler.AddPosts(System.Xml.XmlWriter)">
            <summary>
            Adds the posts.
            </summary>
            <param name="writer">The writer.</param>
        </member>
        <member name="M:BlogEngine.Core.Web.HttpHandlers.BlogMLExportHandler.AddSubTitle(System.Xml.XmlWriter)">
            <summary>
            Adds the sub title.
            </summary>
            <param name="writer">The writer.</param>
        </member>
        <member name="M:BlogEngine.Core.Web.HttpHandlers.BlogMLExportHandler.AddTitle(System.Xml.XmlWriter)">
            <summary>
            Adds the title.
            </summary>
            <param name="writer">The writer.</param>
        </member>
        <member name="M:BlogEngine.Core.Web.HttpHandlers.BlogMLExportHandler.WriteXml(System.Web.HttpContext)">
            <summary>
            Writes the BlogML to the output stream.
            </summary>
            <param name="context">
            The context.
            </param>
        </member>
        <member name="P:BlogEngine.Core.Web.HttpHandlers.BlogMLExportHandler.IsReusable">
            <summary>
                Gets a value indicating whether another request can use the <see cref = "T:System.Web.IHttpHandler"></see> instance.
            </summary>
            <value></value>
            <returns>true if the <see cref = "T:System.Web.IHttpHandler"></see> instance is reusable; otherwise, false.</returns>
        </member>
        <member name="T:BlogEngine.Core.Web.HttpHandlers.Apml">
            <summary>
            Based on John Dyer's (http://johndyer.name/) extension.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Web.HttpHandlers.Apml.ProcessRequest(System.Web.HttpContext)">
            <summary>
            Enables processing of HTTP Web requests by a custom HttpHandler that implements the <see cref="T:System.Web.IHttpHandler"></see> interface.
            </summary>
            <param name="context">
            An <see cref="T:System.Web.HttpContext"></see> object that provides references to the intrinsic server objects (for example, Request, Response, Session, and Server) used to service HTTP requests.
            </param>
        </member>
        <member name="M:BlogEngine.Core.Web.HttpHandlers.Apml.FindMax(System.Collections.Generic.Dictionary{System.String,BlogEngine.Core.Web.HttpHandlers.Apml.Concept})">
            <summary>
            Finds the max.
            </summary>
            <param name="dic">The dictionary.</param>
            <returns>A list of Concept.</returns>
        </member>
        <member name="M:BlogEngine.Core.Web.HttpHandlers.Apml.CloseWriter(System.Xml.XmlWriter)">
            <summary>
            Closes the writer.
            </summary>
            <param name="xmlWriter">The XML writer.</param>
        </member>
        <member name="M:BlogEngine.Core.Web.HttpHandlers.Apml.CreateLinkList">
            <summary>
            Creates the link list.
            </summary>
            <returns>A dictionary of string, string.</returns>
        </member>
        <member name="M:BlogEngine.Core.Web.HttpHandlers.Apml.CreateTagList">
            <summary>
            Creates the tag list.
            </summary>
            <returns>A list of concepts.</returns>
        </member>
        <member name="M:BlogEngine.Core.Web.HttpHandlers.Apml.GetWriter(System.IO.Stream)">
            <summary>
            Gets the writer.
            </summary>
            <param name="stream">The stream.</param>
            <returns>An xml writer.</returns>
        </member>
        <member name="M:BlogEngine.Core.Web.HttpHandlers.Apml.WriteApmlDocument(System.IO.Stream)">
            <summary>
            The write apml document.
            </summary>
            <param name="stream">
            The stream.
            </param>
        </member>
        <member name="P:BlogEngine.Core.Web.HttpHandlers.Apml.IsReusable">
            <summary>
                Gets a value indicating whether another request can use the <see cref = "T:System.Web.IHttpHandler"></see> instance.
            </summary>
            <value></value>
            <returns>true if the <see cref = "T:System.Web.IHttpHandler"></see> instance is reusable; otherwise, false.</returns>
        </member>
        <member name="T:BlogEngine.Core.Web.HttpHandlers.Apml.Concept">
            <summary>
            The concept.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Web.HttpHandlers.Apml.Concept.#ctor(System.DateTime,System.Single,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:BlogEngine.Core.Web.HttpHandlers.Apml.Concept"/> class.
            </summary>
            <param name="lastUpdated">
            The last updated.
            </param>
            <param name="score">
            The score.
            </param>
            <param name="title">
            The title.
            </param>
        </member>
        <member name="P:BlogEngine.Core.Web.HttpHandlers.Apml.Concept.LastUpdated">
            <summary>
                Gets or sets the last updated.
            </summary>
            <value>The last updated.</value>
        </member>
        <member name="P:BlogEngine.Core.Web.HttpHandlers.Apml.Concept.Score">
            <summary>
                Gets or sets the score.
            </summary>
            <value>The score.</value>
        </member>
        <member name="P:BlogEngine.Core.Web.HttpHandlers.Apml.Concept.Title">
            <summary>
                Gets the title.
            </summary>
            <value>The title.</value>
        </member>
        <member name="T:BlogEngine.Core.Web.HttpHandlers.Foaf">
            <summary>
            Based on John Dyer's (http://johndyer.name/) extension.
            </summary>
        </member>
        <member name="F:BlogEngine.Core.Web.HttpHandlers.Foaf.xmlNamespaces">
            <summary>
                The xml namespaces.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Web.HttpHandlers.Foaf.ProcessRequest(System.Web.HttpContext)">
            <summary>
            Enables processing of HTTP Web requests by a custom HttpHandler that implements the <see cref="T:System.Web.IHttpHandler"></see> interface.
            </summary>
            <param name="context">
            An <see cref="T:System.Web.HttpContext"></see> object that provides references to the intrinsic server objects (for example, Request, Response, Session, and Server) used to service HTTP requests.
            </param>
        </member>
        <member name="M:BlogEngine.Core.Web.HttpHandlers.Foaf.CalculateSha1(System.String,System.Text.Encoding)">
            <summary>
            Calculates the SHA1.
            </summary>
            <param name="text">
            The text string.
            </param>
            <param name="enc">
            The encoding.
            </param>
            <returns>
            The hash string.
            </returns>
        </member>
        <member name="M:BlogEngine.Core.Web.HttpHandlers.Foaf.CloseWriter(System.Xml.XmlWriter)">
            <summary>
            Closes up the FOAF document
            </summary>
            <param name="xmlWriter">
            The XML writer.
            </param>
        </member>
        <member name="M:BlogEngine.Core.Web.HttpHandlers.Foaf.GetWriter(System.IO.Stream)">
            <summary>
            Creates the necessary startup information for the FOAF document
            </summary>
            <param name="stream">
            The stream.
            </param>
            <returns>
            The xml writer.
            </returns>
        </member>
        <member name="M:BlogEngine.Core.Web.HttpHandlers.Foaf.WriteFoaf(System.Web.HttpContext,System.String)">
            <summary>
            Writes the FOAF.
            </summary>
            <param name="context">
            The context.
            </param>
            <param name="name">
            The name of the FOAF.
            </param>
        </member>
        <member name="M:BlogEngine.Core.Web.HttpHandlers.Foaf.WriteFoafPerson(System.Xml.XmlWriter,BlogEngine.Core.Web.HttpHandlers.FoafPerson)">
            <summary>
            Write a FOAF:Person and any friends to the output stream
            </summary>
            <param name="writer">The writer.</param>
            <param name="person">The person.</param>
        </member>
        <member name="P:BlogEngine.Core.Web.HttpHandlers.Foaf.IsReusable">
            <summary>
                Gets a value indicating whether another request can use the <see cref = "T:System.Web.IHttpHandler"></see> instance.
            </summary>
            <value></value>
            <returns>true if the <see cref = "T:System.Web.IHttpHandler"></see> instance is reusable; otherwise, false.</returns>
        </member>
        <member name="P:BlogEngine.Core.Web.HttpHandlers.Foaf.SupportedNamespaces">
            <summary>
                Gets SupportedNamespaces.
            </summary>
        </member>
        <member name="T:BlogEngine.Core.Web.HttpHandlers.FoafPerson">
            <summary>
            Temporary class for transmitting FOAF attributes
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Web.HttpHandlers.FoafPerson.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:BlogEngine.Core.Web.HttpHandlers.FoafPerson"/> class.
            </summary>
            <param name="id">
            The FOAF person id.
            </param>
        </member>
        <member name="M:BlogEngine.Core.Web.HttpHandlers.FoafPerson.#ctor(System.String,BlogEngine.Core.AuthorProfile)">
            <summary>
            Initializes a new instance of the <see cref="T:BlogEngine.Core.Web.HttpHandlers.FoafPerson"/> class.
            </summary>
            <param name="id">
            The FOAF id.
            </param>
            <param name="ap">
            The AuthorProfile.
            </param>
        </member>
        <member name="M:BlogEngine.Core.Web.HttpHandlers.FoafPerson.#ctor(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:BlogEngine.Core.Web.HttpHandlers.FoafPerson"/> class.
            </summary>
            <param name="id">
            The FOAF person id.
            </param>
            <param name="name">
            The FOAF person name.
            </param>
            <param name="title">
            The title.
            </param>
            <param name="email">
            The email.
            </param>
            <param name="homepage">
            The homepage.
            </param>
            <param name="blog">
            The FOAF person blog.
            </param>
            <param name="rdf">
            The FOAF person rdf.
            </param>
            <param name="firstname">
            The firstname.
            </param>
            <param name="lastname">
            The lastname.
            </param>
            <param name="image">
            The image.
            </param>
            <param name="birthday">
            The birthday.
            </param>
            <param name="phone">
            The phone.
            </param>
        </member>
        <member name="P:BlogEngine.Core.Web.HttpHandlers.FoafPerson.Birthday">
            <summary>
            Gets or sets the birthday.
            </summary>
            <value>The birthday.</value>
        </member>
        <member name="P:BlogEngine.Core.Web.HttpHandlers.FoafPerson.Blog">
            <summary>
            Gets or sets the blog.
            </summary>
            <value>The FOAF blog.</value>
        </member>
        <member name="P:BlogEngine.Core.Web.HttpHandlers.FoafPerson.Email">
            <summary>
            Gets or sets the email.
            </summary>
            <value>The email.</value>
        </member>
        <member name="P:BlogEngine.Core.Web.HttpHandlers.FoafPerson.Firstname">
            <summary>
            Gets or sets the firstname.
            </summary>
            <value>The firstname.</value>
        </member>
        <member name="P:BlogEngine.Core.Web.HttpHandlers.FoafPerson.Friends">
            <summary>
            Gets or sets the friends.
            </summary>
            <value>The friends.</value>
        </member>
        <member name="P:BlogEngine.Core.Web.HttpHandlers.FoafPerson.Homepage">
            <summary>
            Gets or sets the homepage.
            </summary>
            <value>The homepage.</value>
        </member>
        <member name="P:BlogEngine.Core.Web.HttpHandlers.FoafPerson.Id">
            <summary>
            Gets or sets the id.
            </summary>
            <value>The FOAF id.</value>
        </member>
        <member name="P:BlogEngine.Core.Web.HttpHandlers.FoafPerson.Image">
            <summary>
            Gets or sets the image.
            </summary>
            <value>The image.</value>
        </member>
        <member name="P:BlogEngine.Core.Web.HttpHandlers.FoafPerson.Lastname">
            <summary>
            Gets or sets the lastname.
            </summary>
            <value>The lastname.</value>
        </member>
        <member name="P:BlogEngine.Core.Web.HttpHandlers.FoafPerson.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>The FOAF name.</value>
        </member>
        <member name="P:BlogEngine.Core.Web.HttpHandlers.FoafPerson.Phone">
            <summary>
            Gets or sets the phone.
            </summary>
            <value>The phone.</value>
        </member>
        <member name="P:BlogEngine.Core.Web.HttpHandlers.FoafPerson.PhotoUrl">
            <summary>
            Gets or sets the photo URL.
            </summary>
            <value>The photo URL.</value>
        </member>
        <member name="P:BlogEngine.Core.Web.HttpHandlers.FoafPerson.Rdf">
            <summary>
            Gets or sets the RDF.
            </summary>
            <value>The FOAF RDF.</value>
        </member>
        <member name="P:BlogEngine.Core.Web.HttpHandlers.FoafPerson.Title">
            <summary>
            Gets or sets the title.
            </summary>
            <value>The title.</value>
        </member>
        <member name="T:BlogEngine.Core.Web.HttpHandlers.Sioc">
            <summary>
            Based on John Dyer's (http://johndyer.name/) extension.
            </summary>
        </member>
        <member name="F:BlogEngine.Core.Web.HttpHandlers.Sioc.xmlNamespaces">
            <summary>
                The xml namespaces.
            </summary>
        </member>
        <member name="M:BlogEngine.Core.Web.HttpHandlers.Sioc.ProcessRequest(System.Web.HttpContext)">
            <summary>
            Enables processing of HTTP Web requests by a custom HttpHandler that implements the <see cref="T:System.Web.IHttpHandler"></see> interface.
            </summary>
            <param name="context">
            An <see cref="T:System.Web.HttpContext"></see> object that provides references to the intrinsic server objects (for example, Request, Response, Session, and Server) used to service HTTP requests.
            </param>
        </member>
        <member name="M:BlogEngine.Core.Web.HttpHandlers.Sioc.CalculateSha1(System.String,System.Text.Encoding)">
            <summary>
            Calculates the SHA1.
            </summary>
            <param name="text">
            The text string.
            </param>
            <param name="enc">
            The encoding.
            </param>
            <returns>
            The hash string.
            </returns>
        </member>
        <member name="M:BlogEngine.Core.Web.HttpHandlers.Sioc.CloseWriter(System.Xml.XmlWriter)">
            <summary>
            Closes the writer.
            </summary>
            <param name="xmlWriter">
            The XML writer.
            </param>
        </member>
        <member name="M:BlogEngine.Core.Web.HttpHandlers.Sioc.ConvertToIPublishable(BlogEngine.Core.IPublishable)">
            <summary>
            Converts to publishable interface.
            </summary>
            <param name="item">
            The publishable item.
            </param>
            <returns>
            The publishable interface.
            </returns>
        </member>
        <member name="M:BlogEngine.Core.Web.HttpHandlers.Sioc.GetBlogAuthorUrl(System.String)">
            <summary>
            Gets the blog author URL.
            </summary>
            <param name="username">
            The username.
            </param>
            <returns>
            Blog author url.
            </returns>
        </member>
        <member name="M:BlogEngine.Core.Web.HttpHandlers.Sioc.GetComment(System.Guid)">
            <summary>
            Gets the comment.
            </summary>
            <param name="commentId">
            The comment id.
            </param>
            <returns>
            The comment.
            </returns>
        </member>
        <member name="M:BlogEngine.Core.Web.HttpHandlers.Sioc.GetSiocAuthorUrl(System.String)">
            <summary>
            Gets the sioc author URL.
            </summary>
            <param name="username">
            The username.
            </param>
            <returns>
            The SIOC Author Url.
            </returns>
        </member>
        <member name="M:BlogEngine.Core.Web.HttpHandlers.Sioc.GetSiocAuthorsUrl">
            <summary>
            Gets the sioc authors URL.
            </summary>
            <returns>
            The SIOC Author Url.
            </returns>
        </member>
        <member name="M:BlogEngine.Core.Web.HttpHandlers.Sioc.GetSiocBlogUrl">
            <summary>
            Gets the sioc blog URL.
            </summary>
            <returns>
            The SIOC Blog Url.
            </returns>
        </member>
        <member name="M:BlogEngine.Core.Web.HttpHandlers.Sioc.GetSiocCommentUrl(System.String)">
            <summary>
            Gets the sioc comment URL.
            </summary>
            <param name="id">
            The comment id.
            </param>
            <returns>
            The SIOC Comment Url.
            </returns>
        </member>
        <member name="M:BlogEngine.Core.Web.HttpHandlers.Sioc.GetSiocPostUrl(System.String)">
            <summary>
            Gets the sioc post URL.
            </summary>
            <param name="id">
            The SIOC post id.
            </param>
            <returns>
            The SIOC Post Url.
            </returns>
        </member>
        <member name="M:BlogEngine.Core.Web.HttpHandlers.Sioc.GetWriter(System.IO.Stream)">
            <summary>
            Gets the writer.
            </summary>
            <param name="stream">
            The stream.
            </param>
            <returns>
            The Xml Writer.
            </returns>
        </member>
        <member name="M:BlogEngine.Core.Web.HttpHandlers.Sioc.WriteAuthor(System.IO.Stream,System.String)">
            <summary>
            Writes the author.
            </summary>
            <param name="stream">
            The stream.
            </param>
            <param name="authorName">
            Name of the author.
            </param>
        </member>
        <member name="M:BlogEngine.Core.Web.HttpHandlers.Sioc.WriteFoafDocument(System.Xml.XmlWriter,System.String,System.String)">
            <summary>
            Writes the foaf document.
            </summary>
            <param name="xmlWriter">
            The XML writer.
            </param>
            <param name="siocType">
            Type of the sioc.
            </param>
            <param name="url">
            The URL string.
            </param>
        </member>
        <member name="M:BlogEngine.Core.Web.HttpHandlers.Sioc.WriteForum(System.Xml.XmlWriter,System.Collections.Generic.IEnumerable{BlogEngine.Core.IPublishable})">
            <summary>
            Writes the forum.
            </summary>
            <param name="xmlWriter">
            The xml writer.
            </param>
            <param name="list">
            The enumerable of publishable interface.
            </param>
        </member>
        <member name="M:BlogEngine.Core.Web.HttpHandlers.Sioc.WritePub(System.IO.Stream,BlogEngine.Core.IPublishable)">
            <summary>
            Writes an IPublishable to a stream.
            </summary>
            <param name="stream">
            The stream.
            </param>
            <param name="pub">
            The publishable interface.
            </param>
        </member>
        <member name="M:BlogEngine.Core.Web.HttpHandlers.Sioc.WriteSiocPost(System.Xml.XmlWriter,BlogEngine.Core.IPublishable)">
            <summary>
            Writes SIOC post.
            </summary>
            <param name="xmlWriter">
            The xml writer.
            </param>
            <param name="pub">
            The publishable interface.
            </param>
        </member>
        <member name="M:BlogEngine.Core.Web.HttpHandlers.Sioc.WriteSiocSite(System.Xml.XmlWriter)">
            <summary>
            Writes sioc site.
            </summary>
            <param name="xmlWriter">
            The xml writer.
            </param>
        </member>
        <member name="M:BlogEngine.Core.Web.HttpHandlers.Sioc.WriteSite(System.IO.Stream,System.Collections.Generic.IEnumerable{BlogEngine.Core.IPublishable})">
            <summary>
            Writes site.
            </summary>
            <param name="stream">
            The stream.
            </param>
            <param name="list">
            The enumerable of IPublishable.
            </param>
        </member>
        <member name="M:BlogEngine.Core.Web.HttpHandlers.Sioc.WriteUserGroup(System.Xml.XmlWriter)">
            <summary>
            Writes the user group.
            </summary>
            <param name="xmlWriter">
            The XML writer.
            </param>
        </member>
        <member name="P:BlogEngine.Core.Web.HttpHandlers.Sioc.IsReusable">
            <summary>
                Gets a value indicating whether another request can use the <see cref = "T:System.Web.IHttpHandler"></see> instance.
            </summary>
            <value></value>
            <returns>true if the <see cref = "T:System.Web.IHttpHandler"></see> instance is reusable; otherwise, false.</returns>
        </member>
        <member name="P:BlogEngine.Core.Web.HttpHandlers.Sioc.SupportedNamespaces">
            <summary>
                Gets SupportedNamespaces.
            </summary>
        </member>
        <member name="T:BlogEngine.Core.Web.HttpHandlers.JavaScriptHandler">
            <summary>
            Removes whitespace in all stylesheets added to the 
                header of the HTML document in site.master.
            </summary>
            <remarks>
            
            This handler uses an external library to perform minification of scripts. 
            See the BlogEngine.Core.JavascriptMinifier class for more details.
            
            </remarks>
        </member>
        <member name="M:BlogEngine.Core.Web.HttpHandlers.JavaScriptHandler.ProcessRequest(System.Web.HttpContext)">
            <summary>
            Enables processing of HTTP Web requests by a custom 
                HttpHandler that implements the <see cref="T:System.Web.IHttpHandler"></see> interface.
            </summary>
            <param name="context">
            An <see cref="T:System.Web.HttpContext"></see> object that provides 
                references to the intrinsic server objects 
                (for example, Request, Response, Session, and Server) used to service HTTP requests.
            </param>
        </member>
        <member name="M:BlogEngine.Core.Web.HttpHandlers.JavaScriptHandler.SetHeaders(System.Int32,System.Web.HttpContext)">
            <summary>
            This will make the browser and server keep the output
                in its cache and thereby improve performance.
            </summary>
            <param name="hash">
            The hash number.
            </param>
            <param name="context">
            The context.
            </param>
        </member>
        <member name="P:BlogEngine.Core.Web.HttpHandlers.JavaScriptHandler.IsReusable">
            <summary>
                Gets a value indicating whether another request can use the <see cref = "T:System.Web.IHttpHandler"></see> instance.
            </summary>
            <value></value>
            <returns>true if the <see cref = "T:System.Web.IHttpHandler"></see> instance is reusable; otherwise, false.</returns>
        </member>
    </members>
</doc>
