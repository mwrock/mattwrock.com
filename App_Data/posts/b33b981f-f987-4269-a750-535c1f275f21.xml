<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<post>
  <author>mwrock</author>
  <title>Released RequestReduce 1.7.0: Giving the RequestReduce onboarding story a happy beginning</title>
  <description />
  <content>&lt;p&gt;About six weeks ago I &lt;a href="http://www.mattwrock.com/post/2011/11/20/Adding-CSS-Inheritance-Resolution-to-RequestReduce-Sprite-Generation-Process.aspx"&gt;blogged&lt;/a&gt; about an issue with &lt;a href="http://RequestReduce.com"&gt;RequestReduce&lt;/a&gt; and its limitations with resolving image properties of each CSS class. To recap, until today, RequestReduce treated each CSS class as an atomic unit and ignored any other classes that it may be able to inherit from. The worst side effect of this is a page that already has sprites but uses one class to specify the image, width, height, and repeatability. Then uses several separate classes each containing the background-position property of each image in the sprite sheet. Something like this:&lt;/p&gt;
&lt;div id="codeSnippetWrapper"&gt;
&lt;pre id="codeSnippet" style="text-align: left; line-height: 12pt; background-color: #f4f4f4; margin: 0em; width: 100%; font-family: 'Courier New', courier, monospace; direction: ltr; color: black; font-size: 8pt; overflow: visible; border-style: none; padding: 0px;"&gt;&lt;span style="color: #cc6633;"&gt;.nav-home&lt;/span&gt; a &lt;span style="color: #0000ff;"&gt;span&lt;/span&gt;{&lt;br /&gt;    &lt;span style="color: #0000ff;"&gt;display&lt;/span&gt;:&lt;span style="color: #006080;"&gt;block;&lt;/span&gt;&lt;br /&gt;    &lt;span style="color: #0000ff;"&gt;width&lt;/span&gt;:&lt;span style="color: #006080;"&gt;110px;&lt;/span&gt;&lt;br /&gt;    &lt;span style="color: #0000ff;"&gt;padding&lt;/span&gt;:&lt;span style="color: #006080;"&gt;120px 0 0 0;&lt;/span&gt;&lt;br /&gt;    &lt;span style="color: #0000ff;"&gt;margin&lt;/span&gt;:&lt;span style="color: #006080;"&gt;5px;&lt;/span&gt;&lt;span style="color: #0000ff;"&gt;float&lt;/span&gt;:&lt;span style="color: #006080;"&gt;left;&lt;/span&gt;&lt;br /&gt;    &lt;span style="color: #0000ff;"&gt;background&lt;/span&gt;:url(../images/ui/sprite-home-nav&lt;span style="color: #cc6633;"&gt;.png&lt;/span&gt;?cdn_id=h37) no&lt;span style="color: #006080;"&gt;-repeat 0 1px;&lt;/span&gt;&lt;br /&gt;    &lt;span style="color: #0000ff;"&gt;cursor&lt;/span&gt;:pointer&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;&lt;span style="color: #cc6633;"&gt;.nav-home&lt;/span&gt; a&lt;span style="color: #cc6633;"&gt;.get-started&lt;/span&gt; &lt;span style="color: #0000ff;"&gt;span&lt;/span&gt;{&lt;span style="color: #0000ff;"&gt;background-position&lt;/span&gt;:0 1px}&lt;br /&gt;&lt;br /&gt;&lt;span style="color: #cc6633;"&gt;.nav-home&lt;/span&gt; a&lt;span style="color: #cc6633;"&gt;.download&lt;/span&gt; &lt;span style="color: #0000ff;"&gt;span&lt;/span&gt;{&lt;span style="color: #0000ff;"&gt;background-position&lt;/span&gt;:-110px 1px}&lt;br /&gt;&lt;br /&gt;&lt;span style="color: #cc6633;"&gt;.nav-home&lt;/span&gt; a&lt;span style="color: #cc6633;"&gt;.forums&lt;/span&gt; &lt;span style="color: #0000ff;"&gt;span&lt;/span&gt;{&lt;span style="color: #0000ff;"&gt;background-position&lt;/span&gt;:-220px 1px}&lt;br /&gt;&lt;br /&gt;&lt;span style="color: #cc6633;"&gt;.nav-home&lt;/span&gt; a&lt;span style="color: #cc6633;"&gt;.host&lt;/span&gt; &lt;span style="color: #0000ff;"&gt;span&lt;/span&gt;{&lt;span style="color: #0000ff;"&gt;background-position&lt;/span&gt;:-330px 1px}&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;What RequestReduce would do in a case like this is resprite .nav-home a span because it has all of the properties needed in order to construct the viewport and parse out the sprite correctly. However, once this was done, the lower four classes containing the positions of the actual images rendered a distorted image. This is because RequestReduce recreated a new sprite image with the original images placed in different positions than they were on the original sprite sheet. So the background positions of the other nav-home images point to invalid positions.&lt;/p&gt;
&lt;p&gt;If you are creating a site that pays tribute to abstract art, you may be pleasantly surprised by these transformations. You may be saying, &amp;ldquo;If only RequestReduce would change my font to wing dings, it would be the perfect tool.&amp;rdquo; Well, unfortunately you are not the RequestReduce target audience.&lt;/p&gt;
&lt;h2&gt;RequestRecuce should never change the visual rendering of a site&lt;/h2&gt;
&lt;p&gt;One of the primary underlying principles I try to adhere to throughout the development of RequestReduce is to leave no visible trace of its interaction. The default behavior is always to optimize as much as possible without risk of breaking the page. For example, I could move scripts to the bottom or dynamically create script tags in the DOM to load them asynchronously and in many cases improve rendering performance but very often this would break functionality. Any behavior that could potentially break a page must be &amp;ldquo;requested&amp;rdquo; or opted in to via config or API calls.&lt;/p&gt;
&lt;p&gt;This spriting behavior violated this rule all to often. I honestly did not know how wide spread this pattern was. My vision is to have people drop RequestReduce onto their site and have it&amp;nbsp; &amp;ldquo;just work&amp;rdquo; without any tweaking. What I had been finding was that many many sites and most if not all &amp;ldquo;sophisticated&amp;rdquo; sites already using some spriting render with unpleasant side-effects when they deploy RequestReduce without adjustments. While I have done my best to warn users of this in my docs and provide guidance on how to prepare a site for RequestReduce, I had always thought that the need for this documentation and guidance would be more the exception than the rule.&lt;/p&gt;
&lt;p&gt;I have now participated in onboarding some fairly large web properties at Microsoft onto RequestReduce. The process of making these adjustments really proved to be a major burden. Its not hard like rocket science, its just very tedious and time consuming. I think we&amp;rsquo;d all rather be building rockets over twiddling with css classes.&lt;/p&gt;
&lt;h2&gt;Locating other css properties that may be used in another css class&lt;/h2&gt;
&lt;p&gt;It just seemed to me that given a little work, one could discover other properties from one css class that could be included in another. So my first stab at this was a very thorough reverse engineering of css inheritance and specificity scoring. For every class, I determined all the other classes that could potentially &amp;ldquo;contribute&amp;rdquo; to that class. So given a selector:&lt;/p&gt;
&lt;div id="codeSnippetWrapper"&gt;
&lt;pre id="codeSnippet" style="text-align: left; line-height: 12pt; background-color: #f4f4f4; margin: 0em; width: 100%; font-family: 'Courier New', courier, monospace; direction: ltr; color: black; font-size: 8pt; overflow: visible; border-style: none; padding: 0px;"&gt;&lt;span style="color: #0000ff;"&gt;h1&lt;/span&gt;&lt;span style="color: #cc6633;"&gt;.large&lt;/span&gt; &lt;span style="color: #cc6633;"&gt;.icon&lt;/span&gt; a&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Dom elements that can inherit from this class could also inherit from:&lt;/p&gt;
&lt;div id="codeSnippetWrapper"&gt;
&lt;pre id="codeSnippet" style="text-align: left; line-height: 12pt; background-color: #f4f4f4; margin: 0em; width: 100%; font-family: 'Courier New', courier, monospace; direction: ltr; color: black; font-size: 8pt; overflow: visible; border-style: none; padding: 0px;"&gt;a&lt;br /&gt;&lt;span style="color: #cc6633;"&gt;.icon&lt;/span&gt; a&lt;br /&gt;&lt;span style="color: #0000ff;"&gt;h1&lt;/span&gt; &lt;span style="color: #cc6633;"&gt;.icon&lt;/span&gt; a&lt;br /&gt;&lt;span style="color: #cc6633;"&gt;.large&lt;/span&gt; &lt;span style="color: #cc6633;"&gt;.icon&lt;/span&gt; a&lt;br /&gt;&lt;span style="color: #cc6633;"&gt;.large&lt;/span&gt; a&lt;br /&gt;etc...&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;For every class that had a &amp;ldquo;transformable&amp;rdquo; property (background-image or background-position), I would iterate all other classes containing properties I was interested in (width, height, padding, background properties) and order them by specificity. The rules of css specificity can be found &lt;a href="http://www.w3.org/TR/CSS2/cascade.html#specificity"&gt;here&lt;/a&gt;. Essentially each ID in a selector is given a score of 100, each class and pseudo class a score of 10 and each element and pseudo element a score of 1. Inline styles get a score of 1000, but I can&amp;rsquo;t see the dom and the &amp;ldquo;Universal&amp;rdquo; element or * is given a score of 0. Any two selector with a matching score determines its winner by the one that appears last in the css.&lt;/p&gt;
&lt;p&gt;Once I had this sorted list, I would iterate down the list stealing missing properties until all my properties were occupied or I hit the end of the list.&lt;/p&gt;
&lt;p&gt;At first this worked great and I thought I was really on to something but I quickly realizing that this was breaking experience all too often. Given the endless possibilities of dom structures, there is just no way to calculate without knowledge of the dom, which class is truly representative. Eventually I settled on only matching up a background image less selector with a background-property with the most eligible and specific selector containing a background-image. While even this strategy could break down,&amp;nbsp; so far every page I throw this at renders perfectly.&lt;/p&gt;
&lt;p&gt;Although this feature does not add any optimization to other sites and only assists larger sites to &lt;a href="http://RequestReduce.com"&gt;RequestReduce&lt;/a&gt;, I&amp;rsquo;m excited to provide a smoother adoption plan. As a project owner who wants his library to be used, I want this adoption plan to be as smooth and frictionless as possible.&lt;/p&gt;
&lt;h2&gt;What else is in v1.7.0?&lt;/h2&gt;
&lt;p&gt;Here is a list in the other features that made it into this release:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Improved performance of processing pages with lots of sprites. This is done by loading each master sprite sheet into memory only once and not each time an individual sprite image is found.&lt;/li&gt;
&lt;li&gt;Prevent RequestReduce from creating an empty file when it processes a single script or css file containing only a comment. After minification, the file is empty.&lt;/li&gt;
&lt;li&gt;Support Windows Authentication when pulling script/css/sprite resources.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;What&amp;rsquo;s Next?&lt;/h2&gt;
&lt;p&gt;Good question. Probably being able to process scripts due to expire in less than a week. Soon after that I want to start tackling foreground image spriting.&lt;/p&gt;</content>
  <ispublished>True</ispublished>
  <isdeleted>False</isdeleted>
  <iscommentsenabled>True</iscommentsenabled>
  <pubDate>2012-01-10 01:11:00</pubDate>
  <lastModified>2012-01-10 01:12:14</lastModified>
  <raters>0</raters>
  <rating>0</rating>
  <slug>Released-RequestReduce-170-Giving-the-RequestReduce-onboarding-story-a-happy-beginning</slug>
  <tags />
  <comments />
  <categories>
    <category>2f8206f0-95a4-449e-bf74-3b2cb761de04</category>
  </categories>
  <notifications />
</post>