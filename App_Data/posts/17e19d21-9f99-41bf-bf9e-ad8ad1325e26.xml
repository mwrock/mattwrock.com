<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<post>
  <author>mwrock</author>
  <title>The Perfect Build Revisited</title>
  <description />
  <content>&lt;p&gt;&lt;a href="http://www.mattwrock.com/image.axd?picture=build.png"&gt;&lt;img style="margin: 0px auto; display: block; float: none" title="build" alt="build" src="http://www.mattwrock.com/image.axd?picture=build_thumb.png" width="480" height="121" /&gt;&lt;/a&gt;&lt;/p&gt;  &lt;p&gt;About two and a half years ago I wrote a &lt;a href="http://www.mattwrock.com/post/2009/09/30/The-Perfect-Build-Part-1.aspx"&gt;series of posts&lt;/a&gt; documenting the work my team had done to automate our build process. We had completed a migration from &lt;a href="http://msdn.microsoft.com/en-us/library/3h0544kx(v=vs.80).aspx"&gt;VSS&lt;/a&gt; to &lt;a href="http://subversion.apache.org/"&gt;SVN&lt;/a&gt; and used a combination of &lt;a href="http://nant.sourceforge.net/"&gt;nAnt&lt;/a&gt; and &lt;a href="http://cruisecontrol.sourceforge.net/"&gt;CruiseControl&lt;/a&gt; to facilitate continuous integration and push button deployments to any of our environments including production.&lt;/p&gt;  &lt;p&gt;Over the last couple months, I’ve had the opportunity to put together an automated deployment process for my current organization at Microsoft. Throughout my career, I’ve worked on a few projects that were essentially a rewrite of a similar project I had worked&amp;#160; on in the past for a different employer. What I love about these kinds of projects is that it is a great opportunity to do so many things better. I can remember those architectural decisions I had made and regretted but was too far in to easily change (usually a smell of an architectural weakness itself). Well now I can avoid them and approach it from the angle I wished I had before. In a way this was a similar situation.&lt;/p&gt;  &lt;p&gt;While I felt good about the system I had put together before, I now had better tools at my disposal. I still think nAnt and CruiseControl are fine tools, but now I’m using &lt;a href="http://technet.microsoft.com/en-us/library/bb978526.aspx"&gt;PowerShell&lt;/a&gt; with &lt;a href="https://github.com/psake/psake"&gt;PSake&lt;/a&gt; instead of nAnt, &lt;a href="http://www.jetbrains.com/teamcity/"&gt;TeamCity&lt;/a&gt; instead of CruiseControl and our source code is in &lt;a href="http://mercurial.selenic.com/"&gt;Mercurial&lt;/a&gt; instead of SVN. The other major difference between the system I’m building now and the one I had worked on before is that this system also includes the automation of server setup and configuration, bringing a clean OS to a full functioning application node serving any tier in the app (web, db, admin, etc.)&lt;/p&gt;  &lt;p&gt;This post is intended to provide an overview of the new system and I may follow up with future posts that dive into more detailed coverage of various parts of the system.&lt;/p&gt;  &lt;h2&gt;Do you really need an automated build and deployment system?&lt;/h2&gt;  &lt;p&gt;Yes. You do.&lt;/p&gt;  &lt;p&gt;You may be thinking that while an automated system sounds neat and all, you simply don’t have time to build one. While I tend to be very pragmatic in my approach to software architecture, I definitely see automated deployments as a must have and not a “nice to have.” The reason I say this is that over several deployments, more time is lost in the mechanics of deploying and there is far more risk of a bad deployment and there is more difficulty and time spent in troubleshooting deployments than if the deployment were automated.&lt;/p&gt;  &lt;p&gt;Often, teams do not recognize the value of automated deployments until they experience it. Once they work with one, they cant imagine going back. With automated build and deployments, the drama of deployments is reduced to a simple routine task and teams have more time to focus on building features and business has more confidence that their features will move forward reliably and consistently. If you want to release more often and perhaps extend continuous integration to continuous deployment, you simply must automate the deployment process.&lt;/p&gt;  &lt;h2&gt;If they are so important, why did it take you over two years to start building one?&lt;/h2&gt;  &lt;p&gt;Fair question. I don’t intend to enumerate the political reasons, which there are many, here. That will have to wait for my memoire due out in 2042, “My life, a love song,” please keep an eye out for that one.&lt;/p&gt;  &lt;p&gt;Throughout my tenure in the MSDN/Technet org at Microsoft, deployments have been managed by a combination of test and a “build team” in the Ops group. While I have certainly been vocal in pushing for more automation, the fact that other people do most of the work and that there was resistance from some to automating the process, caused me to direct my focus on other things. There were certainly pain points along the way. There was a lot of ceremony involved in preparing for a deployment and in scheduling “hot fixes” with the build team. When there were problems with a deployment, it could be difficult sometimes to determine where things went wrong.&lt;/p&gt;  &lt;p&gt;Recently, we transitioned to a new offshore vendor company. One of their responsibilities would be deployments and setting up new environments. Because these were mostly done manually, the logistics involved were often communicated verbally and via large step by step Word documents.&lt;/p&gt;  &lt;p&gt;&lt;em&gt;A side note: Many cultures have built a very rich and vibrant heritage around Oral history and story telling. I do not in any way want to disrespect these traditions. On the contrary, we should celebrate them. I do not believe that oral histories lend themselves well to automated builds and deployments.&lt;/em&gt;&lt;/p&gt;  &lt;p&gt;Without going into the details, a lot fell through the cracks as the new team came on&amp;#160; board. I do not fault the people on this team, I wouldn’t expect anyone to be able to build an environment for a complex app that they have never worked on before based on a few phone conversations and a sharepoint wiki. Our environment setups and deployments suddenly started having problems. Because a large part of the code I am involved with spans over several apps, I am often approached when things go wrong here and before long I found myself spending most of my time troubleshooting and fixing environments and their deployments. It soon became crystal clear that until an automated system was in place, this would continue to stand in my way of getting real feature work done. And instead of whining and complaining about it, I decided to just do it.&lt;/p&gt;  &lt;h2&gt;What exactly does a automated build and deployment system do?&lt;/h2&gt;  &lt;p&gt;For the system I set out to build, the following key components are included:&lt;/p&gt;  &lt;ol&gt;   &lt;li&gt;Application compilation and packaging &lt;/li&gt;    &lt;li&gt;Deployment of application packages to various environments &lt;/li&gt;    &lt;li&gt;Bootstrap scripts for setting up a new server or environment &lt;/li&gt; &lt;/ol&gt;  &lt;p&gt;The last one has inspired a new personal side project, &lt;a href="http://autobox.codeplex.com/"&gt;Autobox&lt;/a&gt;, that sets out to automate the building of a developer machine (or any kind of personal machine) from bare OS via a single command line. After all, if I can create a test server with sql server, app fabric caching, various windows services, and web applications along with all the file permissions and firewall rules involved, certainly I can create my own machine with all my preferred apps and settings ready to go.&lt;/p&gt;  &lt;p&gt;Lets examine each of these individually.&lt;/p&gt;  &lt;h2&gt;Application compilation and packaging&lt;/h2&gt;  &lt;p&gt;This is essentially the process that transforms the raw application bits with all of its code files, static assets, sql scripts, config files, and other application specific files into a zip file that can be consumed by the deployment scripts. This package in our case is typically composed of a directory for each application tier. Here is the package for our Galleries application:&lt;/p&gt;  &lt;p&gt;&lt;a href="http://www.mattwrock.com/image.axd?picture=image_13.png"&gt;&lt;img style="background-image: none; border-right-width: 0px; margin: 0px 10px 0px 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://www.mattwrock.com/image.axd?picture=image_thumb_13.png" width="239" height="356" /&gt;&lt;/a&gt;&lt;/p&gt;  &lt;p&gt;&amp;#160;&lt;/p&gt;  &lt;p&gt;&amp;#160;&lt;/p&gt;  &lt;p&gt;&amp;#160;&lt;/p&gt;  &lt;p&gt;&amp;#160;&lt;/p&gt;  &lt;p&gt;&amp;#160;&lt;/p&gt;  &lt;p&gt;&amp;#160;&lt;/p&gt;  &lt;p&gt;&amp;#160;&lt;/p&gt;  &lt;p&gt;&amp;#160;&lt;/p&gt;  &lt;p&gt;The packaging process is responsible for the actual compilation which typically involves a call to msuild and which invokes the appropriate msbuild tasks from the original Visual Studio solution. In addition to transforming source files to compiled DLLs, the packaging process copies everything needed to deploy the application into a coherent directory structure and nothing more. This typically includes powershell scripts and various command line tools that run sql scripts to update the database with any schema changes, adds meta data to lookup tables or migrates old data to conform to new schema or logic. It may also include scripts responsible for transforming web.config and app.configs&amp;#160; with settings appropriate for the environment.&lt;/p&gt;  &lt;p&gt;This first step of the build and deployment process had been in place for quite some time so I just had to make some minor tweaks here and there. The individual application teams in my group are responsible for keeping the packaging scripts up to date and it is wired into our continuous Integration process. Every push of source code to the central Mercurial repository forces our build server, Teamcity, to invoke a set of scripts that include compilation, running unit tests and finally packaging. TeamCity then saves the zipped package and makes it available to the deployment scripts. If you are familiar with Teamcity, you know this is the build “Artifacts.”&lt;/p&gt;  &lt;h2&gt;Deployment of application packages to various environments&lt;/h2&gt;  &lt;p&gt;Here is where my work largely started. Until recently, we had a script that TeamCity would invoke twice a day which would collect the packages of each app and aggregate them into another package for each deployable environment. This uses TeamCity dependent builds which will pull the build artifacts of the last successful application build into the deployment script’s working directory. Here are my Deployment Build settings that declare the dependencies:&lt;/p&gt;  &lt;p&gt;&lt;a href="http://www.mattwrock.com/image.axd?picture=image_14.png"&gt;&lt;img style="background-image: none; border-right-width: 0px; margin: 0px 10px 0px 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://www.mattwrock.com/image.axd?picture=image_thumb_14.png" width="668" height="253" /&gt;&lt;/a&gt;&lt;/p&gt;  &lt;p&gt;So in our case, we would have application packages for Forums, Search, Profile and various internal services as seen above and these would all be rolled into a single 7z file for each environment including test, staging, production, etc. This packaging script was also responsible for the final transformation of the configuration files. It would merge settings specific to each environment into the web and app configs so that the final package, say prod-7791.7z (7791 being the build number), had the exact web and app configs that would end up in production.&lt;/p&gt;  &lt;p&gt;Well this would take 2 and a half hours to run. Back in the day it was fairly fast but as environments got added, the process took longer and longer. It would then take the build team a couple hours to take this package and deploy its bits to each server, run the database upgrade scripts, stop and restart services, smoke test, etc. This could become more and more painful the closer we got to release because as dev would fix bugs, it could take one to two days before they received feedback from test on those bugs.&lt;/p&gt;  &lt;p&gt;Revamping this was fairly straight forward. I rewrote this script to transform the configs for only a single environment which it would receive via a command parameter from TeamCity. I created a separate build config in TeamCity to make this very clear:&lt;/p&gt;  &lt;p&gt;&lt;a href="http://www.mattwrock.com/image.axd?picture=image_15.png"&gt;&lt;img style="background-image: none; border-right-width: 0px; margin: 0px 10px 0px 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://www.mattwrock.com/image.axd?picture=image_thumb_15.png" width="642" height="280" /&gt;&lt;/a&gt;&lt;/p&gt;  &lt;p&gt;&amp;#160;&lt;/p&gt;  &lt;p&gt;&amp;#160;&lt;/p&gt;  &lt;p&gt;&amp;#160;&lt;/p&gt;  &lt;p&gt;Each of these build configurations run the exact same script but they each pass different command line arguments to the build script indicating their environment. Also, some are wired to different Version Control branches. For example, our Int (Integration) environment builds off of the Release Candidate branch while the others build off of Trunk. Finally there is an “Ad Hoc” config where anyone can run a custom build with custom command line parameters. If the Ad Hoc build fails no one is notified and we don’t get particularly alarmed. Here is how the command line parameters are wired up for custom builds in TeamCity:&lt;/p&gt;  &lt;p&gt;&lt;a href="http://www.mattwrock.com/image.axd?picture=image_16.png"&gt;&lt;img style="background-image: none; border-right-width: 0px; margin: 0px 10px 0px 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://www.mattwrock.com/image.axd?picture=image_thumb_16.png" width="700" height="614" /&gt;&lt;/a&gt;&lt;/p&gt;  &lt;p&gt;&amp;#160;&lt;/p&gt;  &lt;p&gt;The script is a normal powershell script that gets called via psake. Psake provides a very nice powershell based container for running builds. Think of it as an alternative to writing an MSBuild script. While MSBuild is more XML based and very declarative in nature, PSake allows you to script out all of your build tasks in powershell which makes a lot of sense for the type of things that a build script does - such as copying files around. I’m not going to dive into a PSake tutorial here but here is a snippet of my PSake script:&lt;/p&gt;  &lt;div id="codeSnippetWrapper"&gt;   &lt;pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; background-color: #f4f4f4; margin: 0em; border-left-style: none; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; border-right-style: none; font-size: 8pt; overflow: visible; padding-top: 0px" id="codeSnippet"&gt;properties {&lt;br /&gt;    $current = Resolve-Path .\&lt;span style="color: #0000ff"&gt;default&lt;/span&gt;.ps1 | Split-Path&lt;br /&gt;    $path = $current&lt;br /&gt;    $BuildNumber = 0&lt;br /&gt;    $ConfigDrop = &lt;span style="color: #006080"&gt;&amp;quot;.\_configs&amp;quot;&lt;/span&gt;&lt;br /&gt;    $WebDrop = &lt;span style="color: #006080"&gt;&amp;quot;http&amp;quot;&lt;/span&gt;&lt;br /&gt;    $Environment = &lt;span style="color: #006080"&gt;&amp;quot;DEFAULT&amp;quot;&lt;/span&gt;&lt;br /&gt;    $configVariables = New-Object System.Collections.Queue&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;Include .\psake\teamcity.ps1&lt;br /&gt;&lt;br /&gt;task &lt;span style="color: #0000ff"&gt;default&lt;/span&gt; -depends Package&lt;br /&gt;task Configs -depends Copy-readme, SetupEnvironment, Configure-Social, &lt;br /&gt;    Configure-StoApps, Configure-Services, Configure-SocialServices&lt;br /&gt;task Package -depends SetupEnvironment, Clean, Configs, Database, preparesearch, &lt;br /&gt;    SocialSites, StoApps, SocialServices, StopServices, Services, CopyConfigs, &lt;br /&gt;    StartServices, FlushRequestReduce, RestartIIS, RestartAppFabric, TestPages, &lt;br /&gt;    CleanEnvironment&lt;br /&gt;&lt;br /&gt;TaskSetup {&lt;br /&gt;    TeamCity-ReportBuildStart &lt;span style="color: #006080"&gt;&amp;quot;Starting task $($psake.context.Peek().currentTaskName)&amp;quot;&lt;/span&gt;&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;TaskTearDown {&lt;br /&gt;    TeamCity-ReportBuildFinish &lt;span style="color: #006080"&gt;&amp;quot;Finishing task $($psake.context.Peek().currentTaskName)&amp;quot;&lt;/span&gt;&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;Task SetupEnvironment {&lt;br /&gt;    .\Utilities\EnvironmentSetup.ps1 $current $Environment $configVariables&lt;br /&gt;}&lt;br /&gt;&lt;/pre&gt;

  &lt;br /&gt;&lt;/div&gt;

&lt;p&gt;This is not any kind of special scripting language. It is normal powershell. PSake provides a Powershell module which exposes several functions like Task, Properties, etc. Many of these take script blocks as parameters. The &lt;a href="https://github.com/psake/psake/blob/master/psake.psm1"&gt;PSake module&lt;/a&gt; really is not very large and therefore it does not take much investment to understand what it does and what functionality it provides. It really does not provide much “functionality” at all in terms of utility methods but it provides a very nice framework for organizing the various parts of your build script and specifying dependencies. &lt;/p&gt;

&lt;p&gt;The snippet above is the beginning of my deployment script. The Properties section defines and sets script wide variables and these can be overridden via command line parameters when calling PSake. Next are my tasks. Tasks might actually do something like the SetupEnvironment task at the bottom. Or they might alias a group of tasks to be run in a specific order like the default, Configs and Package tasks. If you are familiar to msbuild, these are simply the equivilent of msbuild targets.&lt;/p&gt;

&lt;p&gt;When you call PSake, you can tell it to run a specific task or if you do not, it will run the default task. Even though I am not including most of my script here, it is not difficult to tell what the deployment script does by simply looking at the dependencies of the default task. It first sets up the environment by calling another powershell script that will set a bunch of global environment variables specific to the Environment property. It performs a clean of any previous build, it transforms the configs, and runs the database scripts. Then it executes several tasks that copy different directories to the web server, stops some windows services, copies the services code, starts the services, restarts IIS, runs some quick tests to make sure the apps are loading and finally cleans up after itself.&lt;/p&gt;

&lt;p&gt;One nice thing about this script is that it does not use any kind of remoting which can be important in some environments. The script can be run directly from the build agent (the server running the TeamCity Build Agent service) and target any environment. It does require that the Service Identity under which TeamCity runs, is an administrator on the target web servers and sql servers. To give you a glimpse into what is going on here, I specify all the server names specific to each environment in a config file named after the environment. So our Next (daily build) environment has a file called Next.ps1 that among many other things contains:&lt;/p&gt;

&lt;div&gt;
  &lt;pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; background-color: #f4f4f4; margin: 0em; border-left-style: none; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; border-right-style: none; font-size: 8pt; overflow: visible; padding-top: 0px" id="codeSnippet"&gt;$global:WebServers                = &lt;span style="color: #006080"&gt;&amp;quot;RR1STOCSAVWB18&amp;quot;&lt;/span&gt;, &lt;span style="color: #006080"&gt;&amp;quot;RR1STOCSAVWB17&amp;quot;&lt;/span&gt;&lt;br /&gt;$global:ServicesServer                = &lt;span style="color: #006080"&gt;&amp;quot;RR1STOCSAVWB17&amp;quot;&lt;/span&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;div&gt;&amp;#160;&lt;/div&gt;

&lt;div&gt;Then my RestartIIS task looks like this:&lt;/div&gt;

&lt;div id="codeSnippetWrapper"&gt;
  &lt;pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; background-color: #f4f4f4; margin: 0em; border-left-style: none; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; border-right-style: none; font-size: 8pt; overflow: visible; padding-top: 0px" id="codeSnippet"&gt;Task RestartIIS {&lt;br /&gt;    Restart-IIS $global:WebServers&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;function Restart-IIS([array] $servers) {&lt;br /&gt;    &lt;span style="color: #0000ff"&gt;foreach&lt;/span&gt; ($server &lt;span style="color: #0000ff"&gt;in&lt;/span&gt; $servers) {&lt;br /&gt;        .\Utilities\RemoteService.ps1 ($server -split &lt;span style="color: #006080"&gt;&amp;quot;\\&amp;quot;)[0] restart -service &amp;quot;&lt;/span&gt;W3SVC&amp;quot;&lt;br /&gt;    }&lt;br /&gt;}&lt;br /&gt;&lt;/pre&gt;

  &lt;br /&gt;&lt;/div&gt;
RemoteServices.ps1 contains a bunch of functions to make working with services on remote servers not so painful. 

&lt;div&gt;&amp;#160;&lt;/div&gt;

&lt;h3&gt;Did the deployment succeed?&lt;/h3&gt;

&lt;p&gt;At any point in the scripts, if an error occurs, the build will fail. However, I also want to have some way to quickly check each application and ensure they can at least load. It is very possible that&amp;#160; the build script will complete just fine, but there may be something in the latest app code or some change to the environment that causes an application to fail. If this happens, I want to know which app failed, fail the build and provide straight forward reporting to testers to discover where things broke down. Yes, each app build has its own set of unit tests. Most apps have thousands but there are a multitude of issues both code related and server or network related that can slip through the cracks and cause the app to fail.&lt;/p&gt;

&lt;p&gt;At the end of every deployment, a series of URLs are “pinged” and expected to return a 200 HTTP status code. Currently we have 28 URLs in our tests. Now a big reason for overhauling this system was to make it faster,so a big concern is that launching a bunch of app URLs will profoundly slow the build. To try to make this as efficient as possible, we use powershell jobs to multi thread the http requests and set a 5 minute timeout that will automatically fail all tests that do not complete before the timeout.&lt;/p&gt;

&lt;p&gt;Here is the testing script:&lt;/p&gt;

&lt;div id="codeSnippetWrapper"&gt;
  &lt;div id="codeSnippetWrapper"&gt;
    &lt;pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; background-color: #f4f4f4; margin: 0em; border-left-style: none; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; border-right-style: none; font-size: 8pt; overflow: visible; padding-top: 0px" id="codeSnippet"&gt;&lt;br /&gt;task TestPages -depends SetupEnvironment {&lt;br /&gt;    . .\tests.ps1&lt;br /&gt;    Wait-Job -Job $openRequests -Timeout 300&lt;br /&gt;    &lt;span style="color: #0000ff"&gt;foreach&lt;/span&gt; ($request &lt;span style="color: #0000ff"&gt;in&lt;/span&gt; $openRequests) {&lt;br /&gt;        TeamCity-TestStarted $request.Name&lt;br /&gt;        $jobOutput = (Receive-Job $request)&lt;br /&gt;        &lt;span style="color: #0000ff"&gt;if&lt;/span&gt;($jobOutput -&lt;span style="color: #0000ff"&gt;is&lt;/span&gt; [system.array]) {$jobOutput = $jobOutput[-1]}&lt;br /&gt;        $testParts = $jobOutput -split &lt;span style="color: #006080"&gt;&amp;quot; ::: &amp;quot;&lt;/span&gt;&lt;br /&gt;        &lt;span style="color: #0000ff"&gt;if&lt;/span&gt;($testParts.Length -eq 2) {&lt;br /&gt;            $testMessage=$testParts[1]&lt;br /&gt;            $testTime=$testParts[0]&lt;br /&gt;        }&lt;br /&gt;        &lt;span style="color: #0000ff"&gt;else&lt;/span&gt; {&lt;br /&gt;            $testMessage=$testParts[0]&lt;br /&gt;            $testTime=300&lt;br /&gt;        }&lt;br /&gt;        &lt;span style="color: #0000ff"&gt;if&lt;/span&gt;($request.state -ne &lt;span style="color: #006080"&gt;&amp;quot;Completed&amp;quot;&lt;/span&gt;) {&lt;br /&gt;            TeamCity-TestFailed $request.Name &lt;span style="color: #006080"&gt;&amp;quot;Timeout&amp;quot;&lt;/span&gt; &lt;span style="color: #006080"&gt;&amp;quot;Test did not complete within timeout.&amp;quot;&lt;/span&gt;&lt;br /&gt;        }&lt;br /&gt;        Remove-Job $request -Force&lt;br /&gt;        &lt;span style="color: #0000ff"&gt;if&lt;/span&gt; ($testMessage -like &lt;span style="color: #006080"&gt;&amp;quot;Failed*&amp;quot;&lt;/span&gt;) {&lt;br /&gt;            TeamCity-TestFailed $request.Name &lt;span style="color: #006080"&gt;&amp;quot;Did not Recive a 200 Response&amp;quot;&lt;/span&gt; $testMessage&lt;br /&gt;        }&lt;br /&gt;        TeamCity-TestFinished $request.Name $testTime&lt;br /&gt;    }&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;function Ping ([&lt;span style="color: #0000ff"&gt;string&lt;/span&gt;] $pingUrl) {&lt;br /&gt;    $jobArray = @()&lt;br /&gt;    $job = Start-Job -scriptblock {param($url)&lt;br /&gt;        $host.UI.RawUI.BufferSize = New-Object System.Management.Automation.Host.Size(8192,50)&lt;br /&gt;        $ms = (Measure-Command {&lt;br /&gt;            $web=[net.httpwebrequest]::create($url)&lt;br /&gt;            $web.AllowAutoRedirect = $&lt;span style="color: #0000ff"&gt;true&lt;/span&gt;&lt;br /&gt;            $web.PreAuthenticate = $&lt;span style="color: #0000ff"&gt;true&lt;/span&gt;&lt;br /&gt;            $web.Timeout = 300000&lt;br /&gt;            $systemWebProxy = [net.webrequest]::GetSystemWebProxy()&lt;br /&gt;            $systemWebProxy.Credentials = [net.CredentialCache]::DefaultCredentials&lt;br /&gt;            $web.Proxy = $systemWebProxy&lt;br /&gt;            $web.Credentials = [net.CredentialCache]::DefaultCredentials&lt;br /&gt;            &lt;span style="color: #0000ff"&gt;try&lt;/span&gt; {&lt;br /&gt;                $resp=$web.GetResponse()&lt;br /&gt;            }&lt;br /&gt;            &lt;span style="color: #0000ff"&gt;catch&lt;/span&gt; [System.Net.WebException]{&lt;br /&gt;                $resp=$_.Exception.Response&lt;br /&gt;                $outerMessage = $_.Exception.Message&lt;br /&gt;                $innerMessage = $_.Exception.InnerException&lt;br /&gt;            }&lt;br /&gt;        }).TotalMilliseconds&lt;br /&gt;        $status = [&lt;span style="color: #0000ff"&gt;int&lt;/span&gt;]$resp.StatusCode&lt;br /&gt;        &lt;span style="color: #0000ff"&gt;if&lt;/span&gt; ($status -ne 200) {&lt;br /&gt;            $badServer = $resp.Headers[&lt;span style="color: #006080"&gt;&amp;quot;Server&amp;quot;&lt;/span&gt;]&lt;br /&gt;            Write-Output &lt;span style="color: #006080"&gt;&amp;quot;$ms ::: Failed to retrieve $url in $ms ms with status code: &lt;br /&gt;                $status from server: $badServer&amp;quot;&lt;/span&gt;&lt;br /&gt;            Write-Output $outerMessage&lt;br /&gt;            Write-Output $innerMessage&lt;br /&gt;        }&lt;br /&gt;        &lt;span style="color: #0000ff"&gt;else&lt;/span&gt; {&lt;br /&gt;            Write-Output &lt;span style="color: #006080"&gt;&amp;quot;$ms ::: Succeeded retrieving $url in $ms ms&amp;quot;&lt;/span&gt;&lt;br /&gt;        }&lt;br /&gt;    } -name &lt;span style="color: #006080"&gt;&amp;quot;$pingUrl&amp;quot;&lt;/span&gt; -ArgumentList $pingUrl&lt;br /&gt;    $jobArray += $Job&lt;br /&gt;    &lt;span style="color: #0000ff"&gt;return&lt;/span&gt; $jobArray&lt;br /&gt;}&lt;/pre&gt;

    &lt;br /&gt;The individual test URLs are in the dot sourced tests.ps1:&lt;/div&gt;

  &lt;div id="codeSnippetWrapper"&gt;
    &lt;div&gt;
      &lt;pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; background-color: #f4f4f4; margin: 0em; border-left-style: none; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; border-right-style: none; font-size: 8pt; overflow: visible; padding-top: 0px" id="codeSnippet"&gt;$openRequests += Ping &lt;span style="color: #006080"&gt;&amp;quot;http://$global:ServicesUrl/ChameleonService/Api.svc&amp;quot;&lt;/span&gt;&lt;br /&gt;$openRequests += Ping &lt;span style="color: #006080"&gt;&amp;quot;http://$global:AdminUrl/ChameleonAdmin/&amp;quot;&lt;/span&gt;&lt;br /&gt;$openRequests += Ping &lt;span style="color: #006080"&gt;&amp;quot;http://$global:ServicesUrl/SearchProviderServices/SearchProviderService.svc&amp;quot;&lt;/span&gt;&lt;br /&gt;$openRequests += Ping &lt;span style="color: #006080"&gt;&amp;quot;http://$global:ProfileApiUrl/ProfileApi/v1/profile/displayname/vamcalerts&amp;quot;&lt;/span&gt;&lt;br /&gt;$openRequests += Ping &lt;span style="color: #006080"&gt;&lt;a href="http://$global:UserCardLoaderUrl"&gt;http://$global:UserCardLoaderUrl&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;...&lt;br /&gt;&lt;/pre&gt;
    &lt;/div&gt;

    &lt;p&gt;An interesting thing to note here are the use of the functions beginning with TeamCity-. These are functions coming from a &lt;a href="https://github.com/psake/psake-contrib/blob/master/teamcity.psm1"&gt;module&lt;/a&gt; provided by the &lt;a href="https://github.com/psake/psake-contrib"&gt;pake-contrib project&lt;/a&gt; that exposes several functions allowing you to interact with TeamCity’s messaging infrastructure. The functions I am using here create standard output messages formatted in such a way that TeamCity will treat them like test output reporting when a test starts and finishes as well as if it succeeded or failed and how long it took. What is really nice about all of this is that now these tests light up in TeamCity’s test reporting:&lt;/p&gt;

    &lt;div&gt;&amp;#160;&lt;/div&gt;

    &lt;div&gt;&lt;a href="http://www.mattwrock.com/image.axd?picture=image_17.png"&gt;&lt;img style="background-image: none; border-right-width: 0px; margin: 0px 10px 0px 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://www.mattwrock.com/image.axd?picture=image_thumb_17.png" width="709" height="154" /&gt;&lt;/a&gt; 

      &lt;br /&gt;I can zoom in on my failed tests to see why they failed:&lt;/div&gt;

    &lt;div&gt;&lt;a href="http://www.mattwrock.com/image.axd?picture=image_18.png"&gt;&lt;img style="background-image: none; border-right-width: 0px; margin: 0px 10px 0px 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://www.mattwrock.com/image.axd?picture=image_thumb_18.png" width="730" height="218" /&gt;&lt;/a&gt;&lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Pretty slick eh?&lt;/p&gt;

&lt;h2&gt;Bootstrap scripts for setting up a new server or environment &lt;/h2&gt;

&lt;p&gt;In my original &lt;a href="http://www.mattwrock.com/post/2009/09/30/The-Perfect-Build-Part-1.aspx"&gt;Perfect Build series&lt;/a&gt;, I did not include automation around setting up servers or environments. However one of the habits I picked up from the teams I work with at Microsoft is the inclusion of a build.bat file at the root of every source code repo that can build a development environment from scratch. In the past I had never followed this practice. I had not really used powershell and was not aware of all the possibilities available which is basically that you can do pretty much anything in powershell. I’ll admit there is a learning curve involved but it is well worth it. Being able to fire up a development environment for an app with a single command has proven to be a major time saver and a great way to “document” application requirements.&lt;/p&gt;

&lt;p&gt;Now its one thing to get a dev environment up and running but getting a true server environment up can be more challenging. Since many organizations don’t give developers access to the server environments, setting these up often falls under server operations. This may involve dev sending ops instructions or sitting down with an ops engineer to get a server up and running. A lot of time can be lost here and its easy not to update and properly update these instructions. I have personally spent an aggregate of weeks troubleshooting environments not set up correctly.&lt;/p&gt;

&lt;p&gt;One solution commonly employed here is to use VM images. Once you get an environment set up the way it is supposed to be inside of a VM, take a snapshot and simply apply that snapshot whenever you need to setup a new server. I don’t like this approach. It is too easy for VM images to become stale and they don’t serve well to “document” all of the requirements of an application. The fact is, just about anything can be scripted in powershell and in my opinion, if it cannot be scripted then you have probably made a poor choice in technology. Powershell scripts can replace “deployment documents” or server setup documents. They should be readable by both developers and server support engineers. Even if one is not well versed in powershell, I believe any technical professional should at least be able to read a powershell script and deduce the gist of what it is doing.&lt;/p&gt;

&lt;p&gt;For my applications, I put together a script, again in psake format, that can build any application tier from a bare OS. It can also build a complete environment on a stand alone server. To provide an idea of what my script can do, here is the head of the psake script:&lt;/p&gt;

&lt;div id="codeSnippetWrapper"&gt;
  &lt;pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; background-color: #f4f4f4; margin: 0em; border-left-style: none; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; border-right-style: none; font-size: 8pt; overflow: visible; padding-top: 0px" id="codeSnippet"&gt;properties {&lt;br /&gt;    $currentDir = Resolve-Path .\cleansetup.ps1 | Split-Path&lt;br /&gt;    $profile = &lt;span style="color: #006080"&gt;&amp;quot;$currentDir\CommApps\Profile&amp;quot;&lt;/span&gt;&lt;br /&gt;    $forums = &lt;span style="color: #006080"&gt;&amp;quot;$currentDir\CommApps\Forums&amp;quot;&lt;/span&gt;&lt;br /&gt;    $search = &lt;span style="color: #006080"&gt;&amp;quot;$currentDir\CommApps\Search&amp;quot;&lt;/span&gt;&lt;br /&gt;    $chameleon = &lt;span style="color: #006080"&gt;&amp;quot;$currentDir\CommApps\Chameleon&amp;quot;&lt;/span&gt;&lt;br /&gt;    $configVariables = New-Object System.Collections.Queue&lt;br /&gt;    IF ( TEST-PATH d:\) { $httpShare=&lt;span style="color: #006080"&gt;&amp;quot;d:\http&amp;quot;&lt;/span&gt; } &lt;span style="color: #0000ff"&gt;else&lt;/span&gt; { $httpShare=&lt;span style="color: #006080"&gt;&amp;quot;c:\http&amp;quot;&lt;/span&gt; }&lt;br /&gt;    $env = &lt;span style="color: #006080"&gt;&amp;quot;test&amp;quot;&lt;/span&gt;&lt;br /&gt;    $appFabricShareName = &lt;span style="color: #006080"&gt;&amp;quot;velocity&amp;quot;&lt;/span&gt;&lt;br /&gt;    $buildServerIdentity = &lt;span style="color: #006080"&gt;&amp;quot;Redmond\Idiotbild&amp;quot;&lt;/span&gt;&lt;br /&gt;    $domain = &lt;span style="color: #006080"&gt;&amp;quot;redmond.corp.microsoft.com&amp;quot;&lt;/span&gt;&lt;br /&gt;    $buildServer = &lt;span style="color: #006080"&gt;&amp;quot;EpxTeamCityBuild.redmond.corp.microsoft.com&amp;quot;&lt;/span&gt;&lt;br /&gt;    $buildServerQueue = &lt;span style="color: #006080"&gt;&amp;quot;bt51&amp;quot;&lt;/span&gt;&lt;br /&gt;    $doNotNeedsBits = $&lt;span style="color: #0000ff"&gt;false&lt;/span&gt;&lt;br /&gt;    $addHostFileEntries = $&lt;span style="color: #0000ff"&gt;false&lt;/span&gt;&lt;br /&gt;    $sqlServer = $env:computername&lt;br /&gt;    $appFabricServer = $env:computername&lt;br /&gt;    $AdminServer = $env:computername&lt;br /&gt;    $restartSuffix = &lt;span style="color: #006080"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;br /&gt;    $noProxy = $&lt;span style="color: #0000ff"&gt;true&lt;/span&gt;&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;Include .\psake\teamcity.ps1&lt;br /&gt;&lt;br /&gt;task &lt;span style="color: #0000ff"&gt;default&lt;/span&gt; -depends standalone&lt;br /&gt;task standalone -depends Setup-Proxy, Set-EnvironmentParams, Pull-Bits, Setup-Roles, &lt;br /&gt;    Disable-InternetExplorerESC, Database-server, Install-IIS-Rewrite-Module, &lt;br /&gt;    Install-Velocity, Setup-MSDTC, Install-Event-Sources, Install-Certificates, &lt;br /&gt;    Setup-Response-Headers, Register-ASP, Wait-For-Bits, Setup-IIS, Add-DB-Perms, &lt;br /&gt;    Configure-Velocity, Install-WinServices, Set-Queue-Perms&lt;br /&gt;task WebAppCache-Server -depends Setup-Proxy, Set-EnvironmentParams, Pull-Bits, &lt;br /&gt;    Setup-Roles, Configure-Group-Security, Install-IIS-Rewrite-Module, Install-Velocity, &lt;br /&gt;    Setup-MSDTC, Install-Event-Sources, Install-Certificates, Setup-Response-Headers, &lt;br /&gt;    Register-ASP, Wait-For-Bits, Setup-IIS, Add-DB-Perms, Configure-Velocity, &lt;br /&gt;    Install-WinServices, Set-Queue-Perms&lt;br /&gt;task AppFabric-Server -depends Setup-Proxy, Set-EnvironmentParams, Setup-Roles, &lt;br /&gt;    Configure-Group-Security, Install-Velocity, Configure-Velocity&lt;br /&gt;task Web-server -depends Setup-Proxy, Set-EnvironmentParams, Pull-Bits, Setup-Roles, &lt;br /&gt;    Configure-Group-Security, Install-IIS-Rewrite-Module, Setup-MSDTC, Install-Event-Sources, &lt;br /&gt;    Install-Certificates, Setup-Response-Headers, Register-ASP, Wait-For-Bits, &lt;br /&gt;    Setup-IIS, Add-DB-Perms&lt;br /&gt;task Admin-Server -depends Setup-Proxy, Set-EnvironmentParams, Pull-Bits, Setup-Roles, &lt;br /&gt;    Configure-Group-Security, Install-IIS-Rewrite-Module, Setup-MSDTC, Install-Event-Sources, &lt;br /&gt;    Setup-Response-Headers, Register-ASP, Wait-For-Bits, Setup-IIS, Add-DB-Perms, &lt;br /&gt;    Install-WinServices, Set-Queue-Perms&lt;br /&gt;task Database-Server -depends Set-EnvironmentParams, Configure-Group-Security, &lt;br /&gt;    Install-SqlServer, Create-Databases&lt;br /&gt;task Post-Restart-Full -depends Set-EnvironmentParams, Remove-Startup, &lt;br /&gt;    Configure-Velocity, Install-WinServices, Set-Queue-Perms&lt;br /&gt;task Post-Restart -depends Remove-Startup, Configure-Velocity&lt;br /&gt;task Get-Bits -depends Set-EnvironmentParams, Pull-Bits, Wait-For-Bits&lt;br /&gt;&lt;/pre&gt;

  &lt;br /&gt;&lt;/div&gt;

&lt;p&gt;By looking at the tasks you can get a feel for all that’s involved at each tier. First let me say that this script took about 20x more effort to write than the deployment script. I’m proud to report that I mastered file copying long ago. Once I finally managed to figure out the difference between source and destination, its been smooth sailing ever since. This script really taught me a lot about not only powershell but also a lot about how the windows os and many of the administrative apps work together.&lt;/p&gt;

&lt;p&gt;If I had to identify the step that was the biggest pain in the butt to figure out, by far and away it was installing and configuring &lt;a href="http://msdn.microsoft.com/en-us/windowsserver/ee695849"&gt;AppFabric&lt;/a&gt;. This is Microsoft’s distributed caching solution formerly known as Velocity. One thing that makes it tricky is that, at least in my case, it requires a reboot after installation and before configuration. I certainly do not want to include our entire server setup script here but let me include the AppFabric portion. Again keep in mind this is coming from a psake consumable script. So the tasks can be thought of as the “entry points” of the script while the functions serve as “private” helper methods to those from more formal programming languages.&lt;/p&gt;

&lt;div&gt;
  &lt;pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; background-color: #f4f4f4; margin: 0em; border-left-style: none; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; border-right-style: none; font-size: 8pt; overflow: visible; padding-top: 0px" id="codeSnippet"&gt;task Install-Velocity -depends Install-DotNet4 {&lt;br /&gt;    $global:restartNeeded = $&lt;span style="color: #0000ff"&gt;false&lt;/span&gt;&lt;br /&gt;    Start-Service -displayname &lt;span style="color: #006080"&gt;&amp;quot;Windows Update&amp;quot;&lt;/span&gt;&lt;br /&gt;    &lt;span style="color: #0000ff"&gt;if&lt;/span&gt; (!(Test-Path &lt;span style="color: #006080"&gt;&amp;quot;$env:windir\system32\AppFabric&amp;quot;&lt;/span&gt;)){  &lt;br /&gt;        $dest = &lt;span style="color: #006080"&gt;&amp;quot;appfabric.exe&amp;quot;&lt;/span&gt;  &lt;br /&gt;        &lt;span style="color: #0000ff"&gt;if&lt;/span&gt; (Is64Bit){  &lt;br /&gt;            $url = &lt;span style="color: #006080"&gt;&amp;quot;http://download.microsoft.com/download/1/A/D/&lt;br /&gt;                1ADC8F3E-4446-4D31-9B2B-9B4578934A22/WindowsServerAppFabricSetup_x64_6.1.exe&amp;quot;&lt;/span&gt;  &lt;br /&gt;        } &lt;span style="color: #0000ff"&gt;else&lt;/span&gt;{  &lt;br /&gt;            $url = &lt;span style="color: #006080"&gt;&amp;quot;http://download.microsoft.com/download/1/A/D/&lt;br /&gt;                1ADC8F3E-4446-4D31-9B2B-9B4578934A22/WindowsServerAppFabricSetup_x86_6.1.exe&amp;quot;&lt;/span&gt;       &lt;br /&gt;        }  &lt;br /&gt;        Download-File $url (join-path $currentDir $dest)&lt;br /&gt;        ./appfabric.exe /i &lt;span style="color: #006080"&gt;&amp;quot;cachingservice,cacheclient,cacheadmin&amp;quot;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;        Start-Sleep -s 10&lt;br /&gt;        $p = Get-Process &lt;span style="color: #006080"&gt;&amp;quot;appfabric&amp;quot;&lt;/span&gt;&lt;br /&gt;        $p.WaitForExit()&lt;br /&gt;        $global:restartNeeded = $&lt;span style="color: #0000ff"&gt;true&lt;/span&gt;&lt;br /&gt;    } &lt;span style="color: #0000ff"&gt;else&lt;/span&gt;  &lt;br /&gt;    {  &lt;br /&gt;        Write-Host &lt;span style="color: #006080"&gt;&amp;quot;AppFabric - Already Installed...&amp;quot;&lt;/span&gt; -ForegroundColor Green  &lt;br /&gt;    }      &lt;br /&gt;}&lt;br /&gt;task Configure-Velocity -depends Create-Velocity-Share, Install-Velocity {&lt;br /&gt;    &lt;span style="color: #0000ff"&gt;if&lt;/span&gt;($global:restartNeeded -eq $&lt;span style="color: #0000ff"&gt;true&lt;/span&gt; -or $global:restartNeededOverride -eq $&lt;span style="color: #0000ff"&gt;true&lt;/span&gt;) { &lt;br /&gt;        RebootAndContinue &lt;br /&gt;    }&lt;br /&gt;    Load-Module DistributedCacheConfiguration&lt;br /&gt;    $clusterInfo = Get-CacheClusterInfo &lt;span style="color: #006080"&gt;&amp;quot;XML&amp;quot;&lt;/span&gt; &lt;span style="color: #006080"&gt;&amp;quot;\\$env:computername\$appFabricShareName&amp;quot;&lt;/span&gt;&lt;br /&gt;    &lt;span style="color: #0000ff"&gt;if&lt;/span&gt;( $clusterInfo.IsInitialized -eq $&lt;span style="color: #0000ff"&gt;false&lt;/span&gt; ) {&lt;br /&gt;        &lt;span style="color: #0000ff"&gt;new&lt;/span&gt;-CacheCluster &lt;span style="color: #006080"&gt;&amp;quot;XML&amp;quot;&lt;/span&gt; &lt;span style="color: #006080"&gt;&amp;quot;\\$env:computername\$appFabricShareName&amp;quot;&lt;/span&gt; &lt;span style="color: #006080"&gt;&amp;quot;Medium&amp;quot;&lt;/span&gt;&lt;br /&gt;        Register-CacheHost -Provider XML -ConnectionString &lt;span style="color: #006080"&gt;&amp;quot;\\$env:computername\$appFabricShareName&amp;quot;&lt;/span&gt;  &lt;br /&gt;            -CachePort 22233 -ClusterPort 22234  -ArbitrationPort 22235 -ReplicationPort 22236 &lt;br /&gt;            -HostName $env:computername -Account &lt;span style="color: #006080"&gt;&amp;quot;NT AUTHORITY\Network Service&amp;quot;&lt;/span&gt;&lt;br /&gt;        Add-CacheHost -Provider XML -ConnectionString &lt;span style="color: #006080"&gt;&amp;quot;\\$env:computername\$appFabricShareName&amp;quot;&lt;/span&gt; &lt;br /&gt;            -Account &lt;span style="color: #006080"&gt;&amp;quot;NT AUTHORITY\Network Service&amp;quot;&lt;/span&gt;&lt;br /&gt;        Load-Module DistributedCacheAdministration&lt;br /&gt;        use-cachecluster -Provider XML -ConnectionString &lt;span style="color: #006080"&gt;&amp;quot;\\$env:computername\$appFabricShareName&amp;quot;&lt;/span&gt;&lt;br /&gt;        New-Cache ForumsCache -TimeToLive 1440&lt;br /&gt;        Set-CacheClusterSecurity -SecurityMode None -ProtectionLevel None&lt;br /&gt;&lt;br /&gt;        start-cachecluster&lt;br /&gt;        netsh firewall set allowedprogram &lt;br /&gt;            $env:systemroot\system32\AppFabric\DistributedCacheService.exe APPFABRIC enable&lt;br /&gt;    }&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;function Is64Bit  &lt;br /&gt;{  &lt;br /&gt;    [IntPtr]::Size -eq 8  &lt;br /&gt;}&lt;br /&gt;function Download-File([&lt;span style="color: #0000ff"&gt;string&lt;/span&gt;] $url, [&lt;span style="color: #0000ff"&gt;string&lt;/span&gt;] $path) {&lt;br /&gt;    Write-Host &lt;span style="color: #006080"&gt;&amp;quot;Downloading $url to $path&amp;quot;&lt;/span&gt;&lt;br /&gt;    $downloader = &lt;span style="color: #0000ff"&gt;new&lt;/span&gt;-&lt;span style="color: #0000ff"&gt;object&lt;/span&gt; System.Net.WebClient&lt;br /&gt;    $downloader.DownloadFile($url, $path) &lt;br /&gt;}&lt;br /&gt;function RebootAndContinue {&lt;br /&gt;    $global:restartNeededOverride = $&lt;span style="color: #0000ff"&gt;false&lt;/span&gt;&lt;br /&gt;    Copy-Item &lt;span style="color: #006080"&gt;&amp;quot;$currentDir\post-restart-$restartSuffix.bat&amp;quot;&lt;/span&gt; &lt;br /&gt;        &lt;span style="color: #006080"&gt;&amp;quot;$env:appdata\Microsoft\Windows\Start Menu\programs\startup&amp;quot;&lt;/span&gt;&lt;br /&gt;    Restart-Computer -Force&lt;br /&gt;}&lt;/pre&gt;
&lt;/div&gt;

&lt;div&gt;Now there are several ways to configure AppFabric and this just demonstrates one approach. This uses the XML provider and it only installs the caching features of AppFabric.&lt;/div&gt;

&lt;h2&gt;Installing applications with Chocolatey&lt;/h2&gt;

&lt;p&gt;One “rediscovery” I made throughout this process is an open source project built on top of Nuget called &lt;a href="http://chocolatey.org/"&gt;Chocolatey&lt;/a&gt;. This is the brain child of &lt;a href="http://ferventcoder.com/"&gt;Rob Reynolds&lt;/a&gt; who is one of the original creators of what we know of as &lt;a href="http://nuget.org/"&gt;Nuget&lt;/a&gt; today and was once called Nu before development was handed off to Microsoft and &lt;a href="http://www.outercurve.org/"&gt;Outercurve&lt;/a&gt;. I say “rediscovery” because I stumbled upon this a year ago but didn’t really get it. However it really makes sense when it comes to build/setup automation whether that be an application server or your personal machine.&lt;/p&gt;

&lt;p&gt;Chocolatey is a framework around installing and setting up applications via silent installations. Many of the apps that you and I are used to manually downloading then launching the installer and clicking next, next, next, finish are available via &lt;a href="http://chocolatey.org/"&gt;Chocolatey’s public feed&lt;/a&gt;. In addition to its own feed, it exposes the &lt;a href="http://www.microsoft.com/web/downloads/platform.aspx"&gt;web platform installer’s&lt;/a&gt; command line utility so that any application available via the web platform installer can be silently installed with Chocolatey. Since it really just sits on top of Nuget, you can provide your own private feed as well.&lt;/p&gt;

&lt;p&gt;So lets look at exactly how this works by exploring my setup script’s bootstrapper:&lt;/p&gt;

&lt;div id="codeSnippetWrapper"&gt;
  &lt;pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; background-color: #f4f4f4; margin: 0em; border-left-style: none; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; border-right-style: none; font-size: 8pt; overflow: visible; padding-top: 0px" id="codeSnippet"&gt;param(&lt;br /&gt;    [&lt;span style="color: #0000ff"&gt;string&lt;/span&gt;]$task=&lt;span style="color: #006080"&gt;&amp;quot;standalone&amp;quot;&lt;/span&gt;,&lt;br /&gt;    [&lt;span style="color: #0000ff"&gt;string&lt;/span&gt;]$environment=&lt;span style="color: #006080"&gt;&amp;quot;test&amp;quot;&lt;/span&gt;,&lt;br /&gt;    [&lt;span style="color: #0000ff"&gt;string&lt;/span&gt;]$sqlServer = $env:computername,&lt;br /&gt;    [&lt;span style="color: #0000ff"&gt;string&lt;/span&gt;]$appFabricServer = $env:computername,&lt;br /&gt;    [&lt;span style="color: #0000ff"&gt;string&lt;/span&gt;]$AdminServer = $env:computername,&lt;br /&gt;    [&lt;span style="color: #0000ff"&gt;string&lt;/span&gt;]$domain = &lt;span style="color: #006080"&gt;&amp;quot;redmond.corp.microsoft.com&amp;quot;&lt;/span&gt;,&lt;br /&gt;    [&lt;span style="color: #0000ff"&gt;switch&lt;/span&gt;]$doNotNeedBits,&lt;br /&gt;    [&lt;span style="color: #0000ff"&gt;switch&lt;/span&gt;]$addHostFileEntries,&lt;br /&gt;    [&lt;span style="color: #0000ff"&gt;switch&lt;/span&gt;]$skipPrerequisites,&lt;br /&gt;    [&lt;span style="color: #0000ff"&gt;switch&lt;/span&gt;]$noProxy&lt;br /&gt;)&lt;br /&gt;iex ((&lt;span style="color: #0000ff"&gt;new&lt;/span&gt;-&lt;span style="color: #0000ff"&gt;object&lt;/span&gt; net.webclient).DownloadString(&lt;span style="color: #006080"&gt;'http://bit.ly/psChocInstall'&lt;/span&gt;))&lt;br /&gt;&lt;br /&gt;&lt;span style="color: #0000ff"&gt;if&lt;/span&gt;(-not $skipPrerequisites) {&lt;br /&gt;    .$env:systemdrive\chocolatey\chocolateyinstall\chocolatey.cmd install hg&lt;br /&gt;    &lt;span style="color: #0000ff"&gt;if&lt;/span&gt;( test-path &lt;span style="color: #006080"&gt;&amp;quot;$env:programfiles\Mercurial&amp;quot;&lt;/span&gt; ) {&lt;br /&gt;        $mPath=&lt;span style="color: #006080"&gt;&amp;quot;$env:programfiles\Mercurial&amp;quot;&lt;/span&gt;&lt;br /&gt;    } &lt;br /&gt;    &lt;span style="color: #0000ff"&gt;else&lt;/span&gt; { &lt;br /&gt;        $mPath = &lt;span style="color: #006080"&gt;&amp;quot;${env:programfiles(x86)}\Mercurial&amp;quot;&lt;/span&gt; &lt;br /&gt;    }&lt;br /&gt;&lt;br /&gt;    &lt;span style="color: #0000ff"&gt;if&lt;/span&gt;( -not( test-path $env:systemdrive\dev )) { mkdir $env:systemdrive\dev }&lt;br /&gt;    set-location $env:systemdrive\dev&lt;br /&gt;    &lt;span style="color: #0000ff"&gt;if&lt;/span&gt;( test-path socialbuilds ) {&lt;br /&gt;        set-location socialbuilds&lt;br /&gt;        .$mPath\hg pull&lt;br /&gt;        .$mPath\hg update&lt;br /&gt;    }&lt;br /&gt;    &lt;span style="color: #0000ff"&gt;else&lt;/span&gt; {&lt;br /&gt;        .$mPath\hg clone https:&lt;span style="color: #008000"&gt;//epxsource/SocialBuilds&lt;/span&gt;&lt;br /&gt;        set-location socialbuilds&lt;br /&gt;    }&lt;br /&gt;}&lt;br /&gt;&lt;span style="color: #0000ff"&gt;if&lt;/span&gt;($task -eq &lt;span style="color: #006080"&gt;&amp;quot;standalone&amp;quot;&lt;/span&gt;) {$addHostFileEntries=$&lt;span style="color: #0000ff"&gt;true&lt;/span&gt;}&lt;br /&gt;&lt;span style="color: #0000ff"&gt;if&lt;/span&gt;($task -ne &lt;span style="color: #006080"&gt;&amp;quot;AppFabric-Server&amp;quot;&lt;/span&gt;) {$restartSuffix=&lt;span style="color: #006080"&gt;&amp;quot;Full&amp;quot;&lt;/span&gt;}&lt;br /&gt;./psake/psake.ps1 cleansetup.ps1 -tasklist $task -properties @{env=$environment;sqlServer=$sqlServer;&lt;br /&gt;    appFabricServer=$appFabricServer;AdminServer=$AdminServer;domain=$domain;&lt;br /&gt;    doNotNeedBits=$doNotNeedBits;addHostFileEntries=$addHostFileEntries;&lt;br /&gt;    restartSuffix=$restartSuffix;noProxy=$noProxy}&lt;br /&gt;&lt;/pre&gt;

  &lt;br /&gt;&lt;/div&gt;

&lt;div&gt;Notice these key lines:&lt;/div&gt;

&lt;div&gt;
  &lt;div id="codeSnippetWrapper"&gt;
    &lt;pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; background-color: #f4f4f4; margin: 0em; border-left-style: none; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; border-right-style: none; font-size: 8pt; overflow: visible; padding-top: 0px" id="codeSnippet"&gt;iex ((&lt;span style="color: #0000ff"&gt;new&lt;/span&gt;-&lt;span style="color: #0000ff"&gt;object&lt;/span&gt; net.webclient).DownloadString(&lt;span style="color: #006080"&gt;'http://bit.ly/psChocInstall'&lt;/span&gt;))&lt;/pre&gt;

    &lt;br /&gt;This Downloads and installs Chocolatey and then here is an example of using chocolatey to download the Mercurial source control client:&lt;/div&gt;

  &lt;div id="codeSnippetWrapper"&gt;
    &lt;pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; background-color: #f4f4f4; margin: 0em; border-left-style: none; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; border-right-style: none; font-size: 8pt; overflow: visible; padding-top: 0px" id="codeSnippet"&gt;.$env:systemdrive\chocolatey\chocolateyinstall\chocolatey.cmd install hg&lt;/pre&gt;

    &lt;br /&gt;&lt;/div&gt;
I should point out that under most circumstances, the above line could simply be:&lt;/div&gt;

&lt;div id="codeSnippetWrapper"&gt;
  &lt;pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; background-color: #f4f4f4; margin: 0em; border-left-style: none; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; border-right-style: none; font-size: 8pt; overflow: visible; padding-top: 0px" id="codeSnippet"&gt;cinst hg&lt;/pre&gt;

  &lt;br /&gt;&lt;/div&gt;

&lt;p&gt;Chocolatey’s install puts itself in your path and creates some aliases that makes this possible but because I use Chocolatey here in the same script that installs Chocolatey, the environment variables it sets are not available to me yet. I’d need to open a new shell.&lt;/p&gt;

&lt;p&gt;As a side note, I use chocolatey all the time now. If I need to hop on a random box and install a tool or set of tools, I now just launch a few lines of powershell and its all there. At Microsoft I often get asked for source code to my repos by fellow employees who are unfamiliar with Mercurial. I have found that sending an email like this is very effective:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Hi Phil,&lt;/p&gt;

  &lt;p&gt;You can get that from &lt;a href="https://epxsource/Galleries"&gt;https://epxsource/Galleries&lt;/a&gt;. We use Mercurial. The easiest way to get everything you need is to launch this from Powershell as admin:&lt;/p&gt;

  &lt;p&gt;iex ((new-object net.webclient).DownloadString('&lt;a href="http://bit.ly/psChocInstall'))"&gt;http://bit.ly/psChocInstall'))&lt;/a&gt; 

    &lt;br /&gt;.$env:systemdrive\chocolatey\chocolateyinstall\chocolatey.cmd install hg 

    &lt;br /&gt;$env:programfiles\Mercurial\hg clone &lt;a href="https://epxsource/Galleries"&gt;https://epxsource/Galleries&lt;/a&gt;&lt;/p&gt;

  &lt;p&gt;This will install Mercurial and clone the galleries repo.&lt;/p&gt;

  &lt;p&gt;Matt 
    &lt;br /&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;How cool is that. No Mercurial tutorial needed and sometimes I get a reply back telling me what a cool script that is. I should really forward the compliment to Rob Reynolds since he was the one who basically wrote it.&lt;/p&gt;

&lt;p&gt;So this really makes the consumption of my server setup script simple. As you can see it basically clones (or updates) my script repo on the target machine where the script runs. This also means that if I commit changes to my script, rerunning this script on the box will automatiucally pull in those changes. To simplify things further, I provide a batch file wrapper so that the script can be launched from any command line:&lt;/p&gt;

&lt;div id="codeSnippetWrapper"&gt;
  &lt;pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; background-color: #f4f4f4; margin: 0em; border-left-style: none; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; border-right-style: none; font-size: 8pt; overflow: visible; padding-top: 0px" id="codeSnippet"&gt;@echo off&lt;br /&gt;  &lt;br /&gt;powershell -NonInteractive -NoProfile -ExecutionPolicy bypass &lt;br /&gt;    -Command &lt;span style="color: #006080"&gt;&amp;quot;&amp;amp; '%~dp0bootstrap\bootstrap.ps1' %*&amp;quot;&lt;/span&gt;&lt;/pre&gt;

  &lt;br /&gt;&lt;/div&gt;

&lt;div&gt;all this does is call the powershell bootstrap.ps1 script (the one listed before) but key to this call is:&lt;/div&gt;

&lt;div id="codeSnippetWrapper"&gt;
  &lt;pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; background-color: #f4f4f4; margin: 0em; border-left-style: none; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; border-right-style: none; font-size: 8pt; overflow: visible; padding-top: 0px" id="codeSnippet"&gt;-ExecutionPolicy bypass&lt;/pre&gt;

  &lt;br /&gt;&lt;/div&gt;

&lt;div&gt;Without this and assuming this script is being run on a fresh box, the user would get an error trying to run most powershell scripts. This prevents any scripts from blocking and suppresses all warnings regarding the security of the scripts. Often you will see advice suggesting that you use “unrestricted”. However, I have found that “bypass” is better especially since I have had issues with setting the execution policy to unrestricted on Windows 8. According to &lt;a href="http://technet.microsoft.com/en-us/library/dd347641.aspx"&gt;the documentation&lt;/a&gt; on execution policies:&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;Bypass 
    &lt;br /&gt;- Nothing is blocked and there are no warnings or 

    &lt;br /&gt;prompts.&lt;/p&gt;

  &lt;p&gt;- This execution policy is designed for configurations 
    &lt;br /&gt;in which a Windows PowerShell script is built in to a 

    &lt;br /&gt;a larger application or for configurations in which 

    &lt;br /&gt;Windows PowerShell is the foundation for a program 

    &lt;br /&gt;that has its own security model.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div&gt;This seems to match the use case here.&lt;/div&gt;

&lt;h2&gt;The one liner setup call&lt;/h2&gt;

&lt;p&gt;So now as long as I put my batch file and bootstrap.ps1 on a network share accessible to others who need to use it, simply typing this at any command prompt will kick off the script:&lt;/p&gt;

&lt;div id="codeSnippetWrapper"&gt;
  &lt;pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; background-color: #f4f4f4; margin: 0em; border-left-style: none; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; border-right-style: none; font-size: 8pt; overflow: visible; padding-top: 0px" id="codeSnippet"&gt;\\server\share\bootstrap.bat&lt;/pre&gt;

  &lt;br /&gt;&lt;/div&gt;

&lt;div&gt;By default with no command line parameters passed in, a standalone setup will be installed. In my case, it takes about an hour to complete and I have a fully functioning set of applications when finished.&lt;/div&gt;

&lt;h2&gt;Making this personal&lt;/h2&gt;

&lt;p&gt;Being really impressed with what I can get done in powershell and how easy it is to install many applications using Chocolatey has inspired me to create a personal bootstrapper which I have been tweaking over the past several weeks. It is still very rough and there is much I want to add but I’d like to craft it into a sort of framework allowing individuals to create sort of “recipes” that will serve up an environment to their liking. We are all VERY particular about how our environments are laid out and there really is no one size fits all.&lt;/p&gt;

&lt;p&gt;If you are interested in seeing where I am going with this, I have been keeping it at Codeplex &lt;a href="http://autobox.codeplex.com/"&gt;here&lt;/a&gt;. Right now this is really about setting up MY box, but it does do some interesting things like download and install windows updates, turns off UAC (that dialog box that you may have never clicked “no” on) and makes windows explorer usable by changing the defaults and showing me hidden files and known extensions. Here is the script for the windows explorer “fix”:&lt;/p&gt;

&lt;div id="codeSnippetWrapper"&gt;
  &lt;pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; background-color: #f4f4f4; margin: 0em; border-left-style: none; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; border-right-style: none; font-size: 8pt; overflow: visible; padding-top: 0px" id="codeSnippet"&gt;function Configure-ExplorerOptions([&lt;span style="color: #0000ff"&gt;switch&lt;/span&gt;]$showHidenFilesFoldersDrives, &lt;br /&gt;                                    [&lt;span style="color: #0000ff"&gt;switch&lt;/span&gt;]$showProtectedOSFiles, &lt;br /&gt;                                    [&lt;span style="color: #0000ff"&gt;switch&lt;/span&gt;]$showFileExtensions) {&lt;br /&gt;    $key = &lt;span style="color: #006080"&gt;'HKCU:\Software\Microsoft\Windows\CurrentVersion\Explorer\Advanced'&lt;/span&gt;&lt;br /&gt;    &lt;span style="color: #0000ff"&gt;if&lt;/span&gt;($showHidenFilesFoldersDrives) {Set-ItemProperty $key Hidden 1}&lt;br /&gt;    &lt;span style="color: #0000ff"&gt;if&lt;/span&gt;($showFileExtensions) {Set-ItemProperty $key HideFileExt 0}&lt;br /&gt;    &lt;span style="color: #0000ff"&gt;if&lt;/span&gt;($showProtectedOSFiles) {Set-ItemProperty $key ShowSuperHidden 1}&lt;br /&gt;    Stop-Process -processname explorer -Force&lt;br /&gt;}&lt;/pre&gt;

  &lt;br /&gt;&lt;/div&gt;
So I hope you have found this helpful. I may dive into further detail in later posts or provide some short posts where I may include little “tidbits” of scripts that I have found particularly helpful. Then again, I may not. 

</content>
  <ispublished>True</ispublished>
  <isdeleted>False</isdeleted>
  <iscommentsenabled>True</iscommentsenabled>
  <pubDate>2012-04-25 07:52:02</pubDate>
  <lastModified>2013-01-15 08:03:05</lastModified>
  <raters>0</raters>
  <rating>0</rating>
  <slug>The-Perfect-Build-Revisited</slug>
  <tags />
  <comments>
    <comment id="41dc55bd-f5aa-4a6c-be07-1aac322af1cc" parentid="00000000-0000-0000-0000-000000000000" approved="True" spam="False" deleted="False">
      <date>2012-04-25 15:12:07</date>
      <author>Rob Reynolds</author>
      <email>ferventcoder@gmail.com</email>
      <country />
      <ip>68.102.221.167</ip>
      <moderatedby>mwrock</moderatedby>
      <avatar />
      <content>Awesome sauce! :D</content>
    </comment>
    <comment id="a7e75266-c71d-4855-8e3b-102a61de1f17" parentid="00000000-0000-0000-0000-000000000000" approved="True" spam="False" deleted="False">
      <date>2012-04-26 04:06:43</date>
      <author>El Bruno</author>
      <email>bcapuano@gmail.com</email>
      <country />
      <ip>62.14.237.163</ip>
      <avatar />
      <content>It was so nice to read this kind of articles. Thanks !!!</content>
    </comment>
    <comment id="082081b9-a674-46f1-b6ec-0ce84b07d14b" parentid="00000000-0000-0000-0000-000000000000" approved="True" spam="False" deleted="False">
      <date>2012-04-26 07:23:08</date>
      <author>Darren Boon</author>
      <email>darren.boon@rogers.com</email>
      <country />
      <ip>67.226.156.178</ip>
      <moderatedby>mwrock</moderatedby>
      <avatar />
      <content>We have been going down this same path. We&amp;#39;ve got TC and Psake running our CI and we&amp;#39;re moving towards PowerShell+Chocolatey continous deployment. Nice to know that someone else has already had success with this combination. Thanks!</content>
    </comment>
    <comment id="46a75e92-9732-4a94-b470-827ce0cc7c48" parentid="00000000-0000-0000-0000-000000000000" approved="True" spam="False" deleted="False">
      <date>2012-04-26 10:11:38</date>
      <author>mwrock</author>
      <email>matt@mattwrock.com</email>
      <country />
      <ip>131.107.0.81</ip>
      <avatar />
      <content>That&amp;#39;s awesome Darren. Glad to know I&amp;#39;ve got company!</content>
    </comment>
    <comment id="d319864b-fbe1-4a84-893f-c0c7d4d9edba" parentid="00000000-0000-0000-0000-000000000000" approved="True" spam="False" deleted="False">
      <date>2012-05-16 07:36:46</date>
      <author>knowyourstack.com</author>
      <email>pingback</email>
      <country />
      <ip>188.138.113.40</ip>
      <website>http://www.knowyourstack.com/what-is/chocolatey</website>
      <content>Pingback from knowyourstack.com

KnowYourStack - What is Chocolatey</content>
    </comment>
    <comment id="990bec66-1599-4051-9926-b5b146bfabcf" parentid="00000000-0000-0000-0000-000000000000" approved="True" spam="False" deleted="False">
      <date>2012-10-20 20:21:30</date>
      <author>Jimmy P</author>
      <email>mail@thejimmyp.com</email>
      <country />
      <ip>110.174.75.53</ip>
      <avatar />
      <content>Hi Matt,

I&amp;#39;ve been toying this stuff for a while but was missing some important pieces that were making the work almost hard enough that I was going to give it up.

Even just the tips in this article have been a MASSIVE help. Thanks for the post.

PS Heard you on Herding Code the other day and am looking forward to more info on Box Starter.</content>
    </comment>
  </comments>
  <categories />
  <notifications>
    <email>ferventcoder@gmail.com</email>
    <email>bcapuano@gmail.com</email>
    <email>darren.boon@rogers.com</email>
    <email>mahimalik784@gmail.com</email>
    <email>mail@thejimmyp.com</email>
    <email>manacletechnology2@gmail.com</email>
  </notifications>
</post>