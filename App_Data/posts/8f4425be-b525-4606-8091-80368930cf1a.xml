<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<post>
  <author>mwrock</author>
  <title>The Perfect Build Part 2: Version Control</title>
  <description />
  <content>&lt;p&gt;Over a year ago, my team was using Visual Source Safe (VSS) for version control. I&amp;rsquo;m not going to spend time discussing why we wanted to migrate away from VSS. The reasons should be obvious to anyone who has worked with VSS and especially to those who have worked with both VSS and another source control system like SVN, CVS or GIT.&lt;/p&gt;
&lt;p&gt;We decided to migrate to Subversion. At the time there were only two options we were considering: TFS and Subversion (SVN). We chose SVN because it seemed much lighter than TFS, it had wide industry adoption, another business unit in our organization had been happily using it for years and I could not find anything stating SVN sucks. If I were making the same decision today, I would probably have chosen GIT. Especially since shortly after our SVN migration, we spawned a team in Vietnam that is somewhat bandwidth constrained.&lt;/p&gt;
&lt;p&gt;The source Safe repository we had been using had been in existence for over eight years and had survived several managerial &amp;ldquo;dynasties.&amp;rdquo; In short, the repository structure was completely disorganized. We did not intend to simply transplant our VSS structure to SVN. We wanted to use the migration as an opportunity to reorganize our repository into something much more usable that would support a smooth code promotion process. As a side effect of this decision, we also had no intention of migrating our VSS history to the SVN repository. There are tools that will assist in doing this. Our plan was to keep the VSS repository alive in a read only state as a reference for project history. As new development progresses on the new SVN repository, the need to refer to VSS would become more and more infrequent.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Structure Requirements&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;My development team consists of a few sub teams (2 to 4 developers each) that each build and maintain multiple applications. We also have common libraries that are shared across teams. As we planned our structure, we had the following requirements:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;We wanted to have a structure that would allow us to commit common code to a single trunk so that when other teams checked out the trunk, they would be guaranteed to have the latest code.&lt;/li&gt;
&lt;li&gt;We wanted checkouts to be simple where developers could get everything they need by doing a single checkout of the trunk. &lt;/li&gt;
&lt;li&gt;We wanted to be able to lock down an app at a certain point in its release cycle so that changes to common code from another team would not propogate to another team&amp;rsquo;s app when they were in final QA.&lt;/li&gt;
&lt;li&gt;We wanted to have snap shots of every app at each release.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&amp;ldquo;Suggested&amp;rdquo; SVN Structure&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Many blogs and the SVN Book suggest a structure that looks like the following:&lt;/p&gt;
&lt;pre style="padding-left: 30px;"&gt;/projA/trunk&lt;/pre&gt;
&lt;pre style="padding-left: 30px;"&gt;/projA/branches&lt;/pre&gt;
&lt;pre style="padding-left: 30px;"&gt;/projA/tags&lt;/pre&gt;
&lt;pre style="padding-left: 30px;"&gt;/projB/trunk&lt;/pre&gt;
&lt;pre style="padding-left: 30px;"&gt;/projB/branches&lt;/pre&gt;
&lt;pre style="padding-left: 30px;"&gt;/projB/tags&lt;br /&gt;&lt;br /&gt;&lt;/pre&gt;
&lt;p&gt;I&amp;rsquo;m sure this structure works great in the majority of cases where you have a single dev team or are working on a single application or if you have multiple teams that have strictly partitioned code bases. However, it would be awkward to apply it to our environment. How would you handle shared libraries here?&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;&lt;strong&gt;Our Structure&lt;/strong&gt;&lt;/p&gt;
&lt;pre style="padding-left: 30px;"&gt;/prod&lt;/pre&gt;
&lt;pre style="padding-left: 30px;"&gt;/prod/app1/20090903&lt;/pre&gt;
&lt;pre style="padding-left: 30px;"&gt;/prod/app1/20090917&lt;/pre&gt;
&lt;pre style="padding-left: 30px;"&gt;/prod/app2/20090903&lt;/pre&gt;
&lt;pre style="padding-left: 30px;"&gt;/sandbox&lt;/pre&gt;
&lt;pre style="padding-left: 30px;"&gt;/sandbox/users/mwrock&lt;/pre&gt;
&lt;pre style="padding-left: 30px;"&gt;/staging&lt;/pre&gt;
&lt;pre style="padding-left: 30px;"&gt;/staging/app1&lt;/pre&gt;
&lt;pre style="padding-left: 30px;"&gt;/staging/app2&lt;/pre&gt;
&lt;pre style="padding-left: 30px;"&gt;/trunk&lt;/pre&gt;
&lt;pre style="padding-left: 30px;"&gt;/trunk/libraries&lt;/pre&gt;
&lt;pre style="padding-left: 30px;"&gt;/trunk/desktop&lt;/pre&gt;
&lt;pre style="padding-left: 30px;"&gt;/trunk/docs&lt;/pre&gt;
&lt;pre style="padding-left: 30px;"&gt;/trunk/services&lt;/pre&gt;
&lt;pre style="padding-left: 30px;"&gt;/trunk/sql&lt;/pre&gt;
&lt;pre style="padding-left: 30px;"&gt;/trunk/testing&lt;/pre&gt;
&lt;pre style="padding-left: 30px;"&gt;/trunk/thirdparty&lt;/pre&gt;
&lt;pre style="padding-left: 30px;"&gt;/trunk/web&lt;/pre&gt;
&lt;p&gt;Here we have the following root folders:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Trunk:&amp;nbsp; This holds the latest code revisions suitable for integration into the mainline. There is a single trunk shared by all projects and teams. Developers only have to checkout this single folder and they have everything they need.&lt;/li&gt;
&lt;li&gt;Sandbox: These are personal development areas used for branching long running changes that you want to keep separate from the trunk until they are ready to be merged back to the trunk.&lt;/li&gt;
&lt;li&gt;Staging: This is the final QA/UAT area. The trunk is copied here once development is thought to be stable and ready for final testing. This protects the release from development commited to the trunk by other teams. When a release is in this stage, you do not want unknown commits from someone else entering your code base.&lt;/li&gt;
&lt;li&gt;Prod: This contains production releases. Each application has its own folder under prod and each release has a folder named after the date of its release. The staging branch is copied to these release tags upon deployment and they represent a snapshot of the code at the time of release. The prod area is a historical record of exactly what was released and when.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Limitations&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;This structure has worked great for us. However no structure is perfect for everyone. For instance if you have separate teams working on applications with no shared code and that are completely unrelated, it may be better to separate the code bases of such teams into completely separate repositories. Another limitation we have run into is with offshore development. We have a team in Vietnam that has a much thinner bandwidth pipe and it takes a couple hours for them to check out the entire trunk. Admittedly, my personal experience with SVN is not vast and there are likely better ways to organize a repository for our team. But the fact remains that this has worked well for us and has had tremendously improved the state of our configuration management.&lt;/p&gt;
&lt;p&gt;In my next post in this series, I will discuss how our integration server interacts with our repository and automates builds and deployments.&lt;/p&gt;</content>
  <ispublished>True</ispublished>
  <isdeleted>False</isdeleted>
  <iscommentsenabled>True</iscommentsenabled>
  <pubDate>2009-10-10 11:43:00</pubDate>
  <lastModified>2009-10-10 12:00:43</lastModified>
  <raters>1</raters>
  <rating>5</rating>
  <slug>The-Perfect-Build-Pard-2-Version-Control</slug>
  <tags />
  <comments>
    <comment id="d7247a96-8fe0-45d1-86fb-ca2a17de22af" parentid="00000000-0000-0000-0000-000000000000" approved="True" spam="False" deleted="False">
      <date>2009-10-11 05:29:24</date>
      <author>Khoi</author>
      <email>ntkhoi@gmail.com</email>
      <country>vn</country>
      <ip>203.162.3.170</ip>
      <content>My old company uses the first suggested svn structure. I have to admit you had a big move when migrate from VSS to SVN. It takes time to check out a whole branch or merge 2 branches in vn, but committing/updating is acceptable :)</content>
    </comment>
    <comment id="115674ae-dd74-4ff5-be45-d501246bbf7a" parentid="00000000-0000-0000-0000-000000000000" approved="True" spam="False" deleted="False">
      <date>2009-10-11 11:09:05</date>
      <author>Peter Adams</author>
      <email>Peter@oncefuture.com</email>
      <country>us</country>
      <ip>166.205.130.162</ip>
      <website>http://www.oncefuture.com/padams/weblog</website>
      <content> &amp;quot;management dynasties&amp;quot;. What a great description.</content>
    </comment>
    <comment id="8aad3a63-4bfd-4985-b41e-d12bf65c2131" parentid="00000000-0000-0000-0000-000000000000" approved="True" spam="False" deleted="False">
      <date>2009-10-11 14:24:54</date>
      <author>Mark Wright</author>
      <email>sparkymeister@gmail.com</email>
      <country>us</country>
      <ip>69.144.101.66</ip>
      <content>Have you heard of git-svn? Haven't really looked into it because I've never needed to but it looks like it might help your bandwidth challenged teamed in Vietnam.

http://www.google.com/search?q=git-svn</content>
    </comment>
    <comment id="241f01c2-0628-4dbd-9aea-1a336d184067" parentid="00000000-0000-0000-0000-000000000000" approved="True" spam="False" deleted="False">
      <date>2011-07-28 02:31:41</date>
      <author>Matt Wrock's Blog</author>
      <email>trackback</email>
      <country />
      <ip>65.55.57.13</ip>
      <website>http://blogs.msdn.com/b/mattwrock/archive/2009/10/21/the-perfect-build-part-3-continuous-integration-with-cruisecontrol-net-and-nant-for-visual-studio-projects.aspx</website>
      <content>The Perfect Build Part 3: Continuous Integration with CruiseControl.net and NANT for Visual Studio Projects

A couple months after migrating to subversion, we took another significant step to improve our build</content>
    </comment>
  </comments>
  <categories />
  <notifications>
    <email>sparkymeister@gmail.com</email>
    <email>sabaattitute@gmail.com</email>
  </notifications>
</post>