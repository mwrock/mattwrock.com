<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<post>
  <author>mwrock</author>
  <title>Colocatng ASP.NET MVC and Web Forms in the same Web Application</title>
  <description />
  <content>&lt;p&gt;My team and I are migrating a large web forms/ADO web application over to the MVC framework using nHibernate and Domain Driven Design principles. After dabbling in MVC and nHibernate (although I have used MVC in java in a past life) and reading Eric Evans' book, I've been chomping at the bit to implement these frameworks in our less than clean production code.&lt;/p&gt;
&lt;p&gt;As I mentioned above, this is a large application and I am not about to suspend our feature backlog while we spend months converting web forms to controller/views. Instead I have decided to keep the current collection of web forms pages that we have now and "fold in" conntrollers and views as we build out new functionality. Any minor enhancements to existing web forms will remain in the current web form structure, but any changes requiring heavy lifting will warrant a conversion to MVC. I should note that our "model" is thankfully already abstracted into separate class libraries.&lt;/p&gt;
&lt;p&gt;In order to accomplish this happy coexistence of web forms and MVC, we have done the following:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Created a brand new MVC project for the views.&lt;/li&gt;
&lt;li&gt;Created a new project for controllers to keep the controllers and views separate (we are using the &lt;a href="http://www.sharparchitecture.net/"&gt;Sharp Architecture&lt;/a&gt; Framework)&lt;/li&gt;
&lt;li&gt;Added a "WebForms" directory to MVC Views projects&lt;/li&gt;
&lt;li&gt;Copied the web forms tree from our legacy web application project to the new WebForms folder&lt;/li&gt;
&lt;li&gt;Made minor changes to relative URL references&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;This has worked out really well for us. It has allowed us to keep a large and long lived&amp;nbsp;application functioning as is while providing a framework for future functionality that is a much better&amp;nbsp;enforcer of separation of concerns and far more unit test friendly.&lt;/p&gt;
&lt;p&gt;We are taking a similar migration strategy with our Model layer. We have sevral class libraries of domain classes riddled with ADO code (yuck). Again, we are continuing to use these classes and extend them with small changes. However, large changes and new domain objects are following a DDD approach using nHibernate. There has been a definite learning curve with nHibernate and&amp;nbsp;Fluent nHibernate, but I can't tell you how much cleaner the code looks without all of the database plumbing. You see only what you need to see --&amp;nbsp;your business logic not to mention we are no longer having to create countless stored procedures for the simple CRUD functionaity.&lt;/p&gt;
&lt;p&gt;I don't think this architecture is&amp;nbsp;suitable for&amp;nbsp;every application. It would most likely be a poor choice for our external web application that serves over ten million page views a day. But it is ideal for a large administrative CRUD application supporting a complex domain model --&amp;nbsp;a perfect candidate for DDD.&lt;/p&gt;</content>
  <ispublished>True</ispublished>
  <isdeleted>False</isdeleted>
  <iscommentsenabled>True</iscommentsenabled>
  <pubDate>2009-09-14 19:14:00</pubDate>
  <lastModified>2009-09-15 06:55:25</lastModified>
  <raters>2</raters>
  <rating>5</rating>
  <slug>Colocatng-ASPNET-MVC-and-Web-Forms-in-the-same-Web-Application</slug>
  <tags />
  <comments />
  <categories />
  <notifications>
    <email>sabaattitute@gmail.com</email>
  </notifications>
</post>