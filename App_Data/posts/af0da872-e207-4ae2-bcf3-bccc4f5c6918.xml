<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<post>
  <author>mwrock</author>
  <title>Track Nuget Downloads using OData, RSS and Ifttt.com</title>
  <description />
  <content>&lt;p&gt;In this post I am going to show you how you can be notified of new downloads of any &lt;a href="http://nuget.org" target="_blank"&gt;Nuget&lt;/a&gt; package via email from a service that will poll Nuget every 15 minutes. If email sounds overly intrusive, there are other options. So If this sounds interesting, read on.&lt;/p&gt;  &lt;p&gt;If you have op&lt;img style="margin: 0px 10px 0px 0px" src="http://upload.wikimedia.org/wikipedia/commons/thumb/1/1b/OCD_handwash.jpg/230px-OCD_handwash.jpg" /&gt;en source projects hosted on Nuget and you are a bit on the &lt;a href="http://http://en.wikipedia.org/wiki/Obsessive%E2%80%93compulsive_disorder" target="_blank"&gt;OCD&lt;/a&gt; (obsessive compulsive disorder) side, you are frequently tempted to wander over to Nuget.org and check out your download stats. Well, I have finally started to notice that I spend a fair amount of time every day, checking the Nuget site as well as other sites that may provide key indicators of &lt;a href="http://www.requestreduce.com" target="_blank"&gt;my projects’&lt;/a&gt; health. For instance I like to check for new followers or twitter mentions. Unfortunately, a lot of this time is spent simply waiting for a web page to load and reveal to me that there is no new information. So not only is this unproductive but it can lead to negative thoughts and emotions. &lt;/p&gt;  &lt;p&gt;There are many pharmaceutical options available here, but I am not a Medical doctor and it would be unwise for me to give advise of a psychiatric nature. However I do have some technical solutions that simply require a computer with access to the world wide web. If you lack either of these, I have nothing to offer and you should now leave this page.&lt;/p&gt;  &lt;p&gt;Ok. good. It’s just you and me now….hmm…this is uncomfortably intimate. No matter…&lt;/p&gt;  &lt;h2&gt;Switch from a Pull to a Push model&lt;/h2&gt;  &lt;p&gt;What I found myself craving was a way to let all of this information come to me and announce to me that there is new data rather than me having to spend time pinging several sources for what is likely to be no new information. In my case, I really wanted my phone to beep or vibrate when I get a new download, follower or mention. For me, this would not be a nuisance given the small amount of data. If you owned jQuery, you may want a more unobtrusive notification. Fortunately the solution I am about to propose can channel notifications through a variety of mediums.&lt;/p&gt;  &lt;h2&gt;Enter If-this-then-that ifttt.com&lt;/h2&gt;  &lt;p&gt;A few months ago I noticed a new referring link on my blog from a domain called ifttt.com. I visited the link and perused the site and discovered that it provided a way of creating sort of mash ups of various social media. ifttt stands for If This Then That. And the site simply allows you to create rules of If something occurs (new tweet, RSS feed item, DropBox item, etc.) Then some other thing should be triggered such as an email sent or a tweet or facebook update, etc. I have to admit my initial impression was “That’s dumb.” Then about a week later &lt;a href="http://www.hanselman.com/blog/EssentialIFTTTIfThisThenThatProgrammingWorkflowsForHumansUsingTheWebsSocialGlue.aspx" target="_blank"&gt;Scott Hanselman&lt;/a&gt; blogged about this service having been duly impressed by its offerings. I still didn’t really get it.&lt;/p&gt;  &lt;p&gt;Not sure why I didn’t see the value right away but I see it now. Last week I setup a number of tasks that have freed me of the constant compulsion to check these various web sites for new data. I have a rule that will send me an email whenever my project has a new Github follower or a new mention on twitter. I have tasks that tell me when I have new stack overflow comments or new stack overflow points. All of these tasks were relatively easy to set up using ifttt.com. ifttt’s very friendly GUI provides an extremely simple way to send an email to yourself triggered by a new tweet or RSS feed item.&lt;/p&gt;  &lt;p&gt;Here is an example of the task that sends me an email when my project &lt;a href="http://RequestReduce.com"&gt;RequestReduce&lt;/a&gt; is mentioned on twitter:&lt;/p&gt;  &lt;p&gt;&lt;a href="http://www.mattwrock.com/image.axd?picture=image_9.png"&gt;&lt;img style="background-image: none; border-right-width: 0px; margin: 0px 10px 0px 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://www.mattwrock.com/image.axd?picture=image_thumb_9.png" width="677" height="265" /&gt;&lt;/a&gt;&lt;/p&gt;  &lt;p&gt;It is honestly trivial to set this up.&lt;/p&gt;  &lt;h2&gt;But Nuget Has no RSS Feed with items representing downloads&lt;/h2&gt;  &lt;p&gt;Currently Nuget provides no RSS feed or any notification option for subscribing to download stats beyond what is displayed on the project search results and individual project details pages. I don’t know if there are plans to implement this by the Nuget team in the near future, but I wanted something up and running soon that didn’t need to be polished.&lt;/p&gt;  &lt;h2&gt;All Nuget data iavailable from the website is exposed through an OData feed&lt;/h2&gt;  &lt;p&gt;I knew that the data I was interested in was available via OData. There are a few posts out there that talk about this. I found that David Ebbo’s &lt;a href="http://blog.davidebbo.com/2011/08/how-odata-quirk-killed-nuget-server.html" target="_blank"&gt;post&lt;/a&gt; had the detail I deeded to get started. With the name of any Nuget package Id, you can get its total download count via the public Nuget OData endpoint at &lt;a title="http://packages.nuget.org/v1/FeedService.svc" href="http://packages.nuget.org/v1/FeedService.svc"&gt;http://packages.nuget.org/v1/FeedService.svc&lt;/a&gt;.&lt;/p&gt;  &lt;p&gt;Here is an example query using &lt;a href="http://www.linqpad.net/" target="_blank"&gt;LinqPad&lt;/a&gt;:&lt;/p&gt;  &lt;p&gt;&lt;a href="http://www.mattwrock.com/image.axd?picture=image_10.png"&gt;&lt;img style="background-image: none; border-right-width: 0px; margin: 0px 10px 0px 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://www.mattwrock.com/image.axd?picture=image_thumb_10.png" width="848" height="681" /&gt;&lt;/a&gt;&lt;/p&gt;  &lt;p&gt;&amp;#160;&lt;/p&gt;  &lt;h2&gt;Creating a custom RSS Feed to broadcast new downloads&lt;/h2&gt;  &lt;p&gt;Currently as far as I can tell, there is no facility built into ifttt to consume this OData format. Yes, you can expose OData as an ATOM feed but given the Nuget schema, this would only be useful if you wanted to be notified of new versions. Essentially each version is a child entity of the master Packages entity. DownloadCount is simply a property associated with each version. Note that a version has both a VersionDownloadCount and a DownloadCount. The first is simply the count for a single version and the latter is the aggregate count of all combined versions released in a single package.&lt;/p&gt;  &lt;p&gt;At first I tried playing with &lt;a href="http://pipes.yahoo.com/pipes/" target="_blank"&gt;Yahoo Pipes&lt;/a&gt; and some other online RSS builder apps but none of these was going to work. At least not simply. I didn’t want to spend a lot of time on this since what I wanted was really quite simple and could be coded up fairly trivially. So I ended up just writing my own feed generator and I took the opportunity to create my first Azure application. I plan to blog more specifically on the azure specific details later and how they differed from my work with an &lt;a href="https://appharbor.com/" target="_blank"&gt;AppHarhor&lt;/a&gt; application.&lt;/p&gt;  &lt;p&gt;Here is the RSS Generator code:&lt;/p&gt;  &lt;div id="codeSnippetWrapper"&gt;   &lt;div id="codeSnippetWrapper"&gt;     &lt;pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; background-color: #f4f4f4; margin: 0em; border-left-style: none; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; border-right-style: none; font-size: 8pt; overflow: visible; padding-top: 0px" id="codeSnippet"&gt;&lt;span style="color: #0000ff"&gt;public&lt;/span&gt; &lt;span style="color: #0000ff"&gt;class&lt;/span&gt; FeedHandler : IHttpHandler&lt;br /&gt;{&lt;br /&gt;    &lt;span style="color: #0000ff"&gt;private&lt;/span&gt; &lt;span style="color: #0000ff"&gt;const&lt;/span&gt; &lt;span style="color: #0000ff"&gt;string&lt;/span&gt; NugetServiceUri = &lt;span style="color: #006080"&gt;&amp;quot;http://packages.nuget.org/v1/FeedService.svc&amp;quot;&lt;/span&gt;;&lt;br /&gt;    &lt;span style="color: #0000ff"&gt;private&lt;/span&gt; &lt;span style="color: #0000ff"&gt;readonly&lt;/span&gt; IDictionary&amp;lt;&lt;span style="color: #0000ff"&gt;string&lt;/span&gt;, IList&amp;lt;SyndicationItem&amp;gt;&amp;gt; &lt;br /&gt;        packageDownloadCounts = &lt;span style="color: #0000ff"&gt;new&lt;/span&gt; ConcurrentDictionary&amp;lt;&lt;span style="color: #0000ff"&gt;string&lt;/span&gt;, IList&amp;lt;SyndicationItem&amp;gt;&amp;gt;();&lt;br /&gt;&lt;br /&gt;    &lt;span style="color: #0000ff"&gt;public&lt;/span&gt; &lt;span style="color: #0000ff"&gt;bool&lt;/span&gt; IsReusable&lt;br /&gt;    {&lt;br /&gt;        get { &lt;span style="color: #0000ff"&gt;return&lt;/span&gt; &lt;span style="color: #0000ff"&gt;true&lt;/span&gt;; }&lt;br /&gt;    }&lt;br /&gt;&lt;br /&gt;    &lt;span style="color: #0000ff"&gt;public&lt;/span&gt; &lt;span style="color: #0000ff"&gt;void&lt;/span&gt; ProcessRequest(HttpContext context)&lt;br /&gt;    {&lt;br /&gt;        var packageName = context.Request.QueryString[&lt;span style="color: #006080"&gt;&amp;quot;packageId&amp;quot;&lt;/span&gt;];&lt;br /&gt;&lt;br /&gt;        var nugetContext = &lt;span style="color: #0000ff"&gt;new&lt;/span&gt; Nuget.GalleryFeedContext(&lt;span style="color: #0000ff"&gt;new&lt;/span&gt; Uri(NugetServiceUri));&lt;br /&gt;        var last = (&lt;br /&gt;            from x &lt;span style="color: #0000ff"&gt;in&lt;/span&gt; nugetContext.Packages &lt;br /&gt;            &lt;span style="color: #0000ff"&gt;where&lt;/span&gt; x.Id == packageName &amp;amp;&amp;amp; x.IsLatestVersion &lt;br /&gt;            select &lt;span style="color: #0000ff"&gt;new&lt;/span&gt; { x.DownloadCount, x.Version }).First();&lt;br /&gt;&lt;br /&gt;        var items = GetSyndicationItems(packageName, last.DownloadCount);&lt;br /&gt;        var nugetUrl = &lt;span style="color: #0000ff"&gt;string&lt;/span&gt;.Format(&lt;br /&gt;            &lt;span style="color: #006080"&gt;&amp;quot;{0}/Packages(Id='{1}',Version='{2}')&amp;quot;&lt;/span&gt;, NugetServiceUri, packageName, last.Version);&lt;br /&gt;&lt;br /&gt;        var feed = &lt;span style="color: #0000ff"&gt;new&lt;/span&gt; SyndicationFeed(&lt;span style="color: #006080"&gt;&amp;quot;Nuget Download Count Feed&amp;quot;&lt;/span&gt;,&lt;br /&gt;           &lt;span style="color: #006080"&gt;&amp;quot;Provides the current total download count for a Nuget Package&amp;quot;&lt;/span&gt;,&lt;br /&gt;           &lt;span style="color: #0000ff"&gt;new&lt;/span&gt; Uri(nugetUrl), nugetUrl, items.Last().LastUpdatedTime,&lt;br /&gt;           items);&lt;br /&gt;        &lt;span style="color: #0000ff"&gt;using&lt;/span&gt; (var xmlWriter = XmlWriter.Create(context.Response.OutputStream))&lt;br /&gt;        {&lt;br /&gt;            feed.SaveAsRss20(xmlWriter);&lt;br /&gt;            xmlWriter.Flush();&lt;br /&gt;            xmlWriter.Close();&lt;br /&gt;        }&lt;br /&gt;&lt;br /&gt;        context.Response.ContentType = &lt;span style="color: #006080"&gt;&amp;quot;text/xml&amp;quot;&lt;/span&gt;;&lt;br /&gt;        context.Response.End();&lt;br /&gt;    }&lt;br /&gt;&lt;br /&gt;    &lt;span style="color: #0000ff"&gt;private&lt;/span&gt; IList&amp;lt;SyndicationItem&amp;gt; GetSyndicationItems(&lt;span style="color: #0000ff"&gt;string&lt;/span&gt; packageName, &lt;span style="color: #0000ff"&gt;int&lt;/span&gt; count)&lt;br /&gt;    {&lt;br /&gt;        IList&amp;lt;SyndicationItem&amp;gt; items;&lt;br /&gt;        &lt;span style="color: #0000ff"&gt;lock&lt;/span&gt; (packageName)&lt;br /&gt;        {&lt;br /&gt;            &lt;span style="color: #0000ff"&gt;if&lt;/span&gt; (packageDownloadCounts.ContainsKey(packageName))&lt;br /&gt;                items = packageDownloadCounts[packageName];&lt;br /&gt;            &lt;span style="color: #0000ff"&gt;else&lt;/span&gt;&lt;br /&gt;            {&lt;br /&gt;                items = &lt;span style="color: #0000ff"&gt;new&lt;/span&gt; List&amp;lt;SyndicationItem&amp;gt;();&lt;br /&gt;                packageDownloadCounts.Add(packageName, items);&lt;br /&gt;            }&lt;br /&gt;            var title = &lt;span style="color: #0000ff"&gt;string&lt;/span&gt;.Format(&lt;span style="color: #006080"&gt;&amp;quot;{0} has {1} total downloads&amp;quot;&lt;/span&gt;, packageName, count);&lt;br /&gt;&lt;br /&gt;            &lt;span style="color: #0000ff"&gt;if&lt;/span&gt; (!items.Any(x =&amp;gt; x.Title.Text == title))&lt;br /&gt;                items.Add(&lt;span style="color: #0000ff"&gt;new&lt;/span&gt; SyndicationItem(&lt;br /&gt;                   title,&lt;br /&gt;                   &lt;span style="color: #006080"&gt;&amp;quot;&amp;quot;&lt;/span&gt;,&lt;br /&gt;                   &lt;span style="color: #0000ff"&gt;new&lt;/span&gt; Uri(&lt;span style="color: #0000ff"&gt;string&lt;/span&gt;.Format(&lt;span style="color: #006080"&gt;&amp;quot;http://nuget.org/packages/{0}&amp;quot;&lt;/span&gt;,&lt;br /&gt;                                         packageName)), Guid.NewGuid().ToString(),&lt;br /&gt;                   &lt;span style="color: #0000ff"&gt;new&lt;/span&gt; DateTimeOffset(DateTime.UtcNow)));&lt;br /&gt;            &lt;span style="color: #0000ff"&gt;while&lt;/span&gt; (items.Count &amp;gt; 20)&lt;br /&gt;                items.RemoveAt(0);&lt;br /&gt;        }&lt;br /&gt;&lt;br /&gt;        &lt;span style="color: #0000ff"&gt;return&lt;/span&gt; items;&lt;br /&gt;    }&lt;br /&gt;}&lt;br /&gt;&lt;/pre&gt;

    &lt;br /&gt;&lt;/div&gt;

  &lt;br /&gt;&lt;/div&gt;

&lt;p&gt;You can grab the full Visual Studio Solution from &lt;a href="https://github.com/mwrock/NugetDownloadFeed"&gt;https://github.com/mwrock/NugetDownloadFeed&lt;/a&gt;. Not much happening here. Its just a handler that takes a packageId in the query string and then checks the odata feed to see if there are more downloads than there were since the last time it checked. If there are, it creates a new feed item.&lt;/p&gt;

&lt;p&gt;ifttt.com will poll this feed every 15 minutes. I currently have this feed up and running at &lt;a href="http://wrock.cloudapp.net/downloadFeed.axd"&gt;http://wrock.cloudapp.net/downloadFeed.axd&lt;/a&gt;. Anyone is free to use it but I provide no guarantee for stability or longevity. That said, I have no plan to change the endpoint or bring it down. However, I may clean the code up a bit and offer it as a Nuget package so that anyone can host their own feed.&lt;/p&gt;

&lt;h2&gt;Consuming the feed from an ifttt.com Recipe&lt;/h2&gt;

&lt;p&gt;Beyond the creation of “one off” tasks. ifttt provides a means of encapsulating common task logic into a reusable “Recipe.” These are handy if you find yourself creating the same task again and again with the only difference being a single variable. In my case here, I wanted to create three tasks. One for each of my Nuget projects. It also seemed reasonable that others may want to make use of this as well. So I created a recipe that anyone can use in order to create their own Nuget Download Notification task. Simply create an ifttt account (Super fast and easy to do) and go here: &lt;a href="http://ifttt.com/recipes/9302"&gt;http://ifttt.com/recipes/9302&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="http://www.mattwrock.com/image.axd?picture=image_11.png"&gt;&lt;img style="background-image: none; border-right-width: 0px; margin: 0px 10px 0px 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://www.mattwrock.com/image.axd?picture=image_thumb_11.png" width="729" height="477" /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As the directions state, simply replace my Package Id &lt;a href="http://RequestReduce.com"&gt;RequestReduce&lt;/a&gt; with the Package Id that you are interested in.&lt;/p&gt;

&lt;p&gt;If you do not want to be notified by email, you have several different options. You could have it tweet from a specific account, send an SMS message or create an Evernote entry. And there are many more options than that.&lt;/p&gt;

&lt;p&gt;I’d really like to hand it to the folks at @ifttt for creating this ingenious service and wish them the best of success!&lt;/p&gt;</content>
  <ispublished>True</ispublished>
  <isdeleted>False</isdeleted>
  <iscommentsenabled>True</iscommentsenabled>
  <pubDate>2011-11-28 02:24:00</pubDate>
  <lastModified>2012-08-01 13:23:50</lastModified>
  <raters>0</raters>
  <rating>0</rating>
  <slug>Track-Nuget-Downloads-using-OData-RSS-and-Iftttcom</slug>
  <tags />
  <comments>
    <comment id="53ed8b49-3d9c-4abb-ba45-92d12632abf8" parentid="00000000-0000-0000-0000-000000000000" approved="True" spam="False" deleted="False">
      <date>2011-12-18 05:58:32</date>
      <author>richarddingwall.name</author>
      <email>pingback</email>
      <country />
      <ip>66.147.242.90</ip>
      <website>http://richarddingwall.name/2011/12/18/subscribing-to-nuget-package-updates-via-rss/</website>
      <content>Pingback from richarddingwall.name

Subscribing to NuGet package updates via RSS | Richard Dingwall</content>
    </comment>
    <comment id="9899b39c-8bb7-4787-a2f7-bef8633fcaf3" parentid="00000000-0000-0000-0000-000000000000" approved="False" spam="True" deleted="False">
      <date>2013-07-15 21:46:01</date>
      <author>forgot password</author>
      <email>carinafrancisco@gmail.com</email>
      <country />
      <ip>66.248.193.21</ip>
      <moderatedby>App_Code.Extensions.StopForumSpam</moderatedby>
      <avatar />
      <content>If you desire to grow your knowledge just keep visiting this site and be updated with the newest news posted here.

My webpage ::  forgot password - http://bethlltzfpxtt.webs.com/apps/blog/ </content>
    </comment>
  </comments>
  <categories />
  <notifications>
    <email>GeertruidaPiek@yahoo.nl</email>
  </notifications>
</post>