<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<post>
  <author>mwrock</author>
  <title>Unit Testing ASP.Net Http Handlers and a discussion of Auto Mocking and the Testable pattern</title>
  <description />
  <content>&lt;p&gt;&lt;img src="http://3.bp.blogspot.com/_OoR3cXZpxbY/SkYwglP8UTI/AAAAAAAABuY/6dynEIArA-s/s400/poyli-kotsyfi-mimos---anagnwrish-an8rwpwn-thumb-large.jpg" /&gt;This post was originally entitled Unit Testing ASP.Net Http Handlers and my intent was a quickie (5 minute) post on overriding ProcessRequest in a test friendly manner. Then, struck by diarrhea of the fingers, I found myself going off on unit testing practices and discussing a pattern I don’t hear a lot about but that provides a lot of value to me and the teams I work with. I hope you will find it of value too.&lt;/p&gt;  &lt;h2&gt;A test friendly IHttpHandler&lt;/h2&gt;  &lt;p&gt;The default Http Handler template that Visual Studio provides is not very Unit Test friendly. The key problem is here:&lt;/p&gt;  &lt;div id="codeSnippetWrapper"&gt;   &lt;pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; background-color: #f4f4f4; margin: 0em; border-left-style: none; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; border-right-style: none; font-size: 8pt; overflow: visible; padding-top: 0px" id="codeSnippet"&gt;&lt;span style="color: #0000ff"&gt;public&lt;/span&gt; &lt;span style="color: #0000ff"&gt;void&lt;/span&gt; ProcessRequest(HttpContext context)&lt;br /&gt;{&lt;br /&gt;    &lt;br /&gt;}&lt;br /&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&amp;#160;&lt;/p&gt;

&lt;p&gt;HttpContext is not your friend and it will eat your children if left unattended. Thankfully there is HttpContextBase who loves you and has a wonderful plan for your life. If you are not familiar with HttpContextBase, it provides everything that HttpContext has to offer wrapped up in mockable abstract classes.&lt;/p&gt;

&lt;p&gt;Its really quite simple to transform the default visual studio HttpHandler template to a unit test friendly template. Use this instead:&lt;/p&gt;

&lt;div id="codeSnippetWrapper"&gt;
  &lt;pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; background-color: #f4f4f4; margin: 0em; border-left-style: none; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; border-right-style: none; font-size: 8pt; overflow: visible; padding-top: 0px" id="codeSnippet"&gt;&lt;span style="color: #0000ff"&gt;using&lt;/span&gt; System.Web;&lt;br /&gt;&lt;br /&gt;&lt;span style="color: #0000ff"&gt;namespace&lt;/span&gt; RequestReduce.SassLessCoffee&lt;br /&gt;{&lt;br /&gt;    &lt;span style="color: #0000ff"&gt;public&lt;/span&gt; &lt;span style="color: #0000ff"&gt;class&lt;/span&gt; IISHandler1 : IHttpHandler&lt;br /&gt;    {&lt;br /&gt;        &lt;span style="color: #0000ff"&gt;public&lt;/span&gt; &lt;span style="color: #0000ff"&gt;bool&lt;/span&gt; IsReusable&lt;br /&gt;        {&lt;br /&gt;            get { &lt;span style="color: #0000ff"&gt;return&lt;/span&gt; &lt;span style="color: #0000ff"&gt;true&lt;/span&gt;; }&lt;br /&gt;        }&lt;br /&gt;&lt;br /&gt;        &lt;span style="color: #0000ff"&gt;public&lt;/span&gt; &lt;span style="color: #0000ff"&gt;void&lt;/span&gt; ProcessRequest(HttpContext context)&lt;br /&gt;        {&lt;br /&gt;            ProcessRequest(&lt;span style="color: #0000ff"&gt;new&lt;/span&gt; HttpContextWrapper(context));&lt;br /&gt;        }&lt;br /&gt;&lt;br /&gt;        &lt;span style="color: #0000ff"&gt;public&lt;/span&gt; &lt;span style="color: #0000ff"&gt;void&lt;/span&gt; ProcessRequest(HttpContextBase context)&lt;br /&gt;        {&lt;br /&gt;            &lt;span style="color: #008000"&gt;//write your handler implementation here.&lt;/span&gt;&lt;br /&gt;        }&lt;br /&gt;&lt;br /&gt;    }&lt;br /&gt;}&lt;br /&gt;&lt;/pre&gt;

  &lt;br /&gt;&lt;/div&gt;

&lt;p&gt;Now your unit tests can call ProcessRequest and pass in a mocked context which in turn will call the IHttpHandler contractual ProcessRequest.&lt;/p&gt;

&lt;p&gt;As an example of a full fledged real world set of unit tests, I’ll use a handler that I am creating and will very soon release in my &lt;a href="http://RequestReduce.com"&gt;RequestReduce&lt;/a&gt; project which compiles &lt;a href="http://www.dotlesscss.org/" target="_blank"&gt;.less dynamic css&lt;/a&gt; to plain old css.&lt;/p&gt;

&lt;p&gt;Here is the Handler:&lt;/p&gt;

&lt;div id="codeSnippetWrapper"&gt;
  &lt;div id="codeSnippetWrapper"&gt;
    &lt;pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; background-color: #f4f4f4; margin: 0em; border-left-style: none; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; border-right-style: none; font-size: 8pt; overflow: visible; padding-top: 0px" id="codeSnippet"&gt;&lt;span style="color: #0000ff"&gt;using&lt;/span&gt; System.Web;&lt;br /&gt;&lt;span style="color: #0000ff"&gt;using&lt;/span&gt; RequestReduce.Utilities;&lt;br /&gt;&lt;span style="color: #0000ff"&gt;using&lt;/span&gt; dotless.Core;&lt;br /&gt;&lt;span style="color: #0000ff"&gt;using&lt;/span&gt; dotless.Core.configuration;&lt;br /&gt;&lt;br /&gt;&lt;span style="color: #0000ff"&gt;namespace&lt;/span&gt; RequestReduce.SassLessCoffee&lt;br /&gt;{&lt;br /&gt;    &lt;span style="color: #0000ff"&gt;public&lt;/span&gt; &lt;span style="color: #0000ff"&gt;class&lt;/span&gt; LessHandler : IHttpHandler&lt;br /&gt;    {&lt;br /&gt;        &lt;span style="color: #0000ff"&gt;private&lt;/span&gt; &lt;span style="color: #0000ff"&gt;readonly&lt;/span&gt; IFileWrapper fileWrapper;&lt;br /&gt;&lt;br /&gt;        &lt;span style="color: #0000ff"&gt;public&lt;/span&gt; LessHandler(IFileWrapper fileWrapper)&lt;br /&gt;        {&lt;br /&gt;            &lt;span style="color: #0000ff"&gt;this&lt;/span&gt;.fileWrapper = fileWrapper;&lt;br /&gt;        }&lt;br /&gt;&lt;br /&gt;        &lt;span style="color: #0000ff"&gt;public&lt;/span&gt; &lt;span style="color: #0000ff"&gt;void&lt;/span&gt; ProcessRequest(HttpContext context)&lt;br /&gt;        {&lt;br /&gt;            ProcessRequest(&lt;span style="color: #0000ff"&gt;new&lt;/span&gt; HttpContextWrapper(context));&lt;br /&gt;        }&lt;br /&gt;&lt;br /&gt;        &lt;span style="color: #0000ff"&gt;public&lt;/span&gt; &lt;span style="color: #0000ff"&gt;void&lt;/span&gt; ProcessRequest(HttpContextBase context)&lt;br /&gt;        {&lt;br /&gt;            var localPath = context.Request.Url.LocalPath;&lt;br /&gt;            var response = context.Response;&lt;br /&gt;&lt;br /&gt;            &lt;span style="color: #0000ff"&gt;try&lt;/span&gt;&lt;br /&gt;            {&lt;br /&gt;                var source = fileWrapper.GetFileString(localPath);&lt;br /&gt;&lt;br /&gt;                response.ContentType = &lt;span style="color: #006080"&gt;&amp;quot;text/css&amp;quot;&lt;/span&gt;;&lt;br /&gt;                response.Write(&lt;span style="color: #0000ff"&gt;new&lt;/span&gt; EngineFactory(&lt;span style="color: #0000ff"&gt;new&lt;/span&gt; DotlessConfiguration&lt;br /&gt;                                                     {&lt;br /&gt;                                                         CacheEnabled = &lt;span style="color: #0000ff"&gt;false&lt;/span&gt;&lt;br /&gt;                                                     }&lt;br /&gt;                                   ).GetEngine().TransformToCss(source, localPath));&lt;br /&gt;            }&lt;br /&gt;            &lt;span style="color: #0000ff"&gt;catch&lt;/span&gt; (System.IO.FileNotFoundException ex)&lt;br /&gt;            {&lt;br /&gt;                response.StatusCode = 404;&lt;br /&gt;                response.Write(&lt;span style="color: #006080"&gt;&amp;quot;/* File Not Found while parsing: &amp;quot;&lt;/span&gt; + ex.Message + &lt;span style="color: #006080"&gt;&amp;quot; */&amp;quot;&lt;/span&gt;);&lt;br /&gt;            }&lt;br /&gt;            &lt;span style="color: #0000ff"&gt;catch&lt;/span&gt; (System.IO.IOException ex)&lt;br /&gt;            {&lt;br /&gt;                response.StatusCode = 500;&lt;br /&gt;                response.Write(&lt;span style="color: #006080"&gt;&amp;quot;/* Error in less parsing: &amp;quot;&lt;/span&gt; + ex.Message + &lt;span style="color: #006080"&gt;&amp;quot; */&amp;quot;&lt;/span&gt;);&lt;br /&gt;            }&lt;br /&gt;        }&lt;br /&gt;&lt;br /&gt;        &lt;span style="color: #0000ff"&gt;public&lt;/span&gt; &lt;span style="color: #0000ff"&gt;bool&lt;/span&gt; IsReusable&lt;br /&gt;        {&lt;br /&gt;            get { &lt;span style="color: #0000ff"&gt;return&lt;/span&gt; &lt;span style="color: #0000ff"&gt;true&lt;/span&gt;; }&lt;br /&gt;        }&lt;br /&gt;    }&lt;br /&gt;}&lt;/pre&gt;

    &lt;br /&gt;As you can see there is not much going on here in my code thanks to the DotLess compiler. I simply want to expose my own handler instead of the DotLess handler which does pretty much the exact same thing but I turn off the caching since &lt;a href="http://RequestReduce.com"&gt;RequestReduce&lt;/a&gt; has its own. This handler will ship as part of my own &lt;a href="http://nuget.org" target="_blank"&gt;Nuget&lt;/a&gt; package providing Sass and Coffee compiling as well that will automatically wire up the handler mapping configuration from within the core RequestReduse assembly.&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;There are really four things I want to test here:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Make sure I am setting Content type to text/css. &lt;/li&gt;

  &lt;li&gt;Make sure that I am successfully calling out to the compiler with .less and getting back css. &lt;/li&gt;

  &lt;li&gt;Ensure I return a 404 if there is no .less file associated with the .less URL being called. &lt;/li&gt;

  &lt;li&gt;Return a 500 if something wrong happens in the compile. &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Here is my Test Class:&lt;/p&gt;

&lt;div id="codeSnippetWrapper"&gt;
  &lt;pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; background-color: #f4f4f4; margin: 0em; border-left-style: none; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; border-right-style: none; font-size: 8pt; overflow: visible; padding-top: 0px" id="codeSnippet"&gt;&lt;span style="color: #0000ff"&gt;using&lt;/span&gt; System;&lt;br /&gt;&lt;span style="color: #0000ff"&gt;using&lt;/span&gt; System.IO;&lt;br /&gt;&lt;span style="color: #0000ff"&gt;using&lt;/span&gt; System.Web;&lt;br /&gt;&lt;span style="color: #0000ff"&gt;using&lt;/span&gt; Moq;&lt;br /&gt;&lt;span style="color: #0000ff"&gt;using&lt;/span&gt; RequestReduce.SassLessCoffee;&lt;br /&gt;&lt;span style="color: #0000ff"&gt;using&lt;/span&gt; RequestReduce.Utilities;&lt;br /&gt;&lt;span style="color: #0000ff"&gt;using&lt;/span&gt; Xunit;&lt;br /&gt;&lt;br /&gt;&lt;span style="color: #0000ff"&gt;namespace&lt;/span&gt; RequestReduce.Facts.SassLessCoffee&lt;br /&gt;{&lt;br /&gt;    &lt;span style="color: #0000ff"&gt;public&lt;/span&gt; &lt;span style="color: #0000ff"&gt;class&lt;/span&gt; LessHandlerFacts&lt;br /&gt;    {&lt;br /&gt;        &lt;span style="color: #0000ff"&gt;class&lt;/span&gt; TestableLessHandler : Testable&amp;lt;LessHandler&amp;gt;&lt;br /&gt;        {&lt;br /&gt;            &lt;span style="color: #0000ff"&gt;public&lt;/span&gt; TestableLessHandler()&lt;br /&gt;            {&lt;br /&gt;                &lt;br /&gt;            }&lt;br /&gt;        }&lt;br /&gt;&lt;br /&gt;        [Fact]&lt;br /&gt;        &lt;span style="color: #0000ff"&gt;public&lt;/span&gt; &lt;span style="color: #0000ff"&gt;void&lt;/span&gt; WillSetCorrectContentType()&lt;br /&gt;        {&lt;br /&gt;            var testable = &lt;span style="color: #0000ff"&gt;new&lt;/span&gt; TestableLessHandler();&lt;br /&gt;            var context = &lt;span style="color: #0000ff"&gt;new&lt;/span&gt; Mock&amp;lt;HttpContextBase&amp;gt;();&lt;br /&gt;            context.Setup(x =&amp;gt; x.Request.Url)&lt;br /&gt;                .Returns(&lt;span style="color: #0000ff"&gt;new&lt;/span&gt; Uri(&lt;span style="color: #006080"&gt;&amp;quot;http://localhost/RRContent/css.less&amp;quot;&lt;/span&gt;));&lt;br /&gt;            var response = &lt;span style="color: #0000ff"&gt;new&lt;/span&gt; Mock&amp;lt;HttpResponseBase&amp;gt;();&lt;br /&gt;            response.SetupProperty(x =&amp;gt; x.ContentType);&lt;br /&gt;            context.Setup(x =&amp;gt; x.Response).Returns(response.Object);&lt;br /&gt;&lt;br /&gt;            testable.ClassUnderTest.ProcessRequest(context.Object);&lt;br /&gt;&lt;br /&gt;            Assert.Equal(&lt;span style="color: #006080"&gt;&amp;quot;text/css&amp;quot;&lt;/span&gt;, response.Object.ContentType);&lt;br /&gt;        }&lt;br /&gt;&lt;br /&gt;        [Fact]&lt;br /&gt;        &lt;span style="color: #0000ff"&gt;public&lt;/span&gt; &lt;span style="color: #0000ff"&gt;void&lt;/span&gt; WillWriteCompiledLess()&lt;br /&gt;        {&lt;br /&gt;            var testable = &lt;span style="color: #0000ff"&gt;new&lt;/span&gt; TestableLessHandler();&lt;br /&gt;            var context = &lt;span style="color: #0000ff"&gt;new&lt;/span&gt; Mock&amp;lt;HttpContextBase&amp;gt;();&lt;br /&gt;            context.Setup(x =&amp;gt; x.Request.Url)&lt;br /&gt;                .Returns(&lt;span style="color: #0000ff"&gt;new&lt;/span&gt; Uri(&lt;span style="color: #006080"&gt;&amp;quot;http://localhost/RRContent/css.less&amp;quot;&lt;/span&gt;));&lt;br /&gt;            var response = &lt;span style="color: #0000ff"&gt;new&lt;/span&gt; Mock&amp;lt;HttpResponseBase&amp;gt;();&lt;br /&gt;            context.Setup(x =&amp;gt; x.Response).Returns(response.Object);&lt;br /&gt;            testable.Mock&amp;lt;IFileWrapper&amp;gt;().Setup(x =&amp;gt; x.GetFileString(It.IsAny&amp;lt;&lt;span style="color: #0000ff"&gt;string&lt;/span&gt;&amp;gt;()))&lt;br /&gt;                .Returns(&lt;span style="color: #006080"&gt;&amp;quot;@brand_color: #4D926F;#header {color: @brand_color;}&amp;quot;&lt;/span&gt;);&lt;br /&gt;            var result = &lt;span style="color: #0000ff"&gt;string&lt;/span&gt;.Empty;&lt;br /&gt;            response.Setup(x =&amp;gt; x.Write(It.IsAny&amp;lt;&lt;span style="color: #0000ff"&gt;string&lt;/span&gt;&amp;gt;())).Callback&amp;lt;&lt;span style="color: #0000ff"&gt;string&lt;/span&gt;&amp;gt;(s =&amp;gt; result = s);&lt;br /&gt;            &lt;span style="color: #0000ff"&gt;const&lt;/span&gt; &lt;span style="color: #0000ff"&gt;string&lt;/span&gt; expected = &lt;span style="color: #006080"&gt;&amp;quot;#header {\n  color: #4d926f;\n}\n&amp;quot;&lt;/span&gt;;&lt;br /&gt;&lt;br /&gt;            testable.ClassUnderTest.ProcessRequest(context.Object);&lt;br /&gt;&lt;br /&gt;            Assert.Equal(expected, result);&lt;br /&gt;        }&lt;br /&gt;&lt;br /&gt;        [Fact]&lt;br /&gt;        &lt;span style="color: #0000ff"&gt;public&lt;/span&gt; &lt;span style="color: #0000ff"&gt;void&lt;/span&gt; WillReturn404IfFileNotFound()&lt;br /&gt;        {&lt;br /&gt;            var testable = &lt;span style="color: #0000ff"&gt;new&lt;/span&gt; TestableLessHandler();&lt;br /&gt;            var context = &lt;span style="color: #0000ff"&gt;new&lt;/span&gt; Mock&amp;lt;HttpContextBase&amp;gt;();&lt;br /&gt;            context.Setup(x =&amp;gt; x.Request.Url)&lt;br /&gt;                .Returns(&lt;span style="color: #0000ff"&gt;new&lt;/span&gt; Uri(&lt;span style="color: #006080"&gt;&amp;quot;http://localhost/RRContent/css.less&amp;quot;&lt;/span&gt;));&lt;br /&gt;            var response = &lt;span style="color: #0000ff"&gt;new&lt;/span&gt; Mock&amp;lt;HttpResponseBase&amp;gt;();&lt;br /&gt;            context.Setup(x =&amp;gt; x.Response).Returns(response.Object);&lt;br /&gt;            testable.Mock&amp;lt;IFileWrapper&amp;gt;().Setup(x =&amp;gt; x.GetFileString(It.IsAny&amp;lt;&lt;span style="color: #0000ff"&gt;string&lt;/span&gt;&amp;gt;()))&lt;br /&gt;                .Throws(&lt;span style="color: #0000ff"&gt;new&lt;/span&gt; FileNotFoundException());&lt;br /&gt;            response.SetupProperty(x =&amp;gt; x.StatusCode);&lt;br /&gt;&lt;br /&gt;            testable.ClassUnderTest.ProcessRequest(context.Object);&lt;br /&gt;&lt;br /&gt;            Assert.Equal(404, response.Object.StatusCode);&lt;br /&gt;        }&lt;br /&gt;&lt;br /&gt;        [Fact]&lt;br /&gt;        &lt;span style="color: #0000ff"&gt;public&lt;/span&gt; &lt;span style="color: #0000ff"&gt;void&lt;/span&gt; WillReturn500IfIOExceptionIsThrown()&lt;br /&gt;        {&lt;br /&gt;            var testable = &lt;span style="color: #0000ff"&gt;new&lt;/span&gt; TestableLessHandler();&lt;br /&gt;            var context = &lt;span style="color: #0000ff"&gt;new&lt;/span&gt; Mock&amp;lt;HttpContextBase&amp;gt;();&lt;br /&gt;            context.Setup(x =&amp;gt; x.Request.Url)&lt;br /&gt;                .Returns(&lt;span style="color: #0000ff"&gt;new&lt;/span&gt; Uri(&lt;span style="color: #006080"&gt;&amp;quot;http://localhost/RRContent/css.less&amp;quot;&lt;/span&gt;));&lt;br /&gt;            var response = &lt;span style="color: #0000ff"&gt;new&lt;/span&gt; Mock&amp;lt;HttpResponseBase&amp;gt;();&lt;br /&gt;            context.Setup(x =&amp;gt; x.Response).Returns(response.Object);&lt;br /&gt;            testable.Mock&amp;lt;IFileWrapper&amp;gt;().Setup(x =&amp;gt; x.GetFileString(It.IsAny&amp;lt;&lt;span style="color: #0000ff"&gt;string&lt;/span&gt;&amp;gt;()))&lt;br /&gt;                .Throws(&lt;span style="color: #0000ff"&gt;new&lt;/span&gt; IOException());&lt;br /&gt;            response.SetupProperty(x =&amp;gt; x.StatusCode);&lt;br /&gt;&lt;br /&gt;            testable.ClassUnderTest.ProcessRequest(context.Object);&lt;br /&gt;&lt;br /&gt;            Assert.Equal(500, response.Object.StatusCode);&lt;br /&gt;        }&lt;br /&gt;    }&lt;br /&gt;}&lt;/pre&gt;

  &lt;br /&gt;&lt;/div&gt;

&lt;p&gt;Here are a few things I’ll call out here that may be of interest:&lt;/p&gt;

&lt;h2&gt;The three A’s: Arrange, Act and Assert&lt;/h2&gt;

&lt;p&gt;This is a common paradigm in unit testing and provides an initial and very basic way of framing your tests. Start with Arranging your tests, then Act by calling the method you are testing and lastly Assert that what you expect to be true (or false) really is as it should be. Now, for some reason the code snippet editor I use in Live Writer, my blog editor of choice, has decided that I really did not need the extra line breaks that I typically insert between my arrange, act, and assert code. So for clarity:&lt;/p&gt;

&lt;div id="codeSnippetWrapper"&gt;
  &lt;pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; background-color: #f4f4f4; margin: 0em; border-left-style: none; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; border-right-style: none; font-size: 8pt; overflow: visible; padding-top: 0px" id="codeSnippet"&gt;&lt;span style="color: #008000"&gt;//ARRANGE&lt;/span&gt;&lt;br /&gt;var testable = &lt;span style="color: #0000ff"&gt;new&lt;/span&gt; TestableLessHandler();&lt;br /&gt;var context = &lt;span style="color: #0000ff"&gt;new&lt;/span&gt; Mock&amp;lt;HttpContextBase&amp;gt;();&lt;br /&gt;context.Setup(x =&amp;gt; x.Request.Url)&lt;br /&gt;    .Returns(&lt;span style="color: #0000ff"&gt;new&lt;/span&gt; Uri(&lt;span style="color: #006080"&gt;&amp;quot;http://localhost/RRContent/css.less&amp;quot;&lt;/span&gt;));&lt;br /&gt;var response = &lt;span style="color: #0000ff"&gt;new&lt;/span&gt; Mock&amp;lt;HttpResponseBase&amp;gt;();&lt;br /&gt;response.SetupProperty(x =&amp;gt; x.ContentType);&lt;br /&gt;context.Setup(x =&amp;gt; x.Response).Returns(response.Object);&lt;br /&gt;&lt;br /&gt;&lt;span style="color: #008000"&gt;//ACT&lt;/span&gt;&lt;br /&gt;testable.ClassUnderTest.ProcessRequest(context.Object);&lt;br /&gt;&lt;br /&gt;&lt;span style="color: #008000"&gt;//ASSERT&lt;/span&gt;&lt;br /&gt;Assert.Equal(&lt;span style="color: #006080"&gt;&amp;quot;text/css&amp;quot;&lt;/span&gt;, response.Object.ContentType);&lt;br /&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2&gt;&lt;a href="http://xunit.codeplex.com" target="_blank"&gt;XUnit&lt;/a&gt; and &lt;a href="http://code.google.com/p/moq/" target="_blank"&gt;Moq&lt;/a&gt; are my TDD tools of choice&lt;/h2&gt;

&lt;p&gt;You will certainly note the using statements referencing these libraries at the top. Over the years I have used different tools for testing and mocking and these are the ones that have stuck because they are simple and just feel natural to me. I encourage you to try them as well.&lt;/p&gt;

&lt;h2&gt;Dependency Injection, the Testable pattern, and Auto Mocking&lt;/h2&gt;

&lt;h3&gt;Dependency Injection&lt;/h3&gt;

&lt;p&gt;Both at work and here at play, I make heavy use of &lt;a href="http://martinfowler.com/articles/injection.html" target="_blank"&gt;Dependency Injection&lt;/a&gt;. In short, this is a pattern whereby you inject services into a class often, but not always, via a constructor and usually in the form of interfaces or abstract classes that are wired up through an IOC container like &lt;a href="http://structuremap.net/structuremap/" target="_blank"&gt;StructureMap&lt;/a&gt; (what I use) or one of many other containers with similar quality and functionality. If you are not familiar with Dependency Injection (DI) or IOC (Inversion of Control) containers, please stop reading this and go to your favorite search engine (mine is google and, who are we kidding, so is yours) to find out more.&lt;/p&gt;

&lt;p&gt;I use dependency injection for several reasons and one of those reasons is testability. By injecting the interfaces of services that I need I accomplish two (probably several more) things:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;The logic included in those services can be tested elsewhere in their own test classes and isolating them in this way allows me to focus just on the logic executed by the class I am currently testing. &lt;/li&gt;

  &lt;li&gt;By using interfaces, I can easily mock the expected behavior of those services. This way I don’t have to call those services directly which would require me to possibly set up all sorts of other stuff like files and database connections (yuck). &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;This handler demonstrates an extremely simple use of DI:&lt;/p&gt;

&lt;div id="codeSnippetWrapper"&gt;
  &lt;pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; background-color: #f4f4f4; margin: 0em; border-left-style: none; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; border-right-style: none; font-size: 8pt; overflow: visible; padding-top: 0px" id="codeSnippet"&gt;&lt;span style="color: #0000ff"&gt;private&lt;/span&gt; &lt;span style="color: #0000ff"&gt;readonly&lt;/span&gt; IFileWrapper fileWrapper;&lt;br /&gt;&lt;br /&gt;&lt;span style="color: #0000ff"&gt;public&lt;/span&gt; LessHandler(IFileWrapper fileWrapper)&lt;br /&gt;{&lt;br /&gt;    &lt;span style="color: #0000ff"&gt;this&lt;/span&gt;.fileWrapper = fileWrapper;&lt;br /&gt;}&lt;/pre&gt;

  &lt;br /&gt;&lt;/div&gt;

&lt;p&gt;My concrete implementation of IFileWrapper has all sorts of methods that do all sorts of fun and wonderful things with files. But who wants to deal with actual files in a unit test? I don’t.&lt;/p&gt;

&lt;h3&gt;The Testable Pattern&lt;/h3&gt;

&lt;p&gt;The Testable pattern, which I believe was coined by &lt;a href="http://bradwilson.typepad.com/blog/" target="_blank"&gt;Brad Wilson&lt;/a&gt; (&lt;a href="http://twitter.com/bradwilson"&gt;@bradwilson&lt;/a&gt;) co creator of XUnit, provides a nice structure for testing classes that use DI. Brad writes about it &lt;a href="http://bradwilson.typepad.com/blog/2011/06/the-testable-object-pattern.html" target="_blank"&gt;here&lt;/a&gt;. Essentially it involves creating a sort of wrapper class that derives from the actual class you are testing and exposes mocked, stubbed or faked implementations of its injectable services. The unit test class then works directly with this “Testable” class. A nice naming convention here is to call this testable class Testable[Your class under test name here]. Hence the class name I use: TestableLessHandler.&lt;/p&gt;

&lt;h3&gt;Auto Mocking&lt;/h3&gt;

&lt;p&gt;You may wonder why my testable class is so sparse. Well, they did not used to be. They used to look something like this:&lt;/p&gt;

&lt;div id="codeSnippetWrapper"&gt;
  &lt;pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; background-color: #f4f4f4; margin: 0em; border-left-style: none; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; border-right-style: none; font-size: 8pt; overflow: visible; padding-top: 0px" id="codeSnippet"&gt;&lt;span style="color: #0000ff"&gt;class&lt;/span&gt; TestableLessHandler : LessHandler&lt;br /&gt;{&lt;br /&gt;    &lt;span style="color: #0000ff"&gt;public&lt;/span&gt; Mock&amp;lt;IFileWrapper&amp;gt; MoqFileWrapper { get; set; }&lt;br /&gt;&lt;br /&gt;    &lt;span style="color: #0000ff"&gt;public&lt;/span&gt; TestableLessHandler(Mock&amp;lt;IFileWrapper&amp;gt; moqFileWrapper)&lt;br /&gt;        : &lt;span style="color: #0000ff"&gt;base&lt;/span&gt;(moqFileWrapper.Object)&lt;br /&gt;    {&lt;br /&gt;        MoqFileWrapper = moqFileWrapper;&lt;br /&gt;    }&lt;br /&gt;&lt;br /&gt;    &lt;span style="color: #0000ff"&gt;public&lt;/span&gt; &lt;span style="color: #0000ff"&gt;static&lt;/span&gt; TestableLessHandler Create()&lt;br /&gt;    {&lt;br /&gt;        &lt;span style="color: #0000ff"&gt;return&lt;/span&gt; &lt;span style="color: #0000ff"&gt;new&lt;/span&gt; TestableLessHandler(&lt;span style="color: #0000ff"&gt;new&lt;/span&gt; Mock&amp;lt;IFileWrapper&amp;gt;());&lt;br /&gt;    }&lt;br /&gt;}&lt;br /&gt;&lt;/pre&gt;

  &lt;br /&gt;&lt;/div&gt;

&lt;p&gt;Well after writing about a hundred of these and often with many more than one dependency, I began thinking there has got to be a better way. And there is! Its called Auto Mocking, Something I have truly grown to love in an HR friendly sort of a way. My new testables look like this:&lt;/p&gt;

&lt;div id="codeSnippetWrapper"&gt;
  &lt;pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; background-color: #f4f4f4; margin: 0em; border-left-style: none; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; border-right-style: none; font-size: 8pt; overflow: visible; padding-top: 0px" id="codeSnippet"&gt;&lt;span style="color: #0000ff"&gt;class&lt;/span&gt; TestableLessHandler : Testable&amp;lt;LessHandler&amp;gt;&lt;br /&gt;{&lt;br /&gt;    &lt;span style="color: #0000ff"&gt;public&lt;/span&gt; TestableLessHandler()&lt;br /&gt;    {&lt;br /&gt;        &lt;span style="color: #008000"&gt;//place for default mock setups&lt;/span&gt;&lt;br /&gt;    }&lt;br /&gt;}&lt;/pre&gt;

  &lt;br /&gt;&lt;/div&gt;

&lt;p&gt;I use StructureMap’s StructureMap.AutoMocking utility to accomplish this. You don’t have to use the full blown StructureMap IOC to use this. It is available as a separate Nuget package you can pull into your VS project and has a MoqAutoMocker class that works nicely with Moq. What auto mocking does is it looks at the dependencies that your class under test use and automatically creates Mocked implementations of the dependencies. Isn’t that nice?&lt;/p&gt;

&lt;p&gt;I wrap up the auto mocking wire up in a class called Testable:&lt;/p&gt;

&lt;div id="codeSnippetWrapper"&gt;
  &lt;pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; background-color: #f4f4f4; margin: 0em; border-left-style: none; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; border-right-style: none; font-size: 8pt; overflow: visible; padding-top: 0px" id="codeSnippet"&gt;&lt;span style="color: #0000ff"&gt;using&lt;/span&gt; System;&lt;br /&gt;&lt;span style="color: #0000ff"&gt;using&lt;/span&gt; StructureMap.AutoMocking;&lt;br /&gt;&lt;span style="color: #0000ff"&gt;using&lt;/span&gt; Moq;&lt;br /&gt;&lt;br /&gt;&lt;span style="color: #0000ff"&gt;namespace&lt;/span&gt; RequestReduce.Facts&lt;br /&gt;{&lt;br /&gt;    &lt;span style="color: #0000ff"&gt;public&lt;/span&gt; &lt;span style="color: #0000ff"&gt;class&lt;/span&gt; Testable&amp;lt;TClassUnderTest&amp;gt; &lt;span style="color: #0000ff"&gt;where&lt;/span&gt; TClassUnderTest : &lt;span style="color: #0000ff"&gt;class&lt;/span&gt;&lt;br /&gt;    {&lt;br /&gt;        &lt;span style="color: #0000ff"&gt;protected&lt;/span&gt; MoqAutoMocker&amp;lt;TClassUnderTest&amp;gt; autoMocker = &lt;br /&gt;            &lt;span style="color: #0000ff"&gt;new&lt;/span&gt; MoqAutoMocker&amp;lt;TClassUnderTest&amp;gt;();&lt;br /&gt;&lt;br /&gt;        &lt;span style="color: #0000ff"&gt;public&lt;/span&gt; Testable()&lt;br /&gt;        {&lt;br /&gt;&lt;br /&gt;        }&lt;br /&gt;&lt;br /&gt;        &lt;span style="color: #0000ff"&gt;public&lt;/span&gt; Testable(Action&amp;lt;Testable&amp;lt;TClassUnderTest&amp;gt;&amp;gt; setup)&lt;br /&gt;        {&lt;br /&gt;            setup(&lt;span style="color: #0000ff"&gt;this&lt;/span&gt;);&lt;br /&gt;        }&lt;br /&gt;&lt;br /&gt;        &lt;span style="color: #0000ff"&gt;public&lt;/span&gt; Mock&amp;lt;TDependencyToMock&amp;gt; Mock&amp;lt;TDependencyToMock&amp;gt;() &lt;br /&gt;            &lt;span style="color: #0000ff"&gt;where&lt;/span&gt; TDependencyToMock : &lt;span style="color: #0000ff"&gt;class&lt;/span&gt;&lt;br /&gt;        {&lt;br /&gt;            var a = autoMocker.Get&amp;lt;TDependencyToMock&amp;gt;();&lt;br /&gt;            &lt;span style="color: #0000ff"&gt;return&lt;/span&gt; Moq.Mock.Get(a);&lt;br /&gt;        }&lt;br /&gt;&lt;br /&gt;        &lt;span style="color: #0000ff"&gt;public&lt;/span&gt; &lt;span style="color: #0000ff"&gt;void&lt;/span&gt; Inject&amp;lt;T&amp;gt;(T type)&lt;br /&gt;        {&lt;br /&gt;            autoMocker.Inject(type);&lt;br /&gt;        }&lt;br /&gt;&lt;br /&gt;        &lt;span style="color: #0000ff"&gt;public&lt;/span&gt; &lt;span style="color: #0000ff"&gt;void&lt;/span&gt; InjectArray&amp;lt;T&amp;gt;(T[] types)&lt;br /&gt;        {&lt;br /&gt;            autoMocker.InjectArray(types);&lt;br /&gt;        }&lt;br /&gt;&lt;br /&gt;        &lt;span style="color: #0000ff"&gt;public&lt;/span&gt; TClassUnderTest ClassUnderTest&lt;br /&gt;        {&lt;br /&gt;            get { &lt;span style="color: #0000ff"&gt;return&lt;/span&gt; autoMocker.ClassUnderTest; }&lt;br /&gt;        }&lt;br /&gt;    }&lt;br /&gt;}&lt;/pre&gt;

  &lt;br /&gt;&lt;/div&gt;

&lt;p&gt;This is the first class that I add to any test assembly I create. I cannot take credit for writing this class. I’m not sure exactly who wrote it but it came from a team lead by my colleague &lt;a href="https://plus.google.com/101416760652185832760/posts" target="_blank"&gt;Tim Shakarian&lt;/a&gt; (aka tshak). This class uses a combination of StructureMap.AutoMock and Moq to allow me to create a testable instance of my class that automatically exposes all of its dependencies via Moq Mocks.&lt;/p&gt;

&lt;p&gt;So my test method uses TestableLessHandler like so:&lt;/p&gt;

&lt;div id="codeSnippetWrapper"&gt;
  &lt;pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; background-color: #f4f4f4; margin: 0em; border-left-style: none; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; border-right-style: none; font-size: 8pt; overflow: visible; padding-top: 0px" id="codeSnippet"&gt;&lt;span style="color: #008000"&gt;//Create the testable&lt;/span&gt;&lt;br /&gt;var testable = &lt;span style="color: #0000ff"&gt;new&lt;/span&gt; TestableLessHandler();&lt;br /&gt;...&lt;br /&gt;&lt;span style="color: #008000"&gt;//Access my depencency via Mock method&lt;/span&gt;&lt;br /&gt;testable.Mock&amp;lt;IFileWrapper&amp;gt;().Setup(x =&amp;gt; x.GetFileString(It.IsAny&amp;lt;&lt;span style="color: #0000ff"&gt;string&lt;/span&gt;&amp;gt;()))&lt;br /&gt;    .Returns(&lt;span style="color: #006080"&gt;&amp;quot;@brand_color: #4D926F;#header {color: @brand_color;}&amp;quot;&lt;/span&gt;);&lt;br /&gt;...&lt;br /&gt;&lt;br /&gt;&lt;span style="color: #008000"&gt;//call method I want to test via the ClassUnderTest property&lt;/span&gt;&lt;br /&gt;testable.ClassUnderTest.ProcessRequest(context.Object);&lt;br /&gt;&lt;/pre&gt;

  &lt;br /&gt;&lt;/div&gt;

&lt;p&gt;After creating the testable, I can access its mocked dependencies via the Mock method. Not shown here, but something I often use, is the Inject method. I can say: &lt;/p&gt;

&lt;div id="codeSnippetWrapper"&gt;
  &lt;pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; background-color: #f4f4f4; margin: 0em; border-left-style: none; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; border-right-style: none; font-size: 8pt; overflow: visible; padding-top: 0px" id="codeSnippet"&gt;testable.Inject&amp;lt;IFileWrapper&amp;gt;(&lt;span style="color: #0000ff"&gt;new&lt;/span&gt; SomeOtherFakeorRealFileWrapperImplementation())&lt;br /&gt;&lt;/pre&gt;

  &lt;br /&gt;&lt;/div&gt;

&lt;p&gt;When all the mock setups, callbacks, etc. are just as I want them to be and I’m ready to actually test my class, I can access the true class via the ClassUnderTest property.&lt;/p&gt;

&lt;p&gt;Perhaps I’ll wrap up this testable into a Nuget package to make it easy for others (and me) to pull it into their test projects.&lt;/p&gt;

&lt;p&gt;So hopefully this is useful to others. Ooops. spent too much time writing this and now I won’t be finishing my &lt;a href="http://RequestReduce.com"&gt;RequestReduce&lt;/a&gt;.SassLessCoffee Nuget package before work. Oh well…maybe tomorrow or tonight.&lt;/p&gt;</content>
  <ispublished>True</ispublished>
  <isdeleted>False</isdeleted>
  <iscommentsenabled>True</iscommentsenabled>
  <pubDate>2011-12-07 06:16:11</pubDate>
  <lastModified>2012-11-14 18:45:39</lastModified>
  <raters>0</raters>
  <rating>0</rating>
  <slug>Unit-Testing-ASPNet-Http-Handlers-and-a-discussion-of-Auto-Mocking-and-the-Testable-pattern</slug>
  <tags />
  <comments>
    <comment id="5120c11f-81cb-49a2-82e3-5ad0014baea1" parentid="00000000-0000-0000-0000-000000000000" approved="True" spam="False" deleted="False">
      <date>2011-12-07 06:21:10</date>
      <author>DotNetKicks.com</author>
      <email>trackback</email>
      <country />
      <ip>74.86.105.210</ip>
      <website>http://www.dotnetkicks.com/unittesting/Unit_Testing_Http_Handlers_and_Auto_Mocking_with_the_Testable_Pattern</website>
      <content>Unit Testing Http Handlers and Auto Mocking with the Testable Pattern

You've been kicked (a good thing) - Trackback from DotNetKicks.com</content>
    </comment>
    <comment id="cf620775-7b6e-4acb-aff0-c7ca24e4f53f" parentid="00000000-0000-0000-0000-000000000000" approved="True" spam="False" deleted="False">
      <date>2011-12-08 03:57:02</date>
      <author>Jason Haley</author>
      <email>trackback</email>
      <country />
      <ip>96.31.33.16</ip>
      <website>http://www.jasonhaley.com/blog/post/2011/12/08/Interesting-Finds-December-8-2011.aspx</website>
      <content>Interesting Finds: December 8, 2011

Interesting Finds: December 8, 2011</content>
    </comment>
    <comment id="cfb860f6-a729-4c0f-b033-0f94e3f19941" parentid="00000000-0000-0000-0000-000000000000" approved="True" spam="False" deleted="False">
      <date>2011-12-15 17:10:30</date>
      <author>msprogrammer.serviciipeweb.ro</author>
      <email>pingback</email>
      <country />
      <ip>89.38.208.18</ip>
      <website>http://msprogrammer.serviciipeweb.ro/2011/12/16/friday-links-11/</website>
      <content>Pingback from msprogrammer.serviciipeweb.ro

friday links 11 &amp;laquo; A Programmer with Microsoft tools</content>
    </comment>
    <comment id="846dde0b-ea05-4266-a30b-e9a9c155334f" parentid="00000000-0000-0000-0000-000000000000" approved="True" spam="False" deleted="False">
      <date>2012-01-02 00:24:12</date>
      <author>Doug McDonald</author>
      <email>dougajmcdonald@gmail.com</email>
      <country />
      <ip>87.113.232.81</ip>
      <moderatedby>mwrock</moderatedby>
      <avatar />
      <content>Great post Matt, liked the HttpContextBase heads up and the clear information on unit testing in general.

The testable pattern is new to me, but I will certainly take a look over it when time allows!</content>
    </comment>
    <comment id="ae355e21-8362-4d71-a4b0-7b19ac068843" parentid="00000000-0000-0000-0000-000000000000" approved="True" spam="False" deleted="False">
      <date>2012-02-15 19:36:53</date>
      <author>Vinney</author>
      <email>vinneyk@live.com</email>
      <country />
      <ip>97.123.37.226</ip>
      <avatar />
      <content>Excellent stuff here! I knew I&amp;#39;ve been under utilizing moq but it&amp;#39;s really helpful to see examples of more sophisticated mocking. Never even heard of automocking (any relation to autotune?). I&amp;#39;m also going to borrow your testable generic. Thanks for pushing my testing chops!</content>
    </comment>
    <comment id="1381692c-6296-4a68-b771-e7e696d4dfbd" parentid="00000000-0000-0000-0000-000000000000" approved="True" spam="False" deleted="False">
      <date>2012-02-18 14:10:31</date>
      <author>Vinney</author>
      <email>vinneyk@live.com</email>
      <country />
      <ip>128.123.21.131</ip>
      <moderatedby>mwrock</moderatedby>
      <avatar />
      <content>Question regarding MoqAutoMocker: my class under test will throw an InvalidOperationException from it&amp;#39;s constructor in certain invalid states. However, handling these exceptions in test isn&amp;#39;t quite as nice as I would like. Bascially, when you access a property which causes StructureMap to instantiate a new instance of the class under test, (either StructureMap or the MoqAutoMapper class) will wrap the desired exception in a StructureMapException. The obvious issue is that I don&amp;#39;t want to test for a StructureMapException rather I want to know if the InvalidOperationExcpetion was thrown.

I&amp;#39;ve been looking for some way to setup the expectation of the exception withing the MoqAutoMapper class but so far I can&amp;#39;t seem to find any proof that such a function exists. And so the best solution I&amp;#39;ve been able to come up with is to wrap my test action lines in a try/catch(StructureMapException) block and throw the inner exception.

Have you experienced this? If so, have you managed to find a more elegant solution?

Thanks!</content>
    </comment>
    <comment id="14265ce9-12c2-4b8a-b574-5a1a285762fd" parentid="00000000-0000-0000-0000-000000000000" approved="True" spam="False" deleted="False">
      <date>2012-02-22 08:00:27</date>
      <author>mwrock</author>
      <email>matt@mattwrock.com</email>
      <country />
      <ip>50.46.255.50</ip>
      <avatar />
      <content>Hey Vinney,

Yeah. You will end up with a StructureMapException and not the InvalidOperationException you would expect. What you can do is rather than test if the thrown exception is an InvalidOperationException, test that the InnerException is an InvalidOperationException. That may not feel as natural as you would like but by using the automocking, you have to be ok with the fact that any exceptions thrown from the class under test constructor will be wrapped in the StructureMapException. However that exception&amp;#39;s InnerException property should be the original exception to test for.

So your test might look like this:


        [Fact]
        public void MyClassWillThrowInvalidOperationException()
        {
            var testable = new TestableMyClass();

            var ex = Record.Exception(() =&amp;gt; testable.ClassUnderTest.MyMethod);

            Assert.IsType&amp;lt;InvalidOperationException&amp;gt;(ex.InnerException);
        }

Note that I am using XUnit&amp;#39;s Record and IsType&amp;lt;T&amp;gt; here.

Hope that helps or addresses your question.</content>
    </comment>
    <comment id="afa08e5d-b569-4d6a-a609-ae8da65b2648" parentid="00000000-0000-0000-0000-000000000000" approved="True" spam="False" deleted="False">
      <date>2012-02-22 14:57:22</date>
      <author>Vinney </author>
      <email>vinneyk@live.com</email>
      <country />
      <ip>128.123.21.131</ip>
      <moderatedby>mwrock</moderatedby>
      <avatar />
      <content>Thanks. I think I ended up wrapping the test action in a try/catch(StructureMapException) and throwing the inner exception but I like your method. The Record class seems cleaner. Thanks for the response!</content>
    </comment>
    <comment id="2efbf47c-e662-4951-8793-78af9c084dd2" parentid="00000000-0000-0000-0000-000000000000" approved="True" spam="False" deleted="False">
      <date>2012-05-15 23:55:00</date>
      <author>Matt Wrock's Blog</author>
      <email>trackback</email>
      <country />
      <ip>96.31.33.25</ip>
      <website>http://www.mattwrock.com/post/2012/05/16/Released-AutoWrockTestable-Making-test-class-composition-easier.aspx</website>
      <content>Released AutoWrockTestable: Making test class composition easier

Released AutoWrockTestable: Making test class composition easier</content>
    </comment>
    <comment id="80dcfe51-b3c1-45a5-b513-d598f356bde6" parentid="00000000-0000-0000-0000-000000000000" approved="True" spam="False" deleted="False">
      <date>2012-05-16 00:47:07</date>
      <author>Matt Wrock's Blog</author>
      <email>trackback</email>
      <country />
      <ip>131.107.192.113</ip>
      <website>http://feedproxy.google.com/~r/Wrockblog/~3/VJpbOvCne2M/post.aspx</website>
      <content>Released AutoWrockTestable: Making test class composition easier

Late last year I blogged about a unit testing pattern I have been using for the past couple years. It</content>
    </comment>
    <comment id="adfafc5f-cb51-4048-8547-472a1406dc57" parentid="00000000-0000-0000-0000-000000000000" approved="True" spam="False" deleted="False">
      <date>2012-11-14 09:45:39</date>
      <author>Jeff Putz</author>
      <email>jeff@popw.com</email>
      <country />
      <ip>184.56.147.10</ip>
      <moderatedby>mwrock</moderatedby>
      <avatar />
      <content>I think Aaron Welker first added that to our codebase, but he in turn got it from somewhere else. That sure was a long time ago!</content>
    </comment>
    <comment id="082174e8-a232-4024-b392-be7e00374208" parentid="00000000-0000-0000-0000-000000000000" approved="True" spam="False" deleted="False">
      <date>2014-08-19 01:23:49</date>
      <author>mattwp.azurewebsites.net</author>
      <email>pingback</email>
      <country />
      <ip>168.62.22.219</ip>
      <website>http://mattwp.azurewebsites.net/?p=1661</website>
      <content>Pingback from mattwp.azurewebsites.net

Released AutoWrockTestable: Making test class composition easier | mattwrock</content>
    </comment>
  </comments>
  <categories />
  <notifications>
    <email>jeff@popw.com</email>
    <email>sabaattitute@gmail.com</email>
  </notifications>
</post>