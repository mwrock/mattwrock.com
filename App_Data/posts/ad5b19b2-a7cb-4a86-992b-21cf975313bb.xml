<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<post>
  <author>mwrock</author>
  <title>Automate Codeplex Releases in your Powershell build and deployment scripts</title>
  <description />
  <content>&lt;p&gt;&lt;a href="http://www.mattwrock.com/image.axd?picture=codeplex_1.png"&gt;&lt;img title="codeplex" style="border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; padding-top: 0px; padding-left: 0px; margin: 0px 10px 0px 0px; display: inline; padding-right: 0px; border-top-width: 0px" border="0" alt="codeplex" src="http://www.mattwrock.com/image.axd?picture=codeplex_thumb_1.png" width="240" height="240" /&gt;&lt;/a&gt;I maintain a few projects on &lt;a href="http://codeplex.com"&gt;Codeplex.com&lt;/a&gt; and one that I have been working on actively lately is &lt;a href="http://boxstarter.codeplex.com"&gt;Boxstarter&lt;/a&gt;. A sort of “Add-On” to &lt;a href="http://chocolatey.org/"&gt;Chocolatey&lt;/a&gt; that allows you to run complex (or simple) environment scripts completely unattended in a reboot/logon resilient manner.&lt;/p&gt;  &lt;p&gt;Whenever I startup any project that I plan to develop beyond a hack or a spike, the very first thing I do is lay down test infrastructure along with build and deployment automation. These are NOT “nice to haves” and especially since I devote my “free” time to these projects, it is important that I make the most of that time and spend as little time as possible chasing regression bugs or mucking with the Release gymnastics of packaging things up and copying/uploading files, etc. It is too easy to get that stuff wrong and takes too long to do and test every detail by hand every time I want to push bits - not to mention that it is just not fun.&lt;/p&gt;  &lt;p&gt;When I push a Boxstarter release, my download zip, click-once app&amp;#160; and home page are updated on my &lt;a href="http://boxstarter.org"&gt;Azure web site&lt;/a&gt; by doing a GIT Push to Master. My &lt;a href="http://chocolatey.org/packages/boxstarter.chocolatey"&gt;Chocolatey packages&lt;/a&gt; are packed and pushed by a deployment script. So the one manual step has been uploading ,my download zip file to Codeplex and creating a Codeplex Release for it. Well it ends up there is a &lt;a href="https://codeplex.codeplex.com/wikipage?title=CodePlexWebServices&amp;amp;referringTitle=CodePlexAPI"&gt;web service&lt;/a&gt; that codeplex maintains to facilitate the automation of this step. It is a SOAP service and therefore a bit of a pain to call directly, but Codeplex also has a &lt;a href="https://codeplex.codeplex.com/wikipage?title=CodePlexNETAPI&amp;amp;referringTitle=CodePlexAPI"&gt;C# SDK&lt;/a&gt; that makes working with this service very easy.&lt;/p&gt;  &lt;p&gt;While the SDK is a .Net Assembly that was likely intended for C# based clients, I prefer to write my build and deployment scripts in Powershell. I believe that what happens in a deployment should be easily discoverable and that the script should serve as the “deployment document.” Compiled code does not lend itself well to that kind of transparency. I also don’t like to use XML for control flow and therefore avoid msbuild for all but the basic compile tasks. &lt;a href="https://github.com/psake/psake"&gt;PSake&lt;/a&gt; is a great powershell tool I have been using for years to organize and execute build and deployment scripts. Every build task is encapsulated by a Powershell function called Task. Here is my &lt;a href="http://boxstarter.codeplex.com/SourceControl/latest#BuildScripts/default.ps1"&gt;Push-Codeplex task&lt;/a&gt;:&lt;/p&gt;  &lt;div id="codeSnippetWrapper"&gt;   &lt;div id="codeSnippetWrapper"&gt;     &lt;div id="codeSnippetWrapper"&gt;       &lt;pre id="codeSnippet" style="border-top-style: none; overflow: visible; font-size: 8pt; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; width: 100%; border-bottom-style: none; color: black; padding-bottom: 0px; direction: ltr; text-align: left; padding-top: 0px; border-right-style: none; padding-left: 0px; margin: 0em; border-left-style: none; line-height: 12pt; padding-right: 0px; background-color: #f4f4f4"&gt;Task Push-Codeplex {&lt;br /&gt; Add-Type -Path `&lt;br /&gt; &lt;span style="color: #006080"&gt;&amp;quot;$basedir\BuildScripts\CodePlexClientAPI\CodePlex.WebServices.Client.dll&amp;quot;&lt;/span&gt;&lt;br /&gt; $releaseService=New-Object CodePlex.WebServices.Client.ReleaseService&lt;br /&gt; $releaseService.Credentials = Get-Credential `&lt;br /&gt;   -Message &lt;span style="color: #006080"&gt;&amp;quot;Codeplex credentials&amp;quot;&lt;/span&gt;`&lt;br /&gt;   -username &lt;span style="color: #006080"&gt;&amp;quot;mwrock&amp;quot;&lt;/span&gt;&lt;br /&gt; $releaseService.CreateARelease(`&lt;br /&gt;     &lt;span style="color: #006080"&gt;&amp;quot;boxstarter&amp;quot;&lt;/span&gt;,`&lt;br /&gt;     &lt;span style="color: #006080"&gt;&amp;quot;Boxstarter $version&amp;quot;&lt;/span&gt;,`&lt;br /&gt;     &lt;span style="color: #006080"&gt;&amp;quot;Running the Setup.bat file will install Chocolatey if not present `&lt;br /&gt;      and then install the Boxstarter modules.&amp;quot;&lt;/span&gt;, `&lt;br /&gt;     [DateTime]::Now,[CodePlex.WebServices.Client.ReleaseStatus]::Beta,`&lt;br /&gt;     $&lt;span style="color: #0000ff"&gt;true&lt;/span&gt;,`&lt;br /&gt;     $&lt;span style="color: #0000ff"&gt;true&lt;/span&gt;)&lt;br /&gt; $releaseFile = New-Object CodePlex.WebServices.Client.releaseFile&lt;br /&gt; $releaseFile.Name=&lt;span style="color: #006080"&gt;&amp;quot;Boxstarter $version&amp;quot;&lt;/span&gt;&lt;br /&gt; $releaseFile.MimeType=&lt;span style="color: #006080"&gt;&amp;quot;application/zip&amp;quot;&lt;/span&gt;&lt;br /&gt; $releaseFile.FileName=&lt;span style="color: #006080"&gt;&amp;quot;boxstarter.$version.zip&amp;quot;&lt;/span&gt;&lt;br /&gt; $releaseFile.FileType=`&lt;br /&gt;   [CodePlex.WebServices.Client.ReleaseFileType]::RuntimeBinary&lt;br /&gt; $releaseFile.FileData=[System.IO.File]::ReadAllBytes(`&lt;br /&gt;   &lt;span style="color: #006080"&gt;&amp;quot;$basedir\BuildArtifacts\Boxstarter.$version.zip&amp;quot;&lt;/span&gt;)&lt;br /&gt; $fileList=&lt;span style="color: #0000ff"&gt;new&lt;/span&gt;-&lt;span style="color: #0000ff"&gt;object&lt;/span&gt; `&lt;br /&gt;   &lt;span style="color: #006080"&gt;&amp;quot;System.Collections.Generic.List``1[[CodePlex.WebServices.Client.ReleaseFile]]&amp;quot;&lt;/span&gt;&lt;br /&gt; $fileList.Add($releaseFile)&lt;br /&gt; $releaseService.UploadReleaseFiles(&lt;span style="color: #006080"&gt;&amp;quot;boxstarter&amp;quot;&lt;/span&gt;, &lt;span style="color: #006080"&gt;&amp;quot;Boxstarter $version&amp;quot;&lt;/span&gt;, $fileList)&lt;br /&gt;}&lt;/pre&gt;

      &lt;br /&gt;&lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;This adds the types in the Codeplex.Webservices.Client assembly to the current Powershell session. I have downloaded&amp;#160; the SDK and put it in my source tree. Its too bad this is not packaged in its own Nuget package. Then I could use Package Restore to grab the bits from Nuget.org. &lt;/p&gt;

&lt;p&gt;Note that this assembly has a dependency on a couple Build assemblies. You could try to track these down separately but since I have Visual Studio installed, this gives me these dependencies.&lt;/p&gt;

&lt;p&gt;The parent object handling all codeplex project commands takes a ICredentials to authenticate the client. I can simply use Get-Credential for this. This does require me to manually enter my password but that is fine for my script.If you had a more enterprise grade deployment that needed to fully script the authentication, that is very possible. After that I am free to create my release, and upload my file. This worked flawlessly for my project and now I can deploy my project with a single command.&lt;/p&gt;</content>
  <ispublished>True</ispublished>
  <isdeleted>False</isdeleted>
  <iscommentsenabled>True</iscommentsenabled>
  <pubDate>2013-08-12 01:48:00</pubDate>
  <lastModified>2013-08-12 01:54:13</lastModified>
  <raters>0</raters>
  <rating>0</rating>
  <slug>Automate-Codeplex-Releases-in-your-Powershell-build-and-deployment-scripts</slug>
  <tags />
  <comments />
  <categories />
  <notifications />
</post>