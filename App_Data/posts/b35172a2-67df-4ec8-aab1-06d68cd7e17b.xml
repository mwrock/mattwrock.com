<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<post>
  <author>mwrock</author>
  <title>Debugging Managed Production Applications with WinDbg</title>
  <description />
  <content>&lt;p&gt;Yesterday our issue tracking software was hanging and the vendor was not responding to our ticket requsts (They are nine hours ahead of us). The application is a .NET application so I decided to capture a crash dump and dive in with windbg. I have a love/hate relationship with windbg. I love it because it provides a vast wealth of informationvirtually telling me EVERYTHING thats going on with my process. It has saved my behind several times. I hate it because I don't use it frequently enough to have all of the cryptic commands memorized and often have to relearn and reresearch the commands I need to use in order to solve my problem. Windbg is not for the faint of heart. There is no drag and drop here. But if you have an app bugging out on a production server and don't want to attach a debuger to it, windbg is the tool for you.&lt;/p&gt;
&lt;p&gt;This post is an adaptation of a document I created for my team and me a few years back. I use it like a cheat sheet to help me get started quickly.&lt;/p&gt;
&lt;p&gt;When servers start crashing and/or hanging in production, often the only recourse you have is to capture a memory dump of the ailing process and analyze it using Microsoft&amp;rsquo;s Native debugger &amp;ndash; WinDbg. Without this tool, you may just be shooting in the dark. These techniques can not only be applied to web applications but to any application &amp;ndash; under managed or unmanaged code.&lt;/p&gt;
&lt;p&gt;A memory dump will allow you to see everything going on in the captured process: executing threads and how long each have been running, stack traces of all threads and even the values of parameters passed to functions. They can also be used to troubleshoot memory leaks, allowing you to see what is in the heap.&lt;/p&gt;
&lt;p&gt;A word of caution is in order: windbg is a pain to use. At least that has been my experience. There is almost no documentation included and the commands are very unintuitive, and this is compounded by the fact that you (hopefully) rarely use it.&lt;/p&gt;
&lt;p&gt;There are three basic steps to this process:&lt;/p&gt;
&lt;ol style="margin-top: 0in;" type="1"&gt;
&lt;li&gt;Preparing the      debugging environment on the problem server.&lt;/li&gt;
&lt;li&gt;Actually      capturing the dump while your process is crashing or crashed.&lt;/li&gt;
&lt;li&gt;Analyzing the      dump in windbg&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Preparing the Debugging Environment&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;There are a few steps to complete to get the server ready:&lt;/p&gt;
&lt;ol style="margin-top: 0in;" type="1"&gt;
&lt;li&gt;Install      Microsoft&amp;rsquo;s Debugging toolkit. Get the latest version at &lt;a href="http://www.microsoft.com/whdc/DevTools/Debugging/default.mspx"&gt;http://www.microsoft.com/whdc/DevTools/Debugging/default.mspx&lt;/a&gt;. Note that there is a 32 bit and 64 bit version. If you are running on a 64 bit server but you have a managed app that is compiled for 32 bit, you will need to use the 32 bit version of windbg to debug.&lt;/li&gt;
&lt;li&gt;Create an      environment variable for path to symbol file (.pdb files that contain      information that map native instructions tp function calls). Create a      system environment variable called _NT_SYMBOL_PATH with the value: C:\symbols\debugginglabs*http://msdl.microsoft.com/download/symbols;C:\symbols\debugginglabs;C:\Program      Files\Microsoft.Net\FrameworkSDK\symbols;C:\windows\system32&lt;/li&gt;
&lt;li&gt;Copy sos.dll      from the Microsoft.net directory to the same directory where you installed      the debugging toolkit. This file provides extensions to windbg for analyzing      managed code.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Capturing a Memory Dump&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;This step can be a bit tricky depending on the circumstances of your crashing behavior. There are typically 3 ways to do this:&lt;/p&gt;
&lt;ol style="margin-top: 0in;" type="1"&gt;
&lt;li&gt;Call up a test      URL to see if the app has crashed or is locking&lt;/li&gt;
&lt;li&gt;Use Task Manager      to see if the CPU is pinned&lt;/li&gt;
&lt;li&gt;Use Performance      Monitor and look for queueing threads. If threads are queueing, that means      that all available .net worker threads are busy which usually means      something is wrong.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Once you have determined that the process has crashed, bring up a command prompt and navigate to the directory where you downloaded the debugging toolkit. Next type:&lt;/p&gt;
&lt;p&gt;adplus.vbs &amp;ndash;hang &amp;ndash;pid [process ID of problem process]&lt;/p&gt;
&lt;p&gt;If there are more than one worker process running and you are not sure which one is causing problems, repeat the above command for both processes.&lt;/p&gt;
&lt;p&gt;This command will launch windbg in a separate window to load the process information. Just let it run and it will close when it completes.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Analyzing the Dump&lt;/strong&gt;&lt;/p&gt;
&lt;ol style="margin-top: 0in;" type="1"&gt;
&lt;li&gt;Open windbg.exe      which is inside the directory that you extracted the debugging toolkit to.&lt;/li&gt;
&lt;li&gt;Go to File/Open      Crash Dump and find the dump (.DMP) file you just captured. It will be in      a subfolder of the debugging toolkit directory.&lt;/li&gt;
&lt;li&gt;type .load      sos.dll to load the managed code extensions.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;You are now ready to start troubleshooting. Below are some commands I commonly use to get useful information. At the end of this document are some links to some MS white papers with more detailed information on performance debugging.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Listing all threads and how long they have been running&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;!runaway&lt;/p&gt;
&lt;p&gt;Note the thread IDs of any particularly long running threads. If you have several threads that have been running for minutes, that could point to a never ending loop that is eating CPU or just a long running background thread.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Listing Managed Threads&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;!threads&lt;/p&gt;
&lt;p&gt;There are several noteworthy tidbits here:&lt;/p&gt;
&lt;p&gt;Lock Count: If this is greater than 0, it means that the thread is waiting(blocking) for another thread. For instance it might be waiting for a DB query to come back or a response from a socket. If you have a bunch of these, it could be a tip that there is a bad query. See below on how to get the call stack of an individual thread to see exactly what it is doing.&lt;/p&gt;
&lt;p&gt;Domain: This is the address of the app domain that the thread is running in. This is very helpful if you have several web sites running in the same worker process. Once you find the problem thread(s), you can use this to see which web app is causing the problem. Keep in mind that all asp.net workerprocess have a &amp;ldquo;default&amp;rdquo; app domain used for launching new app domains (there is one per web app) and handling GC.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Determine which Web Application a thread is running in&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;!dumpdomain [address]&lt;/p&gt;
&lt;p&gt;This dumps a list of assemblies loaded into the domain which should tip you off as to which web app it is running in.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Get a summary information on the Threadpool&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;!threadpool&lt;/p&gt;
&lt;p&gt;This tells you haw many threads are free/in use and what the CPU utilization was at the time of the capture.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Get the stack trace of a single thread including passed parameters&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;~[thread id]e !clrstack &amp;ndash;p&lt;/p&gt;
&lt;p&gt;Get the thread ID from !threads or use &amp;ldquo;*&amp;rdquo; to get a dump of ALL threads.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Get detailed information on an object&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;!dumpobj [address]&lt;/p&gt;
&lt;p&gt;This gives info on all fields in the object.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;More Resources&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://msdn.microsoft.com/en-us/library/ms954594.aspx"&gt;http://msdn.microsoft.com/en-us/library/ms954594.aspx&lt;/a&gt; &lt;br /&gt;This is an old link but has good and thorough informatioin.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://blogs.msdn.com/tess/"&gt;http://blogs.msdn.com/tess/&lt;/a&gt; This is Tess Ferrandez's blog. She has tons of great posts on this subject and also on analyzing memory leaking problems.&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;</content>
  <ispublished>True</ispublished>
  <isdeleted>False</isdeleted>
  <iscommentsenabled>True</iscommentsenabled>
  <pubDate>2009-09-24 11:27:00</pubDate>
  <lastModified>2013-05-28 20:06:15</lastModified>
  <raters>0</raters>
  <rating>0</rating>
  <slug>Debugging-Maaged-Production-Applications</slug>
  <tags />
  <comments />
  <categories />
  <notifications>
    <email>egraver@hotmail.com</email>
    <email>webmaster@hisomersetnj.com</email>
    <email>webmaster@industriallandgujarat.com</email>
    <email>touhid3h@gmail.com</email>
    <email>sabaattitute@gmail.com</email>
  </notifications>
</post>