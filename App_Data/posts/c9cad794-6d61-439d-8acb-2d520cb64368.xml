<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<post>
  <author>mwrock</author>
  <title>Nuget and Powershell WebAdministration Module Issues</title>
  <description />
  <content>&lt;p&gt;I’ve been working on getting an authentication library&amp;#160; packaged using nuget. The library uses an X509 certificate to encrypt and decrypt auth ticket data stored in a cookie. So to make it easy to get the library up and running, I wanted to create an install.ps1 script that would install the x509 cert in the correct location of the cert store. In order for the library to access the certificate, the account under which the hosting web application runs needs to have read permissions on the cert. I need to figure out which account that is and then use winhttpcertcfg.exe to grant that account the appropriate permissions.&lt;/p&gt;  &lt;p&gt;I had assumed that this would simply involve loading the WebAdministration powershell module and then accessing its cmdlets to query which website has a physical path matching the one of the project that is referencing&amp;#160; my package. Then find its application pool’s process model to determine which account the application runs under.&lt;/p&gt;  &lt;p&gt;When I began testing this script from within the nuget package manager console, I started getting an unexpected error on the first call into any cmdlet of the WebAdministration module:&lt;/p&gt;  &lt;p&gt;Get-Website : Retrieving the COM class factory for component with CLSID {688EEEE5-6A7E-422F-B2E1-6AF00DC944A6} failed d   &lt;br /&gt;ue to the following error: 80040154 Class not registered (Exception from HRESULT: 0x80040154 (REGDB_E_CLASSNOTREG)).    &lt;br /&gt;At line:1 char:12    &lt;br /&gt;+ GET-WEBSITE &amp;lt;&amp;lt;&amp;lt;&amp;lt;    &lt;br /&gt;&amp;#160;&amp;#160;&amp;#160; + CategoryInfo&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; : NotSpecified: (:) [Get-Website], COMException    &lt;br /&gt;&amp;#160;&amp;#160;&amp;#160; + FullyQualifiedErrorId : System.Runtime.InteropServices.COMException,Microsoft.IIs.PowerShell.Provider.GetWebsite    &lt;br /&gt;&amp;#160;&amp;#160; Command&lt;/p&gt;  &lt;p&gt;After spending some time researching this, I discovered that nuget uses the 32 bit powershell.exe shell and that the module is looking for com classes not registered in the wow64 registry on a 64 bit system. This proved to be very frustrating and I was wondering if discovering the IIS user account would not be possible in my nuget install.&lt;/p&gt;  &lt;p&gt;After more research, I discovered that I could get to what I needed using the .net Microsoft.Web.Administration assembly. While probing this assembly is not quite as friendly and terse as the WebAdministration module, it met my needs perfectly. Here is the powershell script that determines the application pool identity:&lt;/p&gt;  &lt;p&gt;&amp;#160;&lt;/p&gt;  &lt;div id="codeSnippetWrapper"&gt;   &lt;div id="codeSnippetWrapper"&gt;     &lt;pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; background-color: #f4f4f4; margin: 0em; border-left-style: none; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; border-right-style: none; font-size: 8pt; overflow: visible; padding-top: 0px" id="codeSnippet"&gt;param($installPath, $toolsPath, $package, $project)&lt;br /&gt;&lt;br /&gt;&lt;span style="color: #cc6633"&gt;function&lt;/span&gt; GetAppPoolAccount([string] $webDirectory)&lt;br /&gt;{&lt;br /&gt;    [System.Reflection.Assembly]::LoadWithPartialName(&lt;span style="color: #006080"&gt;&amp;quot;Microsoft.Web.Administration&amp;quot;&lt;/span&gt;)&lt;br /&gt;    $iis = &lt;span style="color: #0000ff"&gt;new&lt;/span&gt;-object Microsoft.Web.Administration.ServerManager&lt;br /&gt;    $account = &lt;span style="color: #006080"&gt;&amp;quot;NetworkService&amp;quot;&lt;/span&gt;&lt;br /&gt;    $site = $iis.sites | where-object {$_.state -eq &lt;span style="color: #006080"&gt;&amp;quot;Started&amp;quot;&lt;/span&gt;}| &lt;br /&gt;        foreach-object {$_.applications} | where-object {&lt;br /&gt;            $_.virtualdirectories -contains (&lt;br /&gt;                foreach-object {$_.virtualdirectories} | where-object {&lt;br /&gt;                    $_.physicalpath -eq $webDirectory&lt;br /&gt;                }&lt;br /&gt;            )&lt;br /&gt;        }&lt;br /&gt;    &lt;span style="color: #0000ff"&gt;if&lt;/span&gt;($site)&lt;br /&gt;    {&lt;br /&gt;        $poolName = $site.applicationPoolName&lt;br /&gt;        $pool = $iis.applicationpools | where-object{$_.name -eq $site.ApplicationPoolName}&lt;br /&gt;        &lt;span style="color: #0000ff"&gt;if&lt;/span&gt;($pool.processModel.identityType -eq &lt;span style="color: #006080"&gt;&amp;quot;SpecificUser&amp;quot;&lt;/span&gt;){&lt;br /&gt;            $account = $pool.processModel.userName&lt;br /&gt;        }&lt;br /&gt;        elseif($pool.processModel.identityType -eq &lt;span style="color: #006080"&gt;&amp;quot;ApplicationPoolIdentity&amp;quot;&lt;/span&gt;){&lt;br /&gt;            $account = &lt;span style="color: #006080"&gt;&amp;quot;IIS APPPOOL\$poolName&amp;quot;&lt;/span&gt;&lt;br /&gt;        }&lt;br /&gt;        &lt;span style="color: #0000ff"&gt;else&lt;/span&gt;{&lt;br /&gt;            $account = $pool.processModel.identityType&lt;br /&gt;        }&lt;br /&gt;    }&lt;br /&gt;    &lt;span style="color: #0000ff"&gt;return&lt;/span&gt; $account&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;. GetAppPoolAccount -webDirectory (Get-Item $project.FullName).Directory&lt;br /&gt;.$toolsPath\InstallAuthCerts $toolsPath &lt;span style="color: #006080"&gt;&amp;quot;INT&amp;quot;&lt;/span&gt; $account&lt;br /&gt;&lt;/pre&gt;

    &lt;br /&gt;&lt;/div&gt;

  &lt;br /&gt;&lt;/div&gt;



&lt;p&gt;Essentially the Microsoft.Web.Administration assembly exposes the IIS applicationHost.config data in the same format that it exists in xml. My script loads the assembly, instantiates the ServerManager class and iterates its members to get the information I need. I then call into my InstallAuthCerts script with the path of the cert, the environment, and the account name which will install the cert and grant the appropriate permissions to $account.&lt;/p&gt;

&lt;p&gt;Now if someone can point out how to use the WebAdministration module from a nuget console, I’d be grateful for that information. I dug around quite a bit and from what I can tell, it can’t be done. At least not on&amp;#160; a 64 bit machine.&lt;/p&gt;</content>
  <ispublished>True</ispublished>
  <isdeleted>False</isdeleted>
  <iscommentsenabled>True</iscommentsenabled>
  <pubDate>2011-01-03 22:12:42</pubDate>
  <lastModified>2012-04-26 11:16:23</lastModified>
  <raters>0</raters>
  <rating>0</rating>
  <slug>Nuget-and-Powershell-WebAdministration-Module-Issues</slug>
  <tags />
  <comments>
    <comment id="da424b67-5095-4f58-b3ec-428cafcab012" parentid="00000000-0000-0000-0000-000000000000" approved="True" spam="False" deleted="False">
      <date>2011-01-03 22:23:52</date>
      <author>Codebix.com</author>
      <email>trackback</email>
      <country />
      <ip>67.231.245.122</ip>
      <website>http://codebix.com/posts/post/162132/Nuget-and-Powershell-WebAdministration-Module-Issues</website>
      <moderatedby>Rule:white list</moderatedby>
      <content>Codebix.com - Your post is on Codebix.com

This post has been featured on Codebix.com. The place to find latest articles on programming. Click on the url to reach your post's page.</content>
    </comment>
    <comment id="112e1417-eb06-49f9-bc8b-a43e2be6cdf4" parentid="00000000-0000-0000-0000-000000000000" approved="True" spam="False" deleted="False">
      <date>2012-04-26 02:16:23</date>
      <author>igor </author>
      <email>se7en__@live.com</email>
      <country />
      <ip>24.16.60.116</ip>
      <avatar />
      <content> After searching for the same thing you did for the past hour, I came accross your site.  Ill be using your suggestion to get all the sites through the assembly.

Thanks!</content>
    </comment>
    <comment id="cf2b8eab-2ece-4f4b-8e43-9fc92881e233" parentid="00000000-0000-0000-0000-000000000000" approved="False" spam="True" deleted="False">
      <date>2013-07-15 21:10:23</date>
      <author>PSN Cards 50$ Free</author>
      <email>bernd.fish@web.de</email>
      <country />
      <ip>108.62.71.105</ip>
      <moderatedby>App_Code.Extensions.StopForumSpam</moderatedby>
      <avatar />
      <content>Free PSN Cards

Look into my blog:  PSN Cards 50$ Free - http://www.psn-code-gen.tk </content>
    </comment>
  </comments>
  <categories />
  <notifications>
    <email>se7en__@live.com</email>
  </notifications>
</post>