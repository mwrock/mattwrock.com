<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<post>
  <author>mwrock</author>
  <title>Getting TransactionScope to play nice with NHibernate</title>
  <description />
  <content>&lt;p&gt;My team is beginning to integrate NHibernate into a fairly large code base that makes frequent use of TransactionScope to ensure that the saving of related entities succeed or fail together. My own NHibernate experience has been primarily on green field projects and on existing projects where the NHibernate work was well isolated from existing plain ADO calls. Furthermore, my use of transactions has typically been from within stored procedures and I have never used any of the transactional functionality exposed by the ADO APIs. So this strange thing called TransactionScope was an entirely new concept for me to understand.&lt;/p&gt;  &lt;p&gt;Now before I elaborate on the drama and adventure that accompanied this learning experience and some of the failures that ensued, I’ll quickly jump to the moral of this story for those of you that simply want to know what is the right way to get NHibernate transactions to participate in a transaction defined by TransactionScope. Simply stated: its all in the nesting. Instantiate a TransactionScope on the outside and and begin and commit/rollback an NHibernate transaction on the inside.&lt;/p&gt;  &lt;div id="codeSnippetWrapper"&gt;   &lt;pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; background-color: #f4f4f4; margin: 0em; border-left-style: none; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; border-right-style: none; font-size: 8pt; overflow: visible; padding-top: 0px" id="codeSnippet"&gt;&lt;span style="color: #0000ff"&gt;using&lt;/span&gt;(var scope = &lt;span style="color: #0000ff"&gt;new&lt;/span&gt; TransactionScope())&lt;br /&gt;{&lt;br /&gt;    SaveEtitiesNotManagedByNH();&lt;br /&gt;    &lt;span style="color: #0000ff"&gt;using&lt;/span&gt; (var transaction = session.BeginTransaction())&lt;br /&gt;    {&lt;br /&gt;        session.SaveOrUpdate(entity);&lt;br /&gt;        transaction.Commit();&lt;br /&gt;    }&lt;br /&gt;    scope.Complete();&lt;br /&gt;}&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;What is happening here? Instantiating a new TransactionScope creates an “ambient” transaction.&amp;#160; What the heck is an ambient Transaction? An ambient transaction is part of the implicit programming model provided by the Systems.Transactions namespace. The msdn documentation advises developers to use this model instead of creating their own explicit transactions. The TransactionScope is ThreadStatic and therefore all ADO operations on that thread will participate in this ambient transaction.&lt;/p&gt;

&lt;p&gt;There are some optional constructor arguments that can be used when creating a new TransactionScope that controls whether to create a brand new ambient transaction or to participate in one that already exists. For example, in the above block, it is possible that SaveEtitiesNotManagedByNH calls into methods that also have using blocks around a new TransactionScope. If new TransactionScopes are created with the default constructor, those scopes will participate in the same transaction as the one created by the outermost&amp;#160; TransactionScope. See the &lt;a href="http://msdn.microsoft.com/en-us/library/system.transactions.transactionscope.aspx"&gt;MSDN documentation&lt;/a&gt; for details on creating new TransactionScopes.&lt;/p&gt;

&lt;p&gt;Since NHibernate 2.1 onward, the NHibernate transactions will participate in an ambient transaction if one exists. So in the code block above, all NHibernate&amp;#160; persistence logic is a part of the same transaction as any non NHibernate persistence code since it all occurs within the same TransactionScope.&lt;/p&gt;

&lt;p&gt;When scope.Complete() is called, it simply sets a bit on the TransactionScope that claims that everything within the scope succeeded. When the TransactionScope is disposed at the end of the using block (or the outermost block if there are nested scopes), the transaction is commited as long as Completed was called. If completed was never called, the transaction is rolled back.&lt;/p&gt;

&lt;h2&gt;TransactionScope/NHibernate Pitfalls&lt;/h2&gt;

&lt;p&gt;So now that we have looked at the right way to manage the relationship between the&amp;#160; TransactionScope and NHibernate Transaction, lets look at some other techniques that might seem like a good idea but I assure you are bad.&lt;/p&gt;

&lt;h3&gt;Following a Single Transaction per Request Unit of Work pattern&lt;/h3&gt;

&lt;p&gt;Our original NHibernate implementation was following a Unit of Work pattern. This is a common and very nice pattern that typically involves opening an NHibernate session upon the first call into NHibernate and then closing the session in the EndRequest method of global.asax or a custom HttpModule. Our infrastructure took this one step further and opened a transaction after creating the session and committed or rolled it back in EndRequest. For now lets kindly suspend our disbelief in bad transaction management and pretend that this is a good idea because it supports a simple model where the developer can assume that all activity in a single request will succeed or fail together.&lt;/p&gt;

&lt;p&gt;Following this technique, it is likely that an NHibernate explicit transaction will be created before an Ambient transaction exists.&lt;/p&gt;

&lt;div id="codeSnippetWrapper"&gt;
  &lt;pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; background-color: #f4f4f4; margin: 0em; border-left-style: none; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; border-right-style: none; font-size: 8pt; overflow: visible; padding-top: 0px" id="codeSnippet"&gt;session.GetEntityById(id);&lt;br /&gt;&lt;br /&gt;&lt;span style="color: #0000ff"&gt;using&lt;/span&gt;(var scope = &lt;span style="color: #0000ff"&gt;new&lt;/span&gt; TransactionScope())&lt;br /&gt;{&lt;br /&gt;    SaveEtitiesNotManagedByNH(); &lt;br /&gt;    session.SaveOrUpdate(entity); &lt;br /&gt;    scope.Complete();&lt;br /&gt;}&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Here, NHibernate is used to retrieve an entity which, in our framework, causes a Transaction to begin. Therefore the non NHibernate activity is in a completely separate transaction. When the ambient transaction is created, it will look for the presence of an existing ambient transaction. There will be none and a completely new and separate transaction will be created.&amp;#160; As a result, operations in these two contexts will have no visibility of uncommited data in the other.&lt;/p&gt;

&lt;p&gt;To remedy this, we created a TransactionScope in BeginRequest and stored it in HttpContext. On EndRequest, we would retrieve that TransactionScope and call Completed and dispose of it. This way we are guaranteed that the ambient transaction&amp;#160; exists before BeginTransaction is called on the NHibernate transaction and we can be assured that the NHibernate operations will enlist in that transactions.&lt;/p&gt;

&lt;p&gt;This would fail randomly because in ASP.NET, there is no guarantee that BeginRequest and EndRequest will occur on the same thread. A Transaction scope will throw an exception if you try to dispose of it on a different thread than the one where it was created. So in the occasional event that EndRequest executed on a different thread then BeginRequest, this exception was thrown.&lt;/p&gt;

&lt;p&gt;I then tried using PreRequestHandlerExecute and PostRequestHandlerExecute instead of BeginRequest and EndRequest. Those will always occur on the same thread. It appeared that this was a working solution and worked in our dev environments. However, when we moved this to an integration environment, we began seeing database timeout errors. Reviewing the active connections in the database, spids were blocking and the spid at the top of the blocking chain was holding an open transaction. What was particularly odd was that this spid was locking a resource that we thought was being inserted outside of a TransactionScope or any explicit transaction.&lt;/p&gt;

&lt;p&gt;It ended up that the reason this was happening is that there are certain circumstances where PostRequestHandlerExecute is never called. For example on a Response.Redirect where endRequest is false. Under such circumstances, the TransactionScope is not disposed. Since the TransactionScope is in Thread Local Storage, it remains tied to the request’s thread even after the request ends. The thread returns to the worker pool and later gets pulled by another thread. In our case, this was a background thread that typically never used explicit transactions and simply inserted a row into a commonly queried table. After the background thread finished its work, since it never calls Commit, the table remains locked and simple queries by other requests on that table time out. To summarize this unfortunate series of events:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Web request begins and creates a new TransactionScope. &lt;/li&gt;

  &lt;li&gt;The Request returns a 302 redirect and PostRequestHandlerExecute does not execute and therefore the TransactionScope is not disposed and remains in thread al storage. &lt;/li&gt;

  &lt;li&gt;Thread returns to the worker pool. &lt;/li&gt;

  &lt;li&gt;Background thread is launched from the worker pool and thread with undisposed TransactionScope is used. &lt;/li&gt;

  &lt;li&gt;Thread inserts row into Table A. &lt;/li&gt;

  &lt;li&gt;Thread exits and still does not call dispose and the transaction remains open. &lt;/li&gt;

  &lt;li&gt;A new web request queries Table A and waits for the open transaction to release its exclusive lock. &lt;/li&gt;

  &lt;li&gt;The new request times out since the lock is never released as the thread that owns the locking transaction is sitting idle in the thread pool. &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;This is a nasty bug that thankfully never reached production. These kinds of bugs are always difficult to to troubleshoot, occur in nondeterministic patterns and affect not only the user who came in on that thread but can bring down the entire application.&lt;/p&gt;

&lt;p&gt;Reflecting on this scenario, it became apparent that:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;TransactionScope should always be limited to the confines of a using or Try/Finally block. Risking the fact that Dispose may never be called is too great. &lt;/li&gt;

  &lt;li&gt;Keeping a transaction open during the entirety of a web request is extremely dangerous. It is unwise to assume that something, perhaps completely non database related, will never trigger a long running request and therefore lock up database resources that&amp;#160; again could bring down an entire site. This is one of the cardinal rules of ACID transactions to keep them as short as possible. &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;So I decided to eliminate the one transaction per request technique. We continue to use Unit of Work for Sessions, but developers will be responsible for defining their own transactions according to the needs of the request.&lt;/p&gt;

&lt;h3&gt;Failing to use explicit NHibernate Transactions within the TransactionScope&lt;/h3&gt;

&lt;p&gt;Having resolved to abandon a single master TransactionScope and continue to use the TransactionScopes currently sprinkled throughout the code, it seemed rational that we could simply invoke our NHibernate persistence calls within a TransactionScope and all would be well. Something like the following seemed innocent enough:&lt;/p&gt;

&lt;div id="codeSnippetWrapper"&gt;
  &lt;pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; background-color: #f4f4f4; margin: 0em; border-left-style: none; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; border-right-style: none; font-size: 8pt; overflow: visible; padding-top: 0px" id="codeSnippet"&gt;&lt;span style="color: #0000ff"&gt;using&lt;/span&gt;(var scope = &lt;span style="color: #0000ff"&gt;new&lt;/span&gt; TransactionScope())&lt;br /&gt;{&lt;br /&gt;    SaveEtitiesNotManagedByNH();&lt;br /&gt;    session.SaveOrUpdate(entity);&lt;br /&gt;     scope.Complete();&lt;br /&gt;}&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Well this quickly started throwing an error I had never seen before when disposing the TransactionScope. The message was something like “The state of this transaction is in doubt” with some methods in the stack trace calling something like PhaseOneCommit and an inner timeout exception. I’ll admit that&amp;#160; I have not dug into the NHibernate source to see exactly what is happening here, but it sounds like a distributed transaction gone bad. My guess is that the NHibernate activity is treated like a distributed transaction even though it is operating on the same database as the on NHibernate code. When NHibernate saves the data, that operation enlists in the TransactionScope but NHibernate has no awareness that it is involved and therefore it will never Commits its end of the distributed transaction and causes the TransactionScope to timeout.&lt;/p&gt;

&lt;h2&gt;The Final Solution&lt;/h2&gt;

&lt;p&gt;So the final solution involved a nesting pattern like the one shown at the beginning of this post. However, to make it easier to implemented I created a wrapper to wrap both the TransactionScopoe and the NHibernate transaction:&lt;/p&gt;

&lt;div id="codeSnippetWrapper"&gt;
  &lt;div id="codeSnippetWrapper"&gt;
    &lt;pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; background-color: #f4f4f4; margin: 0em; border-left-style: none; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; border-right-style: none; font-size: 8pt; overflow: visible; padding-top: 0px" id="codeSnippet"&gt;&lt;span style="color: #0000ff"&gt;public&lt;/span&gt; &lt;span style="color: #0000ff"&gt;interface&lt;/span&gt; IOrmOuterTransactionScope : IDisposable&lt;br /&gt;{&lt;br /&gt;    &lt;span style="color: #0000ff"&gt;void&lt;/span&gt; Complete();&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;&lt;span style="color: #0000ff"&gt;public&lt;/span&gt; &lt;span style="color: #0000ff"&gt;class&lt;/span&gt; NhOuterTransactionScope : IOrmOuterTransactionScope&lt;br /&gt;{&lt;br /&gt;    &lt;span style="color: #0000ff"&gt;private&lt;/span&gt; &lt;span style="color: #0000ff"&gt;readonly&lt;/span&gt; ISession session;&lt;br /&gt;    &lt;span style="color: #0000ff"&gt;private&lt;/span&gt; &lt;span style="color: #0000ff"&gt;readonly&lt;/span&gt; TransactionScope scope;&lt;br /&gt;    &lt;span style="color: #0000ff"&gt;private&lt;/span&gt; &lt;span style="color: #0000ff"&gt;readonly&lt;/span&gt; ITransaction transaction;&lt;br /&gt;&lt;br /&gt;    &lt;span style="color: #0000ff"&gt;public&lt;/span&gt; NhOuterTransactionScope(ISession session)&lt;br /&gt;        : &lt;span style="color: #0000ff"&gt;this&lt;/span&gt;(session, TransactionScopeOption.Required, &lt;span style="color: #0000ff"&gt;new&lt;/span&gt; TransactionOptions {&lt;br /&gt;            IsolationLevel = IsolationLevel.RepeatableRead})&lt;br /&gt;    {&lt;br /&gt;    }&lt;br /&gt;&lt;br /&gt;    &lt;span style="color: #0000ff"&gt;public&lt;/span&gt; NhOuterTransactionScope( ISession session, &lt;br /&gt;                                    TransactionScopeOption transactionScopeOption, &lt;br /&gt;                                    TransactionOptions transactionOptions)&lt;br /&gt;    {&lt;br /&gt;        scope = &lt;span style="color: #0000ff"&gt;new&lt;/span&gt; TransactionScope(transactionScopeOption, transactionOptions);&lt;br /&gt;        &lt;span style="color: #0000ff"&gt;this&lt;/span&gt;.session = session;&lt;br /&gt;        transaction = session.BeginTransaction();&lt;br /&gt;    }&lt;br /&gt;&lt;br /&gt;    &lt;span style="color: #0000ff"&gt;public&lt;/span&gt; &lt;span style="color: #0000ff"&gt;void&lt;/span&gt; Complete()&lt;br /&gt;    {&lt;br /&gt;        session.Flush();&lt;br /&gt;        transaction.Commit();&lt;br /&gt;        scope.Complete();&lt;br /&gt;    }&lt;br /&gt;&lt;br /&gt;    &lt;span style="color: #0000ff"&gt;public&lt;/span&gt; &lt;span style="color: #0000ff"&gt;void&lt;/span&gt; Dispose()&lt;br /&gt;    {&lt;br /&gt;        &lt;span style="color: #0000ff"&gt;try&lt;/span&gt;&lt;br /&gt;        {&lt;br /&gt;            transaction.Dispose();&lt;br /&gt;        }&lt;br /&gt;        &lt;span style="color: #0000ff"&gt;finally&lt;/span&gt;&lt;br /&gt;        {&lt;br /&gt;            scope.Dispose();&lt;br /&gt;        }&lt;br /&gt;    }&lt;br /&gt;}&lt;/pre&gt;

    &lt;br /&gt;&lt;/div&gt;

  &lt;div&gt;
    &lt;br /&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Using an NHOuterTransactionScope, avoids the need for developers to create and commit the separate NHibernate transaction and more importantly it enforces the appropriate nesting order.&lt;/p&gt;</content>
  <ispublished>True</ispublished>
  <isdeleted>False</isdeleted>
  <iscommentsenabled>True</iscommentsenabled>
  <pubDate>2010-12-26 00:44:00</pubDate>
  <lastModified>2012-02-22 17:34:07</lastModified>
  <raters>7</raters>
  <rating>4.857143</rating>
  <slug>Getting-TransactionScope-to-play-nice-with-NHibernate</slug>
  <tags />
  <comments>
    <comment id="12eeff61-e9b5-4b87-b023-1f620102442c" parentid="00000000-0000-0000-0000-000000000000" approved="True" spam="False" deleted="False">
      <date>2010-12-26 11:31:54</date>
      <author>Codebix.com</author>
      <email>trackback</email>
      <country />
      <ip>67.231.245.122</ip>
      <website>http://codebix.com/posts/post/160016/Getting-TransactionScope-to-play-nice-with-NHibernate</website>
      <moderatedby>Auto</moderatedby>
      <content>Codebix.com - Your post is on Codebix.com

This post has been featured on Codebix.com. The place to find latest articles on programming. Click on the url to reach your post's page.</content>
    </comment>
    <comment id="85c9db83-49c0-4617-a3f1-774e340d2164" parentid="00000000-0000-0000-0000-000000000000" approved="True" spam="False" deleted="False">
      <date>2011-01-04 07:54:33</date>
      <author>Matthew Manela</author>
      <email>mmanela@gmail.com</email>
      <country>us</country>
      <ip>131.107.0.94</ip>
      <website>http://matthewmanela.com/</website>
      <moderatedby>mwrock</moderatedby>
      <avatar />
      <content>Very nice post.  This seems like it would be a common scenario people would encounter.  Anyone existing code base trying to convert from ADO.net to NHibernate would definitely benefit from knowing how to do this.

I also agree without about the problem with the request based unit of work pattern.  It does seem dangerous to have a transaction live so long since it is hard to guarantee a request will end quickly at times.


-Matt</content>
    </comment>
    <comment id="e08adf1c-6e1b-4cc3-9fa0-ef4b34fdcf19" parentid="00000000-0000-0000-0000-000000000000" approved="True" spam="False" deleted="False">
      <date>2011-01-04 07:57:21</date>
      <author>DotNetKicks.com</author>
      <email>trackback</email>
      <country />
      <ip>74.86.105.210</ip>
      <website>http://www.dotnetkicks.com/adonet/Getting_TransactionScope_to_play_nice_with_NHibernate</website>
      <content>Getting TransactionScope to play nice with NHibernate

You've been kicked (a good thing) - Trackback from DotNetKicks.com</content>
    </comment>
    <comment id="2e817c7e-0f2d-4262-8bb4-636ef90b3b26" parentid="00000000-0000-0000-0000-000000000000" approved="True" spam="False" deleted="False">
      <date>2011-01-04 08:22:49</date>
      <author>matthewmanela.com</author>
      <email>pingback</email>
      <country />
      <ip>66.147.242.170</ip>
      <website>http://matthewmanela.com/blog/using-nhibernate-with-existing-ado-net-transactions/</website>
      <content>Pingback from matthewmanela.com

ADO.NET |   Using NHibernate with existing ADO.NET transactions | Farblondzshet in Code with Matthew Manela</content>
    </comment>
    <comment id="93c536cc-ccc7-476a-9ec7-cb7d1da0c9db" parentid="00000000-0000-0000-0000-000000000000" approved="True" spam="False" deleted="False">
      <date>2011-01-11 08:26:04</date>
      <author>mark</author>
      <email>mark.uvodich@gmail.com</email>
      <country>us</country>
      <ip>198.51.229.30</ip>
      <moderatedby>mwrock</moderatedby>
      <avatar />
      <content>Hey Matt,

In this situation where are you storing the session?  Still in the HttpContext?  Are you getting the session out of the context every time you create an NhOuterTransactionScope?

-Mark</content>
    </comment>
    <comment id="560c40c7-1c09-4860-a93c-a0ef18c13900" parentid="00000000-0000-0000-0000-000000000000" approved="True" spam="False" deleted="False">
      <date>2011-01-12 08:30:04</date>
      <author>mwrock</author>
      <email>matt@mattwrock.com</email>
      <country>us</country>
      <ip>131.107.0.74</ip>
      <website>http://www.mattwrock.com/</website>
      <moderatedby>mwrock</moderatedby>
      <avatar />
      <content>It is stored in HttpContext(or CallContext in non web environments) and retrieved from there every time a NhOuterTransactionScope is created. However the pulling from httpContext is encapsulated by a SessionManager class and a UnitOfWork framework that all works alongside of StructureMap. The result is that creating a TransactionScope is as simple as:

using (var scope = sessionManager.CreateTransactionScope())
{
    ...
}</content>
    </comment>
    <comment id="45964c35-af74-42ae-931c-8261008b4e3b" parentid="00000000-0000-0000-0000-000000000000" approved="True" spam="False" deleted="False">
      <date>2011-11-11 18:44:59</date>
      <author>Roy</author>
      <email>RoyMcDougall@gmail.com</email>
      <country />
      <ip>71.235.151.102</ip>
      <moderatedby>mwrock</moderatedby>
      <avatar />
      <content>Excellent post Matt. Your writing is very clear. Would it be possible to get a sample program that uses your NhOuterTransactionScope class?</content>
    </comment>
    <comment id="34dedd4d-20d7-4649-a7fc-2dff951f5a2d" parentid="00000000-0000-0000-0000-000000000000" approved="True" spam="False" deleted="False">
      <date>2011-11-13 06:59:20</date>
      <author>Matt Wrock</author>
      <email>matt@mattwrock.com</email>
      <country />
      <ip>50.46.255.50</ip>
      <avatar />
      <content>Roy,

I think it would be helpful to abstract this into a digestable sample or even a Nuget library you can simply reference in your app. Right now, our implementation is overly coupled with our Unit Of Work library to add a sample based on my code as is but I will try to decouple these and get something up.</content>
    </comment>
    <comment id="0a32d224-9651-41fe-b1f2-816c5edfe3f6" parentid="00000000-0000-0000-0000-000000000000" approved="True" spam="False" deleted="False">
      <date>2011-11-15 17:26:02</date>
      <author>programmersgoodies.com</author>
      <email>pingback</email>
      <country />
      <ip>64.90.55.54</ip>
      <website>http://programmersgoodies.com/asp-net-mvc-2-nhibernate-and-transaction-across-layers</website>
      <content>Pingback from programmersgoodies.com

ASP.NET MVC 2 , Nhibernate and transaction across layers - Programmers Goodies</content>
    </comment>
    <comment id="f8c99e8a-f5b9-41cc-80a4-cfa4ae827a81" parentid="00000000-0000-0000-0000-000000000000" approved="True" spam="False" deleted="False">
      <date>2012-02-22 08:34:07</date>
      <author>Andre Loker</author>
      <email>mail@andreloker.de</email>
      <country />
      <ip>217.83.173.42</ip>
      <avatar />
      <content>Excellent post. I have been running into those issues with &amp;quot;TransactionScope must be disposed on the same thread&amp;quot; in the past while stress testing a web application. For that app I tried to use a HttpModule to span a TransactionScope across the whole request. A very bad idea indeed - your post points out why.

My current approach is similar to your NhOuterTransactionScope. I&amp;#39;m also supporting nesting of scopes which makes it easier to transparently use it everywhere needed. If a piece of code needs a session, it just calls IScopeControl.OpenScope() and it gets a scope. The outermost call to OpenScope() creates a root scope which actually holds the ISession/ITransaction/TransactionScope. That way I can transparently move the control about what needs to be spanned by one transaction to a place where this knowledge exists, eg. in a controller action. There are some additional details like requesting a completely isolated scope (with TransactionScopeOption.RequiresNew and a fresh ISession) for situations where that is needed.

Regards, 
Andre</content>
    </comment>
    <comment id="35da226a-ac3b-477d-b882-b88c3cc480c2" parentid="00000000-0000-0000-0000-000000000000" approved="True" spam="False" deleted="False">
      <date>2013-08-08 09:15:22</date>
      <author>com-lab.biz</author>
      <email>pingback</email>
      <country />
      <ip>119.18.58.84</ip>
      <website>http://com-lab.biz/user51/2013/08/08/reading-operations-inside-nhibernate-transaction/</website>
      <content>Pingback from com-lab.biz

Reading operations inside NHibernate transaction | user51</content>
    </comment>
  </comments>
  <categories />
  <notifications>
    <email>dwaynewilliamsma@GMAIL.COM</email>
    <email>john.sonmez@gmail.com</email>
    <email>RoyMcDougall@gmail.com</email>
    <email>mail@andreloker.de</email>
  </notifications>
</post>